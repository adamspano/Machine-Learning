(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1714098,      31036]
NotebookOptionsPosition[   1696014,      30741]
NotebookOutlinePosition[   1696413,      30757]
CellTagsIndexPosition[   1696370,      30754]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.815321966930484*^9, 3.8153219673863297`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"4ebab819-0e2f-4fb2-90e9-0f6f08d3445e"],

Cell[CellGroupData[{

Cell["Predicting numerical variables and sequences", "Title",
 CellChangeTimes->{{3.780151010559699*^9, 3.780151042736249*^9}, {
  3.780151439025258*^9, 3.780151449278284*^9}, {3.814100497940077*^9, 
  3.8141004988705387`*^9}, {3.8144380944340315`*^9, 
  3.8144381003435287`*^9}},ExpressionUUID->"3f6bed55-5853-4250-a1b9-\
bb3bd463014f"],

Cell[CellGroupData[{

Cell["Predict insurance costs", "Section",
 CellChangeTimes->{
  3.7802021788162556`*^9},ExpressionUUID->"d64be271-a728-4f07-9964-\
f3dac8a9b6ab"],

Cell["\<\
This exercise is taken from Lantz\[CloseCurlyQuote]s book \
\[OpenCurlyDoubleQuote]Machine Learning with R\[CloseCurlyDoubleQuote]

In order for a health insurance company to make money, it needs to collect \
more in yearly premiums than it spends on medical care to its beneficiaries. \
As a result, insurers invest a great deal of time and money in developing \
models that accurately forecast medical expenses for the insured population.

Medical expenses are difficult to estimate because the most costly conditions \
are rare and seemingly random. Still, some conditions are more prevalent for \
certain segments of the population. For instance, lung cancer is more likely \
among smokers than non-smokers, and heart disease may be more likely among \
the obese.

The goal of this analysis is to use patient data to estimate the average \
medical care expenses for such population segments. These estimates can be \
used to create actuarial tables that set the price of yearly premiums higher \
or lower, depending on the expected treatment costs.\
\>", "Text",
 CellChangeTimes->{{3.7799772182194705`*^9, 3.779977236644737*^9}, 
   3.780150646727251*^9, {3.7802042220733967`*^9, 3.7802043111466985`*^9}, {
   3.7802044015185184`*^9, 
   3.7802044061716347`*^9}},ExpressionUUID->"377f75c9-a050-4dc1-bba2-\
e744bba281ad"],

Cell[CellGroupData[{

Cell["The data", "Subsection",
 CellChangeTimes->{{3.780204423037445*^9, 
  3.7802044241235447`*^9}},ExpressionUUID->"145ee5f6-5d9b-42bf-8428-\
d39618ab358d"],

Cell["\<\
The data set is available in csv format from MyAberdeen. It consists of 7 \
columns with the following information:\
\>", "Text",
 CellChangeTimes->{{3.7774729816829653`*^9, 3.777473042026904*^9}, {
  3.777473073764151*^9, 3.777473168697404*^9}, {3.7802044306327877`*^9, 
  3.7802045079195786`*^9}, {3.7802045769123588`*^9, 3.7802046005239844`*^9}, {
  3.7802047976970873`*^9, 
  3.780204798533058*^9}},ExpressionUUID->"e652e3ef-00c2-4aa4-9c7e-\
edf3aee798d5"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["age",
  FontWeight->"Bold"],
 ": age of primary beneficiary"
}], "Item",
 CellChangeTimes->{{3.7802046162196417`*^9, 
  3.780204619818447*^9}},ExpressionUUID->"6ce56057-5507-4d6d-8694-\
6aaeca9a7cee"],

Cell[TextData[{
 StyleBox["sex",
  FontWeight->"Bold"],
 ": insurance contractor gender, female, male"
}], "Item",
 CellChangeTimes->{{3.7802046162196417`*^9, 
  3.7802046236727886`*^9}},ExpressionUUID->"a51c2475-bbf5-456c-a7e4-\
4c0476035368"],

Cell[TextData[{
 StyleBox["bmi",
  FontWeight->"Bold"],
 ": Body mass index, providing an understanding of body, weights that are \
relatively high or low relative to height, objective index of body weight (kg \
/ ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["m",
     FontSlant->"Plain"], "2"], TraditionalForm]],ExpressionUUID->
  "3dccbc96-e117-492f-a5d0-089a11aff798"],
 ") using the ratio of height to weight, ideally 18.5 to 24.9"
}], "Item",
 CellChangeTimes->{{3.7802046162196417`*^9, 
  3.78020462660347*^9}},ExpressionUUID->"d3946448-d690-4924-81b1-\
829ebd97485f"],

Cell[TextData[{
 StyleBox["children",
  FontWeight->"Bold"],
 ": Number of children covered by health insurance / Number of dependents"
}], "Item",
 CellChangeTimes->{{3.7802046162196417`*^9, 
  3.7802046284467897`*^9}},ExpressionUUID->"952500f0-049e-4751-9fcd-\
a4519cfd1560"],

Cell[TextData[{
 StyleBox["smoker",
  FontWeight->"Bold"],
 ": yes/no"
}], "Item",
 CellChangeTimes->{{3.7802046162196417`*^9, 
  3.7802046488628845`*^9}},ExpressionUUID->"2cb699e8-ebc4-4b7c-873c-\
f1e7410d7283"],

Cell[TextData[{
 StyleBox["region",
  FontWeight->"Bold"],
 ": the beneficiary's residential area in the US, northeast, southeast, \
southwest, northwest."
}], "Item",
 CellChangeTimes->{{3.7802046162196417`*^9, 
  3.7802046324877434`*^9}},ExpressionUUID->"3cb8dd5c-3e95-450a-a4e1-\
d4a868abb65e"],

Cell[TextData[{
 StyleBox["charges:",
  FontWeight->"Bold"],
 " Individual medical costs billed by health insurance"
}], "Item",
 CellChangeTimes->{{3.7802046162196417`*^9, 
  3.7802046319726095`*^9}},ExpressionUUID->"1087031c-7781-445c-b6ac-\
9af92827a830"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Goal of the analysis:",
  FontWeight->"Bold"],
 " We will assume that the ",
 StyleBox["dependent variable is charges",
  FontWeight->"Bold"],
 ", i.e. we intend to use the other variables to predict the individual \
medical costs billed by health insurance."
}], "Text",
 CellChangeTimes->{{3.780205310700513*^9, 3.780205359633361*^9}, {
  3.7802055055790596`*^9, 
  3.780205539758173*^9}},ExpressionUUID->"17853437-c22c-456a-b2c0-\
25202789af86"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 1", "Subsection",
 CellChangeTimes->{{3.780204819657154*^9, 3.7802048218077593`*^9}, 
   3.814438116203114*^9},ExpressionUUID->"51aea49d-20b1-4a9b-a5e7-\
39d30b9d5516"],

Cell[TextData[{
 "Download the data from MyAberdeen and import to a variable named ",
 StyleBox["data", "CodeText"]
}], "Text",
 CellChangeTimes->{{3.7774732853371487`*^9, 3.777473289513637*^9}, {
  3.780204825534083*^9, 
  3.78020485459274*^9}},ExpressionUUID->"bb4569c9-68c4-4775-b598-\
4fc2d6e50741"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", " ", "=", " ", 
  RowBox[{
  "SemanticImport", "[", 
   "\"\<C:\\\\Users\\\\spano\\\\Downloads\\\\insurance.csv\>\"", "]"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.8152417537751274`*^9, 3.8152418098925896`*^9}, {
  3.8153013563197937`*^9, 3.8153013837828083`*^9}, {3.815302770828459*^9, 
  3.815302776300303*^9}, {3.8153170127811775`*^9, 3.81531702464505*^9}, {
  3.8153190430245156`*^9, 3.8153190695932446`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"ef3cefb9-cc57-4d7f-88e8-fe8cb7cfc012"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
       Association[
        "InitialData" -> 
         TypeSystem`CacheKey[
          9328025437325735361018483212420722998557325103749528175320], 
         "InitialShape" -> TypeSystem`PackageScope`HeaderShape[
           
           Association[{All, "age"} -> 1, {All, "sex"} -> 1, {All, "bmi"} -> 
            1, {All, "children"} -> 1, {All, "smoker"} -> 1, {All, "region"} -> 
            1, {All, "charges"} -> 1], 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`RowShape[
               Association[
               "age" -> TypeSystem`PackageScope`AtomShape[34], "sex" -> 
                TypeSystem`PackageScope`AtomShape[54.], "bmi" -> 
                TypeSystem`PackageScope`AtomShape[60], "children" -> 
                TypeSystem`PackageScope`AtomShape[34], "smoker" -> 
                TypeSystem`PackageScope`AtomShape[27.], "region" -> 
                TypeSystem`PackageScope`AtomShape[81.], "charges" -> 
                TypeSystem`PackageScope`AtomShape[60]]], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "age", "sex", "bmi", "children", "smoker", "region", "charges"}, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["female", "male"]], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["no", "yes"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "northeast", "northwest", "southeast", "southwest"]], 
             TypeSystem`Atom[Real]}], 1338], "Meta" -> 
         Association["ID" -> 32753638398076], "RowTarget" -> 20, 
         "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`HeaderShape[
           Association[{All, "age"} -> 1, {All, "sex"} -> 1, {All, "bmi"} -> 
            1, {All, "children"} -> 1, {All, "smoker"} -> 1, {All, "region"} -> 
            1, {All, "charges"} -> 1], 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`RowShape[
               Association[
               "age" -> TypeSystem`PackageScope`AtomShape[34], "sex" -> 
                TypeSystem`PackageScope`AtomShape[54.], "bmi" -> 
                TypeSystem`PackageScope`AtomShape[60], "children" -> 
                TypeSystem`PackageScope`AtomShape[34], "smoker" -> 
                TypeSystem`PackageScope`AtomShape[27.], "region" -> 
                TypeSystem`PackageScope`AtomShape[81.], "charges" -> 
                TypeSystem`PackageScope`AtomShape[60]]], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "age", "sex", "bmi", "children", "smoker", "region", "charges"}, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["female", "male"]], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["no", "yes"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "northeast", "northwest", "southeast", "southwest"]], 
             TypeSystem`Atom[Real]}], 1338], "Path" -> {}, 
         "BaseIndices" -> {}, "DisplayedRowCount" -> 20, 
         "DisplayedColumnCount" -> 7, "DataRowCount" -> 1338, 
         "DataColumnCount" -> 7, "SortPaths" -> {}, "SortDirections" -> {}, 
         "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["age", 
                    Style[
                    "age", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "age"}, 1]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "age"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["sex", 
                    Style[
                    "sex", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "sex"}, 1]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "sex"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["bmi", 
                    Style[
                    "bmi", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "bmi"}, 1]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "bmi"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["children", 
                    Style[
                    "children", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "children"}, 1]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "children"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["smoker", 
                    Style[
                    "smoker", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "smoker"}, 1]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "smoker"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["region", 
                    Style[
                    "region", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "region"}, 1]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "region"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["charges", 
                    Style[
                    "charges", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "charges"}, 1]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "charges"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["19"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["27.9"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["yes", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["southwest", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["16884.9"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["18"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["33.77"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["southeast", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1725.55"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["28"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["33.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["southeast", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4449.46"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["33"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["22.705"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["northwest", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["21984.5"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["32"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["28.88"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["northwest", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3866.86"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["31"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["25.74"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["southeast", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3756.62"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["46"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["33.44"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["southeast", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["8240.59"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["37"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["27.74"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["northwest", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["7281.51"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["37"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["29.83"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["northeast", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["6406.41"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["60"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["25.84"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["northwest", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["28923.1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["25"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["26.22"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["northeast", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2721.32"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["62"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["26.29"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["yes", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["southeast", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["27808.7"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["23"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["34.4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["southwest", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1826.84"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["56"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["39.82"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["southeast", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["11090.7"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["27"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["42.13"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["yes", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["southeast", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["39611.8"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["19"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["24.6"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["southwest", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1837.24"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["52"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["30.78"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["northeast", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["10797.3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["23"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["23.845"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["northeast", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2395.17"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["56"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["40.3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["no", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["southwest", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["10602.4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["30"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{54., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["35.3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["bmi"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["children"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["yes", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["smoker"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{27., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["southwest", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{81., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["36837.5"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["charges"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 1338, 1], {1, 1338 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$], Appearance -> 
                    None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 1338, 1], {1, 1338 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$], Appearance -> 
                    None], " ", 
                    Style[
                    Mouseover[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    1338, FontColor -> GrayLevel[0], FontWeight -> "Medium"]},
                     BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    1338, FontColor -> GrayLevel[0], FontWeight -> "Medium"]},
                     BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 1338, 1], {1, 1338 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$], Appearance -> 
                    None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 1338, 1], {1, 1338 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$], Appearance -> 
                    None]}], ContextMenu -> {}], 
                    Graphics[{
                    RGBColor[
                    0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                    Line[{{0, 0}, {0, 19}}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 0}, {0, 0}}, BaselinePosition -> 
                    Scaled[0.35]]}], ImageMargins -> {{0, -1}, {-1, 1}}]], 
                 Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
                "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> 
              Left, Dividers -> All, FrameStyle -> 
              GrayLevel[0.7490196078431373], 
              BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
             LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
             False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             If[GeneralUtilities`$DebugMode, 
              Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                TypeSystem`NestedGrid`PackagePrivate`formatState[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], ImageSizeCache -> {477., {269., 275.}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[], ImageSizeCache -> {477., {269., 275.}}], 
      BaseStyle -> {LineBreakWithin -> False}, DynamicModuleValues :> {}, 
      Initialization :> 
      Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
        Needs["Dataset`"]; 
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]], 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 9328025437325735361018483212420722998557325103749528175320,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8153170267393403`*^9, 3.8153170541253767`*^9}, {
   3.815319047461232*^9, 3.8153190702895994`*^9}, 3.815319272719201*^9, 
   3.815321834192828*^9, 3.815321980559949*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"9f64238f-9dc8-49f3-8cac-1713132622bc"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8153190698841457`*^9, 3.8153190724016843`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"e9754b72-8295-4bca-9a58-a4275de69a63"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 2", "Subsection",
 CellChangeTimes->{{3.78020488389853*^9, 3.780204885663497*^9}, {
   3.8144381183902645`*^9, 3.8144381186655293`*^9}, 
   3.815241764727435*^9},ExpressionUUID->"9e6e1a69-fe72-40a4-91a7-\
36931aa10c1f"],

Cell["Look at the first 5 rows of the data.", "Text",
 CellChangeTimes->{{3.7802048908826275`*^9, 3.780204905180395*^9}, {
  3.7802049979281635`*^9, 
  3.780205009174006*^9}},ExpressionUUID->"92309b8a-d4fb-4a66-9ee9-\
ab02f190b690"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"data", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"1", " ", ";;", " ", "5"}], ",", " ", "All"}], "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8152418193585386`*^9, 3.8152418500284805`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"efc90462-3e97-482e-8b0d-d901a2c1024b"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association["InitialData" -> {
       Association[
       "age" -> 19, "sex" -> "female", "bmi" -> 27.9, "children" -> 0, 
        "smoker" -> "yes", "region" -> "southwest", "charges" -> 16884.924], 
       Association[
       "age" -> 18, "sex" -> "male", "bmi" -> 33.77, "children" -> 1, 
        "smoker" -> "no", "region" -> "southeast", "charges" -> 1725.5523], 
       Association[
       "age" -> 28, "sex" -> "male", "bmi" -> 33., "children" -> 3, "smoker" -> 
        "no", "region" -> "southeast", "charges" -> 4449.462], 
       Association[
       "age" -> 33, "sex" -> "male", "bmi" -> 22.705, "children" -> 0, 
        "smoker" -> "no", "region" -> "northwest", "charges" -> 21984.47061], 
       Association[
       "age" -> 32, "sex" -> "male", "bmi" -> 28.88, "children" -> 0, 
        "smoker" -> "no", "region" -> "northwest", "charges" -> 3866.8552]}, 
     "InitialShape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "age"} -> 1, {All, "sex"} -> 1, {All, "bmi"} -> 
        1, {All, "children"} -> 1, {All, "smoker"} -> 1, {All, "region"} -> 
        1, {All, "charges"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "age" -> TypeSystem`PackageScope`AtomShape[34], "sex" -> 
            TypeSystem`PackageScope`AtomShape[54.], "bmi" -> 
            TypeSystem`PackageScope`AtomShape[60], "children" -> 
            TypeSystem`PackageScope`AtomShape[34], "smoker" -> 
            TypeSystem`PackageScope`AtomShape[27.], "region" -> 
            TypeSystem`PackageScope`AtomShape[81.], "charges" -> 
            TypeSystem`PackageScope`AtomShape[60]]], 
          DirectedInfinity[1], 7, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "age", "sex", "bmi", "children", "smoker", "region", "charges"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["female", "male"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["no", "yes"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["northwest", "southeast", "southwest"]], 
         TypeSystem`Atom[Real]}], 5], "Meta" -> 
     Association["ID" -> 32762228332669], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "age"} -> 1, {All, "sex"} -> 1, {All, "bmi"} -> 
        1, {All, "children"} -> 1, {All, "smoker"} -> 1, {All, "region"} -> 
        1, {All, "charges"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "age" -> TypeSystem`PackageScope`AtomShape[34], "sex" -> 
            TypeSystem`PackageScope`AtomShape[54.], "bmi" -> 
            TypeSystem`PackageScope`AtomShape[60], "children" -> 
            TypeSystem`PackageScope`AtomShape[34], "smoker" -> 
            TypeSystem`PackageScope`AtomShape[27.], "region" -> 
            TypeSystem`PackageScope`AtomShape[81.], "charges" -> 
            TypeSystem`PackageScope`AtomShape[60]]], 
          DirectedInfinity[1], 7, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "age", "sex", "bmi", "children", "smoker", "region", "charges"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["female", "male"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["no", "yes"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["northwest", "southeast", "southwest"]], 
         TypeSystem`Atom[Real]}], 5], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 5, "DisplayedColumnCount" -> 7, "DataRowCount" -> 
     5, "DataColumnCount" -> 7, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["age", 
                  Style[
                  "age", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                  All, "age"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "age"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["sex", 
                  Style[
                  "sex", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                  All, "sex"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "sex"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["bmi", 
                  Style[
                  "bmi", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                  All, "bmi"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "bmi"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["children", 
                  Style[
                  "children", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                  All, "children"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "children"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["smoker", 
                  Style[
                  "smoker", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                  All, "smoker"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "smoker"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["region", 
                  Style[
                  "region", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                  All, "region"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "region"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["charges", 
                  Style[
                  "charges", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                  All, "charges"}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "charges"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["19"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["age"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["female", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{54., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["27.9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["bmi"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["children"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["yes", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["smoker"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["southwest", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["region"]}, "Item", False], "Mouse"], 
              ImageSize -> {{81., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["16884.9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["charges"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["18"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["age"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["male", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{54., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["33.77"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["bmi"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["children"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["no", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["smoker"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["southeast", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["region"]}, "Item", False], "Mouse"], 
              ImageSize -> {{81., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1725.55"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["charges"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["28"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["age"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["male", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{54., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["33.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["bmi"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["children"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["no", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["smoker"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["southeast", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["region"]}, "Item", False], "Mouse"], 
              ImageSize -> {{81., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4449.46"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["charges"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["33"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["age"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["male", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{54., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["22.705"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["bmi"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["children"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["no", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["smoker"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["northwest", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["region"]}, "Item", False], "Mouse"], 
              ImageSize -> {{81., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["21984.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["charges"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["age"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["male", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{54., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["28.88"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["bmi"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["children"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["no", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["smoker"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["northwest", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["region"]}, "Item", False], "Mouse"], 
              ImageSize -> {{81., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3866.86"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["charges"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{461., {84., 90.}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{461., {84., 90.}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8152418502504053`*^9, 3.815301875276351*^9, 3.8153169788046026`*^9, {
   3.815317034066914*^9, 3.8153170548471317`*^9}, 3.8153192734089675`*^9, 
   3.8153218348936996`*^9, 3.8153219812763124`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"83c52445-84dd-4e06-b4e1-0a91f8af2f5d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 3", "Subsection",
 CellChangeTimes->{{3.7802050137788997`*^9, 3.780205015936349*^9}, {
  3.8144381208297415`*^9, 
  3.814438121580767*^9}},ExpressionUUID->"3dcc9817-f95a-4ff1-8687-\
86ab51ce2c44"],

Cell["\<\
In the previous task you would have realised that the first row of the \
dataset is different to the rest since it gives the name of the columns, i.e. \
it defines the names of the features. Separate the name of the features \
(first row) from the list of features for each beneficiary (drop the first \
row). Proceed as follows:\
\>", "Text",
 CellChangeTimes->{{3.780205020122752*^9, 3.7802050463189564`*^9}, {
  3.780205089716472*^9, 
  3.780205230141617*^9}},ExpressionUUID->"230321c7-ea19-42ec-ae24-\
15df3aafbf89"],

Cell[TextData[{
 "Define a list named ",
 StyleBox["features", "CodeText"],
 " containing the name of the features given in the first row."
}], "Item",
 CellChangeTimes->{{3.7802052263737645`*^9, 
  3.7802052384460993`*^9}},ExpressionUUID->"863e2268-144a-4438-b7c5-\
37c194e80b1b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "First"}]], "Input",
 CellChangeTimes->{{3.8153172914482737`*^9, 3.815317292415947*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"eb17db38-c832-4b1c-919d-dbb2323b7ba6"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"]], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/First",
              ButtonNote->"paclet:ref/First"],
             "\"paclet:ref/First\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"First\\\", \\\"[\\\", \
StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\"]\\\"}]\\) gives the first element in \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\). \\n\\!\\(\\*RowBox[{\\\"First\
\\\", \\\"[\\\", RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"def\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) gives the first element \
if it exists, or \\!\\(\\*StyleBox[\\\"def\\\", \\\"TI\\\"]\\) \
otherwise.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                   TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", "paclet:ref/First", 
                    "paclet:ref/First", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/First.html"], 
                    None}, "http://reference.wolfram.com/language/ref/First.\
html", "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{"HoldRest", ",", "Protected"}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`First\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"],
                ImageSizeCache->{13., {4., 9.}}], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"],
                ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/First",
              ButtonNote->"paclet:ref/First"],
             "\"paclet:ref/First\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"First\\\", \\\"[\\\", \
StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\"]\\\"}]\\) gives the first element in \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\). \\n\\!\\(\\*RowBox[{\\\"First\
\\\", \\\"[\\\", RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"def\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) gives the first element \
if it exists, or \\!\\(\\*StyleBox[\\\"def\\\", \\\"TI\\\"]\\) \
otherwise.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"First\", \"[\", StyleBox[\"expr\", \"TI\"], \"]\"}]\) \
gives the first element in \!\(\*StyleBox[\"expr\", \"TI\"]\). \n\
\!\(\*RowBox[{\"First\", \"[\", RowBox[{StyleBox[\"expr\", \"TI\"], \",\", \
StyleBox[\"def\", \"TI\"]}], \"]\"}]\) gives the first element if it exists, \
or \!\(\*StyleBox[\"def\", \"TI\"]\) otherwise.", "Documentation" -> 
    Association[
     "Local" -> "paclet:ref/First", "Web" -> 
      "http://reference.wolfram.com/language/ref/First.html"], "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> None, "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {HoldRest, Protected}, "FullName" -> 
    "System`First"], False]]], "Output",
 CellChangeTimes->{3.8153172929289017`*^9, 3.8153192735979037`*^9, 
  3.8153218350867424`*^9, 3.815321981533226*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"6f4d276f-fc7b-48ba-97d6-4902225f43b1"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8153171980670843`*^9, 3.8153171984674654`*^9}},
 CellLabel->
  "In[301]:=",ExpressionUUID->"86d90d94-fddd-4d8e-9e64-5c49bef906c5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"features", " ", "=", " ", 
   RowBox[{
    RowBox[{"First", "@", 
     RowBox[{"Keys", "@", "data"}]}], " ", "//", " ", "Normal"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8152418853736005`*^9, 3.81524190372761*^9}, {
   3.8153172992705812`*^9, 3.8153173174924517`*^9}, 3.815317349183972*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"a0a4c9ae-819a-48d0-b562-ab9dae411962"],

Cell[TextData[{
 "Define a list named ",
 StyleBox["insurance", "CodeText"],
 " containing all rows in ",
 StyleBox["data", "CodeText"],
 " except the first "
}], "Item",
 CellChangeTimes->{{3.7802052263737645`*^9, 
  3.780205265155624*^9}},ExpressionUUID->"fda1e783-3b42-4a4f-9c82-\
202943c787ba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"insurance", " ", "=", " ", 
   RowBox[{
    RowBox[{"Values", "@", "data"}], " ", "//", " ", "Normal"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8152419426403475`*^9, 3.8152419920102777`*^9}, {
  3.8153173269605923`*^9, 3.8153173471080017`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"997e04ed-0e56-47da-9cc3-93d022986ed6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bmi", " ", "=", 
   RowBox[{"insurance", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "3"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.815243256922334*^9, 3.815243312059151*^9}, {
  3.8152433785855575`*^9, 3.81524338197775*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"fa564530-9eb6-4c98-865f-090ba089332a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 4", "Subsection",
 CellChangeTimes->{{3.7802055754315987`*^9, 3.7802055776186256`*^9}, {
  3.81443812343178*^9, 
  3.8144381244560413`*^9}},ExpressionUUID->"1f44095c-6782-4dd2-8c72-\
de019e988ff4"],

Cell[TextData[{
 "Use the ",
 StyleBox["insurance", "CodeText"],
 " list to extract the dependent variable. Store the values of the dependent \
variable in a new list called ",
 StyleBox["charges", "CodeText"],
 "."
}], "Text",
 CellChangeTimes->{{3.7802055825720596`*^9, 
  3.780205627938858*^9}},ExpressionUUID->"05a03002-680a-40a6-aa6f-\
e5a27cc38612"],

Cell[BoxData[
 RowBox[{
  RowBox[{"charges", " ", "=", " ", 
   RowBox[{"insurance", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "7"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8152420439058704`*^9, 3.8152420817442913`*^9}, {
  3.8153174082516623`*^9, 3.815317411574537*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"10acf5fb-f422-451f-a9e7-b723a3443b8d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 5", "Subsection",
 CellChangeTimes->{{3.780205702577526*^9, 3.780205705978135*^9}, {
  3.814438126606293*^9, 
  3.814438127092991*^9}},ExpressionUUID->"7d640b95-d60c-4403-bad4-\
d2b2b0dbaab4"],

Cell["Plot a histogram of charges. ", "Text",
 CellChangeTimes->{{3.7802057082432537`*^9, 
  3.780205883910141*^9}},ExpressionUUID->"66b99ae1-ffd6-436c-8325-\
9222ff2bcaa8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", "charges", "]"}]], "Input",
 CellChangeTimes->{{3.815242087947412*^9, 3.815242091640621*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"30b38aad-e890-4956-976b-af433eb5ff58"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.595], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.595], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0., 0}, {5000., 359.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{27.235188150520415`, 
           52.67821949867586}, {-102.31232630088626`, 92.32840450262977}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 359]& ,
        TagBoxNote->"359"],
       StyleBox["359", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[359, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{5000., 0}, {10000., 353.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{52.17821949867586, 
           77.6212508468313}, {-99.06763442116174, 92.32840450262977}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 353]& ,
        TagBoxNote->"353"],
       StyleBox["353", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[353, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{10000., 0}, {15000., 268.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{77.1212508468313, 
           102.56428219498675`}, {-53.10116612506464, 92.32840450262977}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 268]& ,
        TagBoxNote->"268"],
       StyleBox["268", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[268, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{15000., 0}, {20000., 85.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{102.06428219498675`, 127.50731354314219`}, {
           45.86193620653266, 92.32840450262977}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 85]& ,
        TagBoxNote->"85"],
       StyleBox["85", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[85, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{20000., 0}, {25000., 72.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{127.00731354314219`, 152.45034489129762`}, {
           52.89210194593575, 92.32840450262977}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 72]& ,
        TagBoxNote->"72"],
       StyleBox["72", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[72, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{25000., 0}, {30000., 39.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{151.95034489129762`, 177.39337623945306`}, {
           70.7379072844205, 92.32840450262977}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 39]& ,
        TagBoxNote->"39"],
       StyleBox["39", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[39, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{30000., 0}, {35000., 29.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{176.89337623945306`, 202.3364075876085}, {
           76.14572708396135, 92.32840450262977}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 29]& ,
        TagBoxNote->"29"],
       StyleBox["29", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[29, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{35000., 0}, {40000., 54.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{201.8364075876085, 227.27943893576395`}, {
           62.62617758510925, 92.32840450262977}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 54]& ,
        TagBoxNote->"54"],
       StyleBox["54", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[54, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{40000., 0}, {45000., 41.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{226.77943893576395`, 252.2224702839194}, {
           69.65634332451233, 92.32840450262977}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 41]& ,
        TagBoxNote->"41"],
       StyleBox["41", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[41, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{45000., 0}, {50000., 31.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{251.7224702839194, 277.16550163207484`}, {
           75.06416312405318, 92.32840450262977}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 31]& ,
        TagBoxNote->"31"],
       StyleBox["31", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[31, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{50000., 0}, {55000., 2.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{276.66550163207484`, 302.1085329802303}, {
           90.7468405427216, 92.32840450262977}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 2]& ,
        TagBoxNote->"2"],
       StyleBox["2", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{55000., 0}, {60000., 2.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{301.6085329802303, 327.0515643283857}, {
           90.7468405427216, 92.32840450262977}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 2]& ,
        TagBoxNote->"2"],
       StyleBox["2", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{60000., 0}, {65000., 3.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{326.5515643283857, 351.99459567654117`}, {
           90.20605856276751, 92.32840450262977}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 3]& ,
        TagBoxNote->"3"],
       StyleBox["3", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-1300., 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0., 65000.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8152420920275545`*^9, 3.815301875563693*^9, 
  3.8153170557998085`*^9, 3.815319273722709*^9, 3.8153218352256956`*^9, 
  3.8153219817681465`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"97f807e3-66a1-4a1f-ad44-cb72518a80cd"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 6", "Subsection",
 CellChangeTimes->{{3.7802061401172676`*^9, 3.7802061463526273`*^9}, {
  3.8144381289729633`*^9, 
  3.81443812972499*^9}},ExpressionUUID->"6f0229dd-b922-4ad8-9d31-\
35d47c7c3129"],

Cell["\<\
Show that there are 662 female and 676 male individuals in the dataset. \
\>", "Text",
 CellChangeTimes->{{3.780206151313753*^9, 
  3.780206221075672*^9}},ExpressionUUID->"b4c3ce5c-b862-4a7f-86ac-\
18904748cc3e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sex", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"\"\<male\>\"", ",", " ", "\"\<female\>\""}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8152421683758016`*^9, 3.8152421885927544`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"c7164fe4-91a3-41ef-9989-2532af799c2f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"showsex", " ", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Cases", "[", 
      RowBox[{"insurance", ",", 
       RowBox[{"{", 
        RowBox[{"___", ",", " ", "#", ",", " ", "___"}], "}"}]}], "]"}], " ", 
     "&"}], "/@", " ", "sex"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8152421318285255`*^9, 3.815242215039154*^9}, {
  3.81524224624063*^9, 3.8152422795175543`*^9}, {3.8153175247059455`*^9, 
  3.8153175292098083`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"e32a7e56-113d-4950-bb9c-1739e4fafa29"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"showsex", "[", 
    RowBox[{"[", "1", "]"}], "]"}], " ", "//", " ", "Length"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8152422817837315`*^9, 3.815242290434207*^9}, 
   3.8153175534171653`*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"3e441aa6-84d7-44f7-a720-d570ded49076"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"showsex", "[", 
    RowBox[{"[", "2", "]"}], "]"}], " ", "//", " ", "Length"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8152423003659887`*^9, 3.8152423193953648`*^9}, {
  3.8153175501329007`*^9, 3.8153175510355954`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"cdd0d145-bf1e-42d2-ae77-d3d3d2583d61"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"second", " ", "method"}], "*)"}]], "Input",
 CellChangeTimes->{{3.815317560876873*^9, 3.815317567994912*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"13ef776d-facb-45db-8566-9d1216782189"],

Cell[BoxData[
 RowBox[{
  RowBox[{"numbergender", " ", "=", " ", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], " ", ";"}]], "Input",
 CellChangeTimes->{{3.815317480642687*^9, 3.815317543915699*^9}, {
  3.8153176421745987`*^9, 3.815317643406755*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"1f3f3da1-5afb-4288-9053-5dc42bfe15fe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Counts", "@", "numbergender"}]], "Input",
 CellChangeTimes->{{3.815317575926591*^9, 3.815317650181596*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"c815b8a9-0bae-42b1-bae3-ec7535b7ca38"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> Association["female" -> 662, "male" -> 676], 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[54.], 
         TypeSystem`PackageScope`AtomShape[34]]], 2, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration["female", "male"]], 
       TypeSystem`Atom[Integer], 2], "Meta" -> 
     Association["ID" -> 32783703169150], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[54.], 
         TypeSystem`PackageScope`AtomShape[34]]], 2, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration["female", "male"]], 
       TypeSystem`Atom[Integer], 2], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 2, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     2, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["female", 
                  Style[
                  "female", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["female"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["female"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{54., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["662"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["female"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["male", 
                  Style[
                  "male", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["male"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["male"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{54., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["676"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["male"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{125., {38., 44.}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{125., {38., 44.}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8153175835539837`*^9, 3.815317593775758*^9}, {
   3.8153176265435295`*^9, 3.815317650854381*^9}, 3.815319273832665*^9, 
   3.815321835350653*^9, 3.815321981853118*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"0f03776c-6aae-4cda-8a7b-423a889484b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Counts", "@", "numbergender"}], ",", " ", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<female\>\"", ",", " ", "\"\<male\>\""}], "}"}]}], ",", " ", 
   RowBox[{"ChartLegends", "\[Rule]", "Automatic"}], ",", " ", 
   RowBox[{"ChartStyle", "\[Rule]", "\"\<Pastel\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.815317752907338*^9, 3.8153177948626356`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"02e19c3c-30e8-4cea-ba9e-617ff9bbc301"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      Opacity[0], 
      PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 0.}}]}, {{}, {
       Directive[
        EdgeForm[
         Directive[
          Thickness[Small], 
          Opacity[0.6859999999999999]]], 
        RGBColor[0.982864, 0.7431472, 0.3262672]], {{
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.6859999999999999]]], 
          RGBColor[0.761959, 0.470832, 0.940597]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
                662.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
            StatusArea[#, 662]& , TagBoxNote -> "662"], 
           StyleBox["662", {}, StripOnInput -> False]], Annotation[#, 
           Style[662, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.6859999999999999]]], 
          RGBColor[0.431296, 0.709773, 0.927077]], 
         TagBox[
          TooltipBox[
           TagBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               
               RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
                676.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
            StatusArea[#, 676]& , TagBoxNote -> "676"], 
           StyleBox["676", {}, StripOnInput -> False]], Annotation[#, 
           Style[676, {}], "Tooltip"]& ]}}}, {}, {}}, {}, {}, {}, {}, {
      StyleBox[{Antialiasing -> False, {
         Directive[
          Thickness[Tiny]], {
          LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}]}, 
         StyleBox[{}, {"GraphicsLabel"}, StripOnInput -> False]}, 
        StyleBox[{{
           Directive[
            Thickness[Tiny]], 
           LineBox[{{0.5487982520029133, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
              0.}]}], 
           LineBox[{{2.4512017479970867`, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
              0.}]}], {{}, {}, {
             LineBox[{{1.4512017479970867`, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {1.4512017479970867`, 
                0.}]}], 
             LineBox[{{1.5487982520029133`, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {1.5487982520029133`, 
                0.}]}]}, {}}}, 
          StyleBox[{
            Directive[
             Thickness[Tiny]], 
            Directive[
             Thickness[Tiny]], 
            StyleBox[{
              InsetBox[
               FormBox["\"female\"", TraditionalForm], 
               Offset[{0, -2}, {1., 0.}], 
               ImageScaled[{
                 Rational[1, 2], 1}], Automatic, {1, 0}], 
              InsetBox[
               FormBox["\"male\"", TraditionalForm], 
               Offset[{0, -2}, {2., 0.}], 
               ImageScaled[{
                 Rational[1, 2], 1}], Automatic, {1, 0}]}, {{}}, StripOnInput -> 
             False]}, {"GraphicsLabel"}, StripOnInput -> False]}, {
         "GraphicsTicks"}, StripOnInput -> False]}, {"GraphicsAxes"}, 
       StripOnInput -> False]}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {-0.8428550619082302, 0.}, 
     CoordinatesToolOptions -> {"DisplayFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& )}, FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{All, All}, {All, All}}, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {None, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"female\"", "\"male\""}, "SwatchLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.6859999999999999]]], 
                    RGBColor[0.761959, 0.470832, 0.940597]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.6859999999999999]]], 
                    RGBColor[0.431296, 0.709773, 0.927077]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6859999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.761959, 0.470832, 0.940597], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.5079726666666667, 0.313888, 0.6270646666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.761959`", ",", "0.470832`", ",", "0.940597`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.761959, 0.470832, 0.940597]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.761959, 0.470832, 0.940597], Editable -> False,
                     Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6859999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.431296, 0.709773, 0.927077], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.2875306666666667, 0.473182, 0.6180513333333334], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.431296`", ",", "0.709773`", ",", "0.927077`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.431296, 0.709773, 0.927077]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.431296, 0.709773, 0.927077], Editable -> False,
                     Selectable -> False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"{", 
                 RowBox[{"Automatic", ",", "Automatic"}], "}"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.815317795405021*^9, 3.815319273980683*^9, 
  3.815321835518596*^9, 3.815321982072045*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"6c275124-024f-4b03-8612-3a640d15133a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 7", "Subsection",
 CellChangeTimes->{{3.7802062462120595`*^9, 3.7802062479321575`*^9}, {
  3.8144381315743027`*^9, 
  3.8144381323833504`*^9}},ExpressionUUID->"96fb7888-e426-4382-9fd8-\
7859b5815028"],

Cell["\<\
Use a scatter plot to analyse the relation between the cost billed and age. \
Comment on the results. In particular, do you think that age is enough to \
explain the billed costs?\
\>", "Text",
 CellChangeTimes->{{3.77747377732031*^9, 3.7774737777682323`*^9}, {
  3.7774738422648163`*^9, 3.777473865512465*^9}, {3.777473967736475*^9, 
  3.7774739710640182`*^9}, {3.780206250903616*^9, 
  3.7802063116388474`*^9}},ExpressionUUID->"cf8fca7d-76e6-4a10-ade8-\
00a000f2d8cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"age", " ", "=", " ", 
   RowBox[{"insurance", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8152427542792535`*^9, 3.815242775190467*^9}, {
  3.8152429297224483`*^9, 3.8152429401652517`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"f4a639c2-d289-4f79-9b25-37a6a9c0c59a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Transpose", "@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"insurance", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
      RowBox[{"insurance", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "7"}], "]"}], "]"}]}], "}"}]}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Age\>\"", ",", " ", "\"\<Charges\>\""}], "}"}]}], ",", "  ", 
   RowBox[{"PlotMarkers", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<OpenMarkers\>\"", ",", " ", "Medium"}], "}"}]}], ",", " ", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8152430306492314`*^9, 3.8152430385704203`*^9}, {
  3.8152430847276692`*^9, 3.815243097528611*^9}, {3.8152431360205913`*^9, 
  3.815243155297407*^9}, {3.8152435091251693`*^9, 3.8152435353956013`*^9}, {
  3.8153178481307936`*^9, 3.815317890177105*^9}, {3.8153179387542915`*^9, 
  3.815317949700212*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"7b95e2c8-2e0c-4e5a-924e-68a7c680a823"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
    AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
      FormBox[
       StyleBox[
        GraphicsBox[{
          {GrayLevel[1], DiskBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}, 
          {AbsoluteThickness[1.5], Dashing[{}], 
           CircleBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}}],
        StripOnInput->False,
        GraphicsBoxOptions->{DefaultBaseStyle->Directive[
          PointSize[0.004583333333333334], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]]}],
       TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], CompressedData["
1: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
     "]]}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Age\"", TraditionalForm], 
    FormBox["\"Charges\"", TraditionalForm]},
  AxesOrigin->{17.041666666666668`, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{17.041666666666668`, 64.}, {0, 63770.42801}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.815243535769473*^9, 3.815301875906851*^9, 
  3.8153170564175997`*^9, 3.8153179091732235`*^9, 3.815317951485156*^9, 
  3.815319274110653*^9, 3.815321835651551*^9, 3.815321982213995*^9},
 CellLabel->"Out[20]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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
LkPcbF8MGK17bXz9IjIAazXppVSsnEdr1RFWapXGqSCqJLZCFBG3voZdkkzj
YEA8p0pBNRSIq3e24qdMG30D+jp64s2QYcjtw+ZZuCJSJFzgJXpYA5cpquq3
AfyOBywbSd0ducJN4xwZK+NG0VatzyjVznjGSYqBWttQroqWcQ3/934BL0Hp
y12atSybvr1p0alp2hs/DgLxyPGbFo8Ttm69az1blMZk/sOmk+YdufeWiXVE
jcqcsdm7FVd96esP2Buj4MVPckXwD3JTwah0jM/bc9kckUiHWknIdFbyT8XV
zCBx5XjpqYefWdTw8oYTwajj2NqJmc6LmYfI4Jkb213VlYvlOMej+fa7P8MK
cJH7RyS6gDVGn3IocMyeX9YSsmkkmDkWKwV7HvlYueeM1rT4yRKrXWsDT2Oo
43TcxThjgs4FNWzKkFvGAJSIp3RaeajFodrCv5FbRrkWjJrLYwzYVs52n3Ga
85e1LvYP+aFPlDmlEh+OkbhaVehxliGIUWK1Wxty7pm64ygaKRsb4B0wFW9r
A7xF9Sx8JtQ4+sy8rL/g6Ng8EMymtMiVQ6SnkbKYMhGzsufxqXpFc20sNltZ
BSEjydcXubu/1tdeKb+aDE75tIw+1oRkY/yyZ/JW2YC1WeVaEy1YleA1zxbX
fjD05gP7ziay2MSq/eflSMACy/Z2YT8ojGgxHqcSJJtchqVRQ7Ekk9kJDsZf
5SLuRYg/vLT+hFbcQk+ij1yDYWVNc6BE0YU7TsvBV7gDGYag4z2a696Ga3l9
bvhhkWsr42ExZ8upim2nYtUSLxm1qF6EVpSsBxarxDRgf9CS3WcxJqGuUNA8
fX27KDWUwbt4RNB5EMfx7ncdpziHwBpyn3orxoogaW+Ra5y4x/O2u26gDjal
vX0exTJDcrDHZfXJW5PVOUnvhYHz8mZg8M7L78fzKLGCzextX9WxKO1N/qKx
XaiS+wR70fT0fEqVU1I53moPnNaTVEaFPC2JUSVbJHnaZbI2AAK4UHWvrYEq
DhkaEvIit5o5SHkGeoUkjmxq7lQLjteP31wferJGXRgsX+W4+pwuuALTMt38
TPb4/fw22VxfZv0Po1x+ae3x0PWnP7fO29qh7k/qMjiu0ppcOQwNHLekaZ/1
1rOkMcxsxqqoXbq5oNdON36c7sZv8t1q1S1enIweG8S6uUrmxXwf3T/TNebN
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
kN9JMDVpZSqXIerjYYXggukVvmCR9uEVtt2ZwnbaUQzjAkukV+5tkIR5GfMW
OHW85N9ogYyaK7jpoRczHszCnWdC95WUVeRmZevFlbvPztl66uiJW1oHkkRX
QV7YLSN2NVXlL8D740Q2yFxT8aO3Nf6oIPVF3o2wUd+kYRW1adyUczJkbvXY
yqbpG9rlxY2rbBoxv376hhO98m8LVVK6NYq8fmzqpxO6DvvqjtCxJwVpxXyu
3P5gtCsJ5fMV2ztfWndcswlVuD4K9cUEigfdppa8439wUFTusVSNQSQdpYhx
5O8kMixPpsaVPed3laTDhP+pEFVBE2GnSrPon55Ta+mpih8oZrzqwDlNMWSD
SYtlfTpwiE/7Ybovpq+W93bV3Brf7TObu9QveV/e2sl620+nKa9TkqcJZ+H0
2gXcrX6U9a6ssAjHdxLJnEl1V3wqE9NjFP9bIYn9xMyqta64Rcb7pqMXtfSq
+ZXijjaffUeerbIgk77Qt0LvCn7ltq1Vl5MqadM6oxfVR6+Mm56eY5tZWnWK
88pi93DB8fZ79/Oqk6CX7E5vw1M99eMuTxdSe9crs+ABMVplSqYrSJRblI1/
RSn2v0aYfT7AbN42s/D47JI9Z4+6zrrqi/lR0rrYJNvCeuYkj+1roPxw602Z
UXzolY3t245dfm5Zk/ZZ5+/zy5unrj4+amFD2LzFbdZVd+eHf4NAG+F2eBKd
KW1Y3WcNim+997O4u6BGElaqfH0ej4Ss1mQP1Bhvi3P95xk9kPU+/zDDjdno
+f8SYRV3qTl9+X1r66A2z26rpZ3VV7Rfg5QXwBy3pElxxnv3P0zXPj7Kh8a6
vZDqOt+WRuB48qq21S5zbYLrrjdlddtTs6unrvFpSCpskLGZdIotUZbDxBUt
DaffdlcedpEvw0KmPdStd3+mtbxQQ2/Q1IpK1MvFGVnxJz2Fo6uCWDY6HZ/7
tUSeBXsylWMc5dmEFS3BeijhaPSCelyopIKmuL7zbaBhUnVAISj6jrB5OxSM
ci1qoC7RG6w4e3NH1Ip88IWVLeEN1qnoQPMb4yobp6xuhR5NfjpizOhG39ta
tCcNxETnbOlArUME6w5dUMaxxc75sMhGYjirzx0t+uhppn+BLHq/Dh7Xt6SI
7VC9sEMuuM+u0Jp3xgthuPlZwLbXS022OmtYRUozMsArtz5IshW1Gq22UEl6
zEcoyKfmVCcVCOVapU33sIfHMGpi1hLs4bujCnZ8bdPrF7lryOwaHtK2v97P
yqzNlgHkZysbl796TinIwGvBjk5pynKtg4elTf7KQo5ZWXGvPeWkZPX07yaw
zOt+8s8SzSMHlRlps68vJJiflNonztcrSR8WyPX1v6ey1dKavDbPZhmZjlhh
7dacvB37Zkjxuhc4rKyx7nHWahV5a3vvLbT9oRpOvyOscPCss5DSUtvXtYd4
6zjVkAY7ZMEOI5lIGRJ+vSq9w9ywHeaDjUDdcA7uq/e9VZcAaci6z+MeyYwT
3e/yhilr2vi7veaKvJ+ykBsrBpLJ6bOeos35rYRLVBqY+9fJGLwnpV7wWa89
2iMleTKtYG5vxNOGIxd3pDtljFlYv/ZQd/T64KDJq9vSXfR9Bl3IYQRBxg+h
JhD996LbeTREgrAxTl95X1InuAc9veqx3T58pRzICHdNhDqf8jvRZ2P0/ZWP
fz9pjQfY0SpJ1mcxuMPkjXfLE1PmhLL3U7WWfr8tmSU1HW8dOX5zUqo3ozgh
ZIk0d92RUSKYxRiOi7YNCDGHnlR7Ha0Jc99fZfSI3pHNW/xEmb2PpX33hbtO
Y4mgpvm77FXrXKYOmcGKHDKneuuxy+mVRd97RPBCoaQ1zxe1h2DXGz9CqA6d
V8tfjntczYS0bFiPylZEK2c/dCVW3TgfDat86Wq0MtX7i5l469qD57cFn/F5
20IvpbUzPmO5qqxBR7rnLrRWaG88UYEiltCiFvCYEjbIy+tPZMfmIs6+U3do
OyKSDNaXgGuH/zmDo8L1n/IvYl5g7FmYkp8Rpz2J3oQwlX0jobW3/hqD2l13
zTIptncCo/RqvFYsY8UpUjjAr5z5MV2VRMis5Bj7LHjdKRnvK88zKw8xkiCd
HKqh1EIgiQ2VKwGUGa/Ydw7n0y3cnMJAm5b0my9n9ghptGcoeJ22tq2PXSs1
evWBB0HaTsUCVNtOoVWilI8RC+FPcdQwQCYzbF7g+X6BNnrUO/f/cNMKG9rq
Gb4SdmGzzityBKxpowvtZSwQH1HPdA5KbyNi29Z13AZvmiPmM0ol0kiocQtd
Oy4DuKBbbIZKKOwFowEJN03rtS2Y7IP+gB9UALChc2tlSLy47sTSvV3qLbyt
6srElS3qGhK+hSeU1wf+uaXNkbpiHaN+d/39mwM2+kMAr2w8OXfLKUUFcRbU
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
kpVThTLjvSX67YRj++hVoj3cQ7agdOpHvgtRibSHqmvkYaTXIpz2GvhRsiOf
4iRMWis2kk3qaxV0k4SXVu+/EHLlBFY1meL4Q9dveIbbbDmYbupTyywfSvin
YluKnzjxM9ReV4Jceq1l81HLLpUOE+XeeteKckbMty3Hp6xu+zC1I6yn20EF
pUW0aUtSdBpS2jhO1V/10imht4sm5VebpVMKdzf5aiJzvJfpMgpKr+V3+ear
Tjb1C/Z8Omexv2S2UrpkuMvW0/qkgoIh/02QVNN06ESMkoopZvvaGT1pT+5o
rfsYV1lq7IH+BirfVkvocrQ0A3WbERWFyKuXGeLpjG9arnwfdawAEHKxPA9l
bbDCVX+ywRi75RsFqfCb7mq248nvJLPto/rK1T/0iloymfGVzTEHK9uL4IOw
Z3A2Wh2yvPLqCqPcFa1zP9od10LBmhfXHZeyl02eadsX3+HnH7LwAb401uNe
htzUZvB+xfNI25uYdDJ5Gb6qT3lgxf7zZv0lNQ9HT9wKO5tmv2JWl7JDM7vR
T0jg1EeFoOCa7atuufIL62O9TzZfKduFMOIpm7VTlPmeg+vDQUcHIpQc/dBt
2BbkVt5eDfwmtSeOHsALX2u9md7waMpqq+VXEXeRCzo95/bMPpj02rKci2cW
Nx5rvwVcn5hZnSvCqXR2twpnN71+kXv5Kw4u3GlmQkHKiVavIJrNMOa9LyiD
MWVPpPr4Zu3WTDe6MrWJ/zDZNdmv0YX9G5SeKn95ADBDO8rFDb115Qp9lNql
yHsvX0kgwzu5I91dYXCI8IeUDQT6sle70g09526xRkBah2fUOO/jKpu0cDRx
RSsO3qoD53DkYqbbpqMXA5x6Qdfttl6WyT70ufIOH3639xAlCWmYWesv+J9y
sSNlp+2AfmHZgfkYvQ9M5IYSDrUjle2FNHZJI0wb7EGmOXRu/n5lnsMUyQvd
PrRsYqtVxvBl6eIMrZ4HK81s2+nr20c7xgt8M3J+3fJ9ia+lPWljB9KKbZ3Z
erEh2gHtAdAt7Z2b++sJ7LwVoTzkPnRaqeYauvdx+pWEpualLYeX1514Sf3m
Ao+MX9qYrHdY3oiey9TkPqxm+72LKY6eeHOoa1Q8dnHjjA3te+vfiFULU1db
BmzUTSv2n3si3fsdmGkhIEZQh857AKReSLjc2yO/lWB5R83VYGeVKCSkVfZs
1EDfWXOwO726MEiZQ8pTVNBGZkrIwvS6RJZIumZPnlFJMg4UUdA55YpO89b9
jddnbjq59lA3TId/srfhDQ8faGjNQatM9xUTcOf87Z15NXT4N6F6wbI2R1Q8
AD7bEqmRl8OW7RIforXT3LYWHr+hS8F9t11OCBKms6hk2BulK7eyd71nKmvU
MgOHzau9/s5PABXX+cvbAaY2Aw9e17C5NdBkjOiOXWKEF1Z45di+tO5EEnPt
X7H9FCDa5SSpKn44hsPy++ttdTKrdw6SyQ8HkYHW5Mjt78w/ZejJHg27t4RK
3L4z4QckHO77S2vmvHmXA2EQNbwWFpnsmondd1s5WiXNnBqrpBG1KLddnw+1
wNPWxF3zBsF+WJ1h9X/yqraJrp0eEK7tuM1fv+JWWEM6eDwgE0r1qFpAVKyp
KMFI2LFI1m3ftR7lhSitXFo4o8tUt+rfoJ7MwavszzRxX9L7nUjzul8HhzGH
lW9FXIEuOk8+J4Dj4oMg0XenDVVK9l2NFPbumZTfSbnPndry1laGzq2FgON7
Y9VZwWp5s1Snrj6+5tD5JFuyeM2hbh+PKtRHbkbV3c+sE40gVyAbxGtZ11sg
r+YubJUiiVGm/SD1uti5ouC+iC6zdnnL1DVhr8OSI2031aTdaqvcUkWs3S7c
WVvtCeLuExFrffSB+yz2vc1C0MdS0wkqZje6yF+sFfU2nyroe/dCcZLJ5zlo
ytytbKJrhbYcNb3kdsYqDu1UfQ6VYJJuoJnetS9T7e77tglqn3aejKVYu7r5
Xisr33NXM/kcvgdStAfcunU/aSxZj3E9KxjL0uJlH+Z3bJWA6RWtTFHJ0KF5
6WCfZaaYOi28X3B/HhfmenBnqm+6fLYZPqfRfeyzzGjSam9Ws0Tv0o24j05Q
BnD/CcH+8c+S+zTSvvcr+780pod60n05U1k+4TT36chTjScrs6I8bU54IV1u
lctfIRCtFN5rsTlFK6GToyL1ucKR7j9zX+zI7O6phaS+dzn6o4Lvsj/9MrSR
jSj+4QOfjJ0homf+Md/yfePSHd9M8hWerf2Rx5npcZaBsaRPJhku91bBd7p6
WN+XK5M1lbvd9xO9eiDF1YVbBZ/6LxnaDR6Utx4KP6Vv9Z2JEZ+yhzSXwhkF
hefyvYRi86R3YUjZn3/59/zlL+1PiQxCNU+4V/A+18G5VBXoobwSavogb35/
kcDMxyOz1Pmjgu/+iwzMsmuaD3oquz4dszWnJjMLvuVI9x6npEOC+mdp3f1F
QlF+bTfYvR46boQFevyM0DjTvSP/G1hSwjC4A55aitGeMW6UWY8sZc0P86NN
qeGez8aasZz/v0wozOddTktg+sDuW7lvpsyN/wb2hgv9FfBohqdgtTHV6vKz
tSccIPrwFJIRpWnNH36GtOZGVMAG95Sfx6GfZR/vve6O9OakioBFC1gyIyt7
9rjxa7X7bLIHJqJoRbjbbt7dky/Xsmu0ywu+W0/13fVeO3BpLdS05vce8JZs
PWPMV3ZdIsoUwVH4M9TGSRP28cbszhPqmmGHrkdBrz2O+d1z4n9+ACTlYClQ
KwdLs8xactF3im+zl72awMTHUb77iZ9Oj+Utd57ZwSJ1/oCn/l6QfOcTYdD+
fBJtnvzw99X8n+QXOxrxKx+5SFi/NEub1rXf/yz+XlpQAvZoD2aXrdw/9YJE
IDkB7PD0RR92SH1k40Yv55P3ht8QvtEJcVPP9ePWvO7D9qvrCat8uvJ8OWiv
shM3gFx6BPnfy7uSP0V36J7xWVbhd/ftfxK/XRxiKl4S9tw9f/5uevYlIejC
NVdzVzZ0aN63BVNP02GkOVdH18+f5eEmNffioPIkyR9zN+tK8oE8HZq8r4Bq
87MOUr1UD8bx371b4Ot+9iWBDoL6TL3azXtQ/Kg57CKAQlh3dxeHC/48mDAO
Bt99IP6DMeDu/Y+fgFLjfQ/mmNzn/h+zsj+6\
\>", "ImageResolution" -> \
72.],ExpressionUUID->"750d6c85-6c27-4c8d-b128-4996f1fad18f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ageclusters", " ", "=", " ", 
   RowBox[{"FindClusters", "[", 
    RowBox[{
     RowBox[{"Transpose", "@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"insurance", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
        RowBox[{"insurance", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "7"}], "]"}], "]"}]}], "}"}]}], ",", " ", 
     "3", ",", " ", 
     RowBox[{"Method", "\[Rule]", "\"\<KMeans\>\""}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.815243546619442*^9, 3.815243550442011*^9}, {
  3.815302382689446*^9, 3.815302432561754*^9}, {3.815318009769391*^9, 
  3.815318077571694*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"59c1c5b8-8b42-4572-855c-73c478af6786"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"ageclusters", ",", " ", 
   RowBox[{"PlotLegends", "\[Rule]", "Automatic"}], ",", " ", 
   RowBox[{"PlotMarkers", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Automatic", ",", " ", "Medium"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.815318084106703*^9, 3.8153180886879945`*^9}, {
  3.8153181561376343`*^9, 3.815318195549865*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"8028eb5a-3a8d-4602-aee3-0530fe6361ed"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        GeometricTransformationBox[
         InsetBox[
          BoxData[
           FormBox[
            StyleBox[
             GraphicsBox[{
               EdgeForm[], 
               DiskBox[{0, 0}]}], 
             GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                 PointSize[0.004583333333333334], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[1.6]]}, StripOnInput -> False], 
            TraditionalForm]], {0., 0.}, Automatic, 
          Offset[10]], CompressedData["
1:eJxlWnlcjN3bV7bHvu8k+xo1TTPNTDNdM1OWbD9bWQpF9iJElghlyfaERFFa
RUppVUn2SlEpQohHdo+dh8h7zt19nfPH2z99rs+5z3at3+t7ppfLskmu9evV
qzfNsF49A/Kf/BP/zGFOdXFvlXcx1MkSmHyo116Lb8GibAUXC8JtVzsn1ck+
ADcWrDUy8ioXxwHaW1+rTLVIEGVrmPvvDJ1merz4vQ4qF9Zbttkjm8leRyP6
LGp0TvxeAT3yq62jdNGiLIceM+apZu86Cni+o1eMEz+lHGXjulvzyx3SIkRZ
Aw9+bFycbZHIzt9oc6C+2ZUAtt+Q7R3vPVdlsPn3u21wdkmIZt+Ped1A6jw0
nO33qr/ZX4UTzjJ536WvA7Ndj4iyEoKPkL9f+L0lpOStzulZeILdf931QcpL
U5PZ/qc+lo67dBL314PNrqUv4i6ks/0r725embblFNO3NCJFXpEfx8Zf1Jz8
qBuB+1nAvEKnMbHfcVwLewa+a7HNFddTwOOqZgdOHk5i662LHqqP6of6kYJL
+B3p46xCdj9q/wdWIaJsAzdaX8+c8zWDyVuHj43papzO1msYuV+Zb10iyiq4
9X3yPx6m6D/WEPBug7XnvkxRVsPXB3c3376D/mEBmUua/Kj6GCTKMkiZ/vVc
023RbH7foD9/y6Ynse97L/VaVx0XJupTC3Eah5kGzmnsPIuIe11xE/2N+MM2
yztXTdadZvpzlkw1lVWUMX15W1vMur8rmemD2qdzf7yPOZDhzCbyCFFWQuj7
E9dC7PD8apC2kVmp58eI5xHt2x/9xQKOmkekrMmPYN/Xun5/9jG2lH1/RRe/
yN0I9SOBhURhm2Iw3qRw7+b3yZ8j0N5KmL9jrlPhCvQPc3g7McPINgH1rYcn
69onLLiUzsZfjRr2R7vlCFuv68T73ZZKIpm+V5INHe8eZ99P+Sc65ErqATZu
39Lk7PlvYUyepiAe/g6/Vwrx28WW+x/dv+f2Unbf2+NcWntloT41YNRx8bhN
ujI2/nRap3Rt2xS2/6bF2avaFYjxTex7wbuHpbwhjgP47332ySGH++PDVN8N
ptFZTH97gtzbdppwk31P7dHbOIXp+/DDA9v7RXF7r2+fMDL80Vn2veR5Qr/C
D1x/NP/s06A/qsA3tOjUiwf4vQT62K3fOnx9MDsvzRfNN+J5LSErY0+jqvEx
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
H+VbhL8=
         "]]}, {
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        GeometricTransformationBox[
         InsetBox[
          BoxData[
           FormBox[
            StyleBox[
             GraphicsBox[{
               EdgeForm[], 
               PolygonBox[{{-1, -1}, {1, -1}, {1, 1}, {-1, 1}}]}], 
             GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                 PointSize[0.004583333333333334], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[1.6]]}, StripOnInput -> False], 
            TraditionalForm]], {0., 0.}, Automatic, 
          Offset[10]], CompressedData["
1:eJxVWnlczlkXb0TWQTQ0dqakZGcsWY569rUkUmhkqWnsu6SibNlqsk1jyVjb
ULLT8rRHUUorg+zZx5YY773Xc+6dt3/6nM/vrmf5nu859+nuPW/cTFMTE5PR
DUxMviP/yT/jnxyqZabL1ZZp8E3WwaYOmozc0dVGWQ87Spr69u1VZZQ1sLH4
9h3PmCyjrIIlDaKaxLXL4t9XWhyXDzidydeL31TlO/tm3jc5WAsd0jy7Rbhf
Mcp6OPBxwMOnw68aZTUs8o147vw+h3+3Ov95fYsH+fw8Ez0TUy0DC43fJXB0
RY6tf/A5Pn9dt8bWv1uX8P1tr7TOeROba5QV0P3kQl/zhmVGWQJnvYMqElam
GmUtDCJ/JyKN+wWrwLXRwd8HnrpplKXQdlrGjY7XUF/O4P7IMvzoklvG7zo4
lq0eurHgCp9P71P9Ipuvr0hd1dnZzXg/ExnkLU3ZX9k3xTheAx/MvHaP75vN
73dsSIGDWdx5oywDh/mFG1RfU/h97j3ZkVSyOYt/39l965KDUXh/DbRo0Hv9
zmi0jxxC+mmOxHqkcn1Fbzx5V3kY56vg3AnTR629UNZC2Nb7bxz8jfczUcPk
bYZ3xw7l8PkZM2J/sarL4PvdsjJbbVtTapSd4O2XkuWTHgp77Z7bJqSbHdpL
B+WrF8k2D73N1w+qGLUi2iqLr/855nVxwmDUlwpG6ooies1HfepAqxp79utm
PJ8WWjU/fSRmBOpPAcq9wT1jr6K9ZJCef0A6YSTqWw7Kvl+7r07P4OtHd+h3
S1Jk4Pfv073r23ON0X91YF8S9bDPbuEfrd2HJ+cWoH7V8P7Ftg/Hj1cavyvh
vkXnvAJVBh8v+fS8ttwHxyvgfa/J2/6ag/aUAnWwfkE3+Hmb1kX7nLK6yMfH
HNJB7Xm0rxICJJqN7sobfH7K/g79+lTgdzUk7X15VPZrJr8vue6XMFeU9XD9
1KR3iX3xPgpQ3PW3OJ6cyucPmXpB2cIb41kOVw5Izxx0SDeOl7D7WCWgfrWQ
XX069FUt2kcGhnVHJ/rXX+Jy17ezJ8wZlMLnL4m0bPh+2QWu3x6zl/sXrMN4
1cC+l0eze69Df5PBgCbxnfz+SuP67bq21qXbTaO9SDw+Sxv+k6FDAdeXT+kj
v0hX43mJv/QiDtLBL4/fh8DV3Q61Rv0Se1P/OPIS/UfP/HdFJ2M8E7zIeNdr
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
zL/LlAK/B2Um9pX9p16gfHvikmr4H0CBwYk=
         "]]}, {
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        GeometricTransformationBox[
         InsetBox[
          BoxData[
           FormBox[
            StyleBox[
             GraphicsBox[{
               EdgeForm[], 
               PolygonBox[{{0, 1}, {1, 0}, {0, -1}, {-1, 0}}]}], 
             GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                 PointSize[0.004583333333333334], 
                 RGBColor[0.560181, 0.691569, 0.194885], 
                 AbsoluteThickness[1.6]]}, StripOnInput -> False], 
            TraditionalForm]], {0., 0.}, Automatic, 
          Offset[10]], CompressedData["
1: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
         "]]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {17.041666666666668`, 0}, 
     DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{17.041666666666668`, 64.}, {0, 63770.42801}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{
       TagBox[
        FrameBox[
         StyleBox["1", Smaller, StripOnInput -> False]], "Placeholder"], 
       TagBox[
        FrameBox[
         StyleBox["2", Smaller, StripOnInput -> False]], "Placeholder"], 
       TagBox[
        FrameBox[
         StyleBox["3", Smaller, StripOnInput -> False]], "Placeholder"]}, 
      "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    InsetBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}, {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {10, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    InsetBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    PolygonBox[{{-1, -1}, {1, -1}, {1, 1}, {-1, 1}}]}, {
                    DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {10, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    InsetBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    PolygonBox[{{0, 1}, {1, 0}, {0, -1}, {-1, 0}}]}, {
                    DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {10, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.560181`", ",", "0.691569`", ",", "0.194885`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm], ",", 
               TagBox[#3, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}], ",", 
                    RowBox[{"Offset", "[", "10", "]"}]}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{
                    GraphicsBox[{
                    EdgeForm[], 
                    PolygonBox[{{-1, -1}, {1, -1}, {1, 1}, {-1, 1}}]}], ",", 
                    RowBox[{"Offset", "[", "10", "]"}]}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{
                    GraphicsBox[{
                    EdgeForm[], 
                    PolygonBox[{{0, 1}, {1, 0}, {0, -1}, {-1, 0}}]}], ",", 
                    RowBox[{"Offset", "[", "10", "]"}]}], "}"}]}], "}"}]}], 
           ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.815318089088872*^9, 3.815318162164034*^9, 
  3.8153181970892944`*^9, 3.815319274302668*^9, 3.8153218358624797`*^9, 
  3.8153219835283813`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"f275fa91-65dd-4da9-8ced-78f378ae978f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 8", "Subsection",
 CellChangeTimes->{{3.7802064548694954`*^9, 3.78020645674401*^9}, {
  3.8144381343201694`*^9, 
  3.814438135070163*^9}},ExpressionUUID->"e7ef346f-7ac1-4080-bfa2-\
9791fbb1531a"],

Cell["How is the cost related to bmi? Discuss the result.", "Text",
 CellChangeTimes->{{3.777473994743878*^9, 3.777474022520184*^9}, {
  3.780206459598501*^9, 
  3.780206469054087*^9}},ExpressionUUID->"8533efc1-f18d-470d-9311-\
abf2b337ae00"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bmiclusters", " ", "=", " ", 
   RowBox[{"FindClusters", "[", 
    RowBox[{
     RowBox[{"Transpose", "@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"insurance", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "3"}], "]"}], "]"}], ",", " ", 
        RowBox[{"insurance", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "7"}], "]"}], "]"}]}], "}"}]}], ",", " ", 
     "2", ",", " ", 
     RowBox[{"Method", "\[Rule]", "\"\<KMeans\>\""}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8153182879554543`*^9, 3.8153183009357777`*^9}, {
  3.8153183314629955`*^9, 3.815318331652931*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"0879398f-8770-4689-9d76-d9ee454bdc44"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"bmiclusters", ",", " ", 
   RowBox[{"PlotLegends", "\[Rule]", "Automatic"}], ",", " ", 
   RowBox[{"PlotMarkers", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Automatic", ",", " ", "Medium"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8153183166191635`*^9, 3.8153183177903194`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"49fe20f8-f207-4a01-945d-0ef965717f32"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        GeometricTransformationBox[
         InsetBox[
          BoxData[
           FormBox[
            StyleBox[
             GraphicsBox[{
               EdgeForm[], 
               DiskBox[{0, 0}]}], 
             GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                 PointSize[0.004583333333333334], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[1.6]]}, StripOnInput -> False], 
            TraditionalForm]], {0., 0.}, Automatic, 
          Offset[10]], CompressedData["
1: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
fzUqq/VyDT8vSxi+7lurTtMi+fNE9PMV4ZyvdzcHw9LVcw79TOT4REr1s+fl
19h+txlT/j3TyYPZW2IGheKxJdH/8PpkbEzrXalYp2+JKF40qIpm9nGXUTxQ
GM7tXSIDh94b6yYpU5AvE31j601ufw8LGh+tB5Uy/zmjAIGePe7VvwD5wJj2
xxzzxgYh3iA/H7A/A/dbFHq9YlX3TOafCjF9XpuLicyfB9jA9vaduqVc5Pyn
eBgI4bbwRdoVjBfnSRP6DptVyvMdQOIaQ6NU1xu4/6LDpXeXDNDhb2uoKwRw
4vh4jHcKW6/lID8T4E+L8+6RXE8AeHsgd9KLofkcf9qCcDwvznv7Id8j9qvq
w79v7nAav3YXOJ9ab0PxfZB/MLPHFME/JmVcsdsbxfUNe3gvu77o7Cc3Zm+l
NQxL7tvKaXc17oeUz/aC/XX1jPD53XdyOH5l+bTuHA0/DxtYSQTWDvEcXylg
XuupVpM8o/B9Uk/tpqaifjAqp5HNdhfOHxeJ4LuQfjZoLqF+QfRxw+CL/HyG
U31x/ljOx3tJKZ76aaZl/rlLSvXT+YZa5P/k+2JisjCfkH2G1U1DPXp0cFOH
VAf+vp6U8p+6vhXs+c2ZPtg/vRD1WgJvY4uyUY8gcdfbxYPtx1kCf3r++ryz
dRnP3xKqD00tz+X9AwCRAJgjlTmIlwmfFKfd4PnWkuoxxiZ+LP6dAO6ntfRq
uzcA86UkdcK5dxZ+qGewsn4R66Peo05mUfPLOX+zonjePbcK8xv5eW4B16NW
yEEoJ0Wib+dZPA8H2v8w2sP5RIgd/f4LzkWI7w5/vFU5bZAa8x/BVxlTPbhe
p6D7bTxaV39kVI/YF65m9m5tC7N+K743+BHJ/H2LOeVzV2floL0oPznvjnjm
5tXvM3+tyuL+zPilwcSLLN7bWcHtIWaV9m8r8fUbS/vh7/v58e+zp/iz4Und
91tRvHPwQAnHg2LYZhEm7ZhyCfMdjRdFNK6H2OfLjHTU00m9PNZEh38U1G6r
xuXxfGgNTVx7zJ8dm4T47cyhA9MPRVXw50kg+3fU9nmT45G/OwgA4/axJLQn
4f9HggNR/xTY3ZNhTa8gvtwqEMCVOZdxfdSuQvzp9Aqi17t802C/4fUlyaDy
/QGoHw4UAHPICDXmr/qTWw428XNHvZT4oes57j/VMup3c401GF/mgoGTV6l4
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
6yelbXN84H/YrcRy
         "]]}, {
        Directive[
         PointSize[0.004583333333333334], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        GeometricTransformationBox[
         InsetBox[
          BoxData[
           FormBox[
            StyleBox[
             GraphicsBox[{
               EdgeForm[], 
               PolygonBox[{{-1, -1}, {1, -1}, {1, 1}, {-1, 1}}]}], 
             GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                 PointSize[0.004583333333333334], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[1.6]]}, StripOnInput -> False], 
            TraditionalForm]], {0., 0.}, Automatic, 
          Offset[10]], CompressedData["
1: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

         "]]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {15.185625000000002`, 0}, 
     DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{15.185625000000002`, 53.13}, {0, 63770.42801}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{
       TagBox[
        FrameBox[
         StyleBox["1", Smaller, StripOnInput -> False]], "Placeholder"], 
       TagBox[
        FrameBox[
         StyleBox["2", Smaller, StripOnInput -> False]], "Placeholder"]}, 
      "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    InsetBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}, {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {10, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    InsetBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    PolygonBox[{{-1, -1}, {1, -1}, {1, 1}, {-1, 1}}]}, {
                    DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {10, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.004583333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}], ",", 
                    RowBox[{"Offset", "[", "10", "]"}]}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{
                    GraphicsBox[{
                    EdgeForm[], 
                    PolygonBox[{{-1, -1}, {1, -1}, {1, 1}, {-1, 1}}]}], ",", 
                    RowBox[{"Offset", "[", "10", "]"}]}], "}"}]}], "}"}]}], 
           ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.8153183182241735`*^9, 3.8153183351236296`*^9}, 
   3.815319274502657*^9, 3.8153218360922785`*^9, 3.815321983715319*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"84c255f2-0b27-49ff-b741-5b490dc7e5b7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 9", "Subsection",
 CellChangeTimes->{{3.7802065288291583`*^9, 3.7802065298449545`*^9}, {
  3.8144381369720783`*^9, 
  3.814438137845742*^9}},ExpressionUUID->"9a47401d-c4d7-466a-bd31-\
3c4f0209df33"],

Cell["How is the cost related to the number of children?", "Text",
 CellChangeTimes->{{3.7774741656717157`*^9, 3.777474186679901*^9}, {
  3.780206548027804*^9, 
  3.7802065648553324`*^9}},ExpressionUUID->"3a216445-a1f1-4b61-9c6e-\
2720e459a30d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"childrenclusters", " ", "=", " ", 
   RowBox[{"FindClusters", "[", 
    RowBox[{
     RowBox[{"Transpose", "@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"insurance", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "4"}], "]"}], "]"}], ",", " ", 
        RowBox[{"insurance", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "7"}], "]"}], "]"}]}], "}"}]}], ",", " ", 
     "1", ",", " ", 
     RowBox[{"Method", "\[Rule]", "\"\<KMeans\>\""}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.815318395417924*^9, 3.815318409957012*^9}, {
  3.8153184422586784`*^9, 3.815318442505155*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"368a5ee3-ce2c-43ae-a65d-426114d7663b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"childrenclusters", ",", " ", 
   RowBox[{"PlotLegends", "\[Rule]", "Automatic"}], ",", " ", 
   RowBox[{"PlotMarkers", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Automatic", ",", " ", "Medium"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.815318419082056*^9, 3.8153184261089153`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"588e4981-1c9e-45a3-8c23-21325b6731b7"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
    AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
      FormBox[
       StyleBox[
        GraphicsBox[
         {EdgeForm[None], DiskBox[{0, 0}]}],
        StripOnInput->False,
        GraphicsBoxOptions->{DefaultBaseStyle->Directive[
          PointSize[0.004583333333333334], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]]}],
       TraditionalForm], {0., 0.}, Automatic, Offset[10]], CompressedData["
1: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
     "]]}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 5.}, {0, 63770.42801}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.81531842119296*^9, 3.815318446419749*^9}, 
   3.815319274745*^9, 3.8153218362832184`*^9, 3.8153219838802624`*^9},
 CellLabel->"Out[26]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzNPWlzXFV2jbolW5nvqaQogjNTqcoPmIGZCWSWbB9S+Qnqllq2vGAbMB7M
YkDdWixZAuN9Q2AbDLZBHgzWZkmWZcn7Iu873jA2MR5gAmRSM5VRzrvn3nuW
915Lxu2quETT79377j337Ofcc1//R9XcaVNmVc2dXl016d/mVD01bXr1M5P+
9ck5cCv5QCLxwLREInH+rxLwfRS+mf+Cf9PhP/wa/60q+EyOjt7qzLWNwNef
m+uRthr8lygJPpK5zltmxNHEz4KPlG+vaRt5HEcYacNOOAL1gLsTCsxkrmGU
0YQZp8yPM2pa4PtjavyfRfWDAcoiZ3nMrye4HE38wlzjyMHXn7rrmPX+g5q9
NHIWjwM7C81qEIBrhUddBzMc3g1WYoGTK8nYZ251do7QTP/o4MUn7Ex+ZIt9
izozDc2dy+Uc0RJIk0rsbYkVDEAwWZDs19B9+83jh6806Wg3migX+BJQliHt
iU/saMQ70PdxRS9cDfGfeS6BGPuR6Qv3LO2Cj3+6Dy1/a6BP13Zkch3QDp/w
feT87aDHr02Ph4Kv0PTv8N8D5s7DBu6K2o50zv4ZboP/l8DDE9Vc5er6L8a4
NtRMVtd3sXETyckN3aI9/vm7ne//W//7PV8po2EmH6ZhIllhrqNw/ZdjjG14
N1VZ15lxQ+KIcFmV7xoP9fQMhptKv/jqv/sPXYO7+05+9t0f/jgmHPfafrc4
HWu8QjhPwf8fMS09+y6n86wlaXAHt27d+S7oYHpN6N53OVvfiV3g84mW3rNX
7ljdTjM+rq4fi4UoZWbBwYKvJQ6e5NQFPWmjDxLYJ20k/rllgwhJ8vjF2/YZ
bJ/a1PP1N/8TNO1i603HrRe+dNqWfEdJxgyDfWs7Jtd34xxPLupjcEEPp3W2
9J1F/Xzzi2/++Kf/Db7WizUlLfcF45TjGuu77Op/7NZd6scDpp/Z2os2tKzl
7YNwK2Mgq27oOn/td3USX6UeX0G/fIfFSIW7BSo1mLEqx2cMtCPez+Q77f2f
mOeeeq1fYBImtO21nHNyEpNJRxU2RyJFernWYdXdySI2LCYdXTKB3jZyr0bq
O3DVj4RwZes6Q3AFq3JURqxkBBf52T1OxCxJHJ/WjiMRbma39gncUPujhlag
G15aPTS5sbuqrmvu0oFjF26jXQU9AYIB0gKfwCBcBif4OWGwAOa84fJ4mLN5
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\
\>", "ImageResolution" -> \
72.],ExpressionUUID->"e8cbcf66-e0d6-4855-a2d3-3aa5843cec0d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 10", "Subsection",
 CellChangeTimes->{{3.7802066323437138`*^9, 3.7802066339209337`*^9}, {
  3.8144381397506466`*^9, 
  3.8144381408148017`*^9}},ExpressionUUID->"510ac69e-4a12-4f05-bba1-\
6011218b56cd"],

Cell["\<\
Show that the mean charge for smokers is 32050.2 whereas it is 8434.3 for \
non-smokers\
\>", "Text",
 CellChangeTimes->{{3.7802066392481885`*^9, 3.7802066468681073`*^9}, {
  3.7802066839124975`*^9, 
  3.780206715971659*^9}},ExpressionUUID->"6cfd0c99-afb3-4dc2-ac4b-\
22672e8a2813"],

Cell[BoxData[
 RowBox[{
  RowBox[{"describe", "[", "list_List", "]"}], " ", ":=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<Count\>\"", ",", " ", 
      RowBox[{"Length", "[", "list", "]"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Mean\>\"", ",", " ", 
      RowBox[{"Mean", "[", "list", "]"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Standard Deviation\>\"", ",", " ", 
      RowBox[{"StandardDeviation", "[", "list", "]"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Minimum\>\"", ",", " ", 
      RowBox[{"Min", "[", "list", "]"}], ",", " ", "\"\<25%\>\"", ",", " ", 
      RowBox[{"Quantile", "[", 
       RowBox[{"list", ",", " ", "0.25"}], "]"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<50%\>\"", ",", " ", 
      RowBox[{"Quantile", "[", 
       RowBox[{"list", ",", " ", "0.5"}], "]"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<75%\>\"", ",", " ", 
      RowBox[{"Quantile", "[", 
       RowBox[{"list", ",", " ", "0.75"}], "]"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Maximum\>\"", ",", " ", 
      RowBox[{"Max", "[", "list", "]"}]}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.815302796712879*^9, 3.815302832257585*^9}, 
   3.815302937574242*^9, {3.8153185333141165`*^9, 3.815318726676076*^9}, {
   3.8153190080701885`*^9, 3.815319014939601*^9}, {3.8153191205340567`*^9, 
   3.815319133798377*^9}, {3.8153194211982393`*^9, 3.815319472126176*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"335ff1ba-daa8-46d5-a5a0-848dc45c0745"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "[", 
  RowBox[{
   RowBox[{"GroupBy", "[", "\"\<smoker\>\"", "]"}], ",", " ", "describe", ",",
    " ", "\"\<charges\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.815318862043228*^9, 3.815318907448345*^9}, {
  3.8153189902385054`*^9, 3.815318995992014*^9}, {3.8153193613935595`*^9, 
  3.815319373806717*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"a9d307ee-483f-4c1e-87a9-b678f9c55bea"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> 
     Association[
      "yes" -> {{"Count", 274}, {"Mean", 32050.231831532856`}, {
         "Standard Deviation", 11541.547175589121`}, {
         "Minimum", 12829.4551, "25%", 20773.62775}, {"50%", 34439.8559}, {
         "75%", 41034.2214}, {"Maximum", 63770.42801}}, 
       "no" -> {{"Count", 1064}, {"Mean", 8434.268297856202}, {
         "Standard Deviation", 5993.781819194933}, {
         "Minimum", 1121.8739, "25%", 3981.9768}, {"50%", 7345.084}, {
         "75%", 11362.755}, {"Maximum", 36910.60803}}], "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[27.], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`UnknownShape[False]], 7, 
          DirectedInfinity[1], {All}]]], 2, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration["no", "yes"]], 
       TypeSystem`Vector[
        TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 7], 2], 
     "Meta" -> Association["ID" -> 32792293103744], "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[27.], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`UnknownShape[False]], 7, 
          DirectedInfinity[1], {All}]]], 2, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration["no", "yes"]], 
       TypeSystem`Vector[
        TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 7], 2], 
     "Path" -> {}, "BaseIndices" -> {}, "DisplayedRowCount" -> 2, 
     "DisplayedColumnCount" -> 1, "DataRowCount" -> 2, "DataColumnCount" -> 1,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1], TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["yes", 
                  Style[
                  "yes", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["yes"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["yes"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Count", 274}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Count", 274}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["yes"], 1}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["yes"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Mean", 32050.231831532856`}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"Mean", 32050.231831532856`}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["yes"], 2}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["yes"], 2}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Standard Deviation", 11541.547175589121`}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Standard Deviation", 11541.547175589121`}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["yes"], 3}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["yes"], 3}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Minimum", 12829.4551, "25%", 20773.62775}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Minimum", 12829.4551, "25%", 20773.62775}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["yes"], 4}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["yes"], 4}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"50%", 34439.8559}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"50%", 34439.8559}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["yes"], 5}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["yes"], 5}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"75%", 41034.2214}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"75%", 41034.2214}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["yes"], 6}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["yes"], 6}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Maximum", 63770.42801}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"Maximum", 63770.42801}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["yes"], 7}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["yes"], 7}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["no", 
                  Style[
                  "no", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["no"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["no"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Count", 1064}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Count", 1064}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["no"], 1}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["no"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Mean", 8434.268297856202}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"Mean", 8434.268297856202}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["no"], 2}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["no"], 2}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Standard Deviation", 5993.781819194933}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Standard Deviation", 5993.781819194933}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["no"], 3}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["no"], 3}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Minimum", 1121.8739, "25%", 3981.9768}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Minimum", 1121.8739, "25%", 3981.9768}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["no"], 4}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["no"], 4}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"50%", 7345.084}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"50%", 7345.084}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["no"], 5}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["no"], 5}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"75%", 11362.755}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"75%", 11362.755}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["no"], 6}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["no"], 6}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Maximum", 36910.60803}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"Maximum", 36910.60803}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["no"], 7}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["no"], 7}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{282., {183., 189.}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{282., {183., 189.}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.815318870335783*^9, 3.8153189081447425`*^9, {3.8153189909892683`*^9, 
   3.815319020546791*^9}, {3.815319053088685*^9, 3.8153190812253675`*^9}, 
   3.81531912795113*^9, 3.8153192749342003`*^9, {3.815319365697389*^9, 
   3.815319374662998*^9}, {3.8153194522229047`*^9, 3.81531947518388*^9}, 
   3.8153218363761873`*^9, 3.8153219839512377`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"d457de03-5007-4fab-bb49-41ddb6ee4bae"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 11", "Subsection",
 CellChangeTimes->{{3.780206788852075*^9, 3.7802067962293234`*^9}, {
  3.8144381428864365`*^9, 
  3.814438143810007*^9}},ExpressionUUID->"6d7208b0-233b-48b4-822d-\
ed29c87541cb"],

Cell[TextData[{
 "Define a training dataset (named ",
 StyleBox["trainingdata", "CodeText"],
 ") as a random sample of 1/3 of the elements in the original data. Define a \
test dataset (named ",
 StyleBox["testdata", "CodeText"],
 ") corresponding to the complement of the training dataset."
}], "Text",
 CellChangeTimes->{{3.777534652391755*^9, 3.777534774086442*^9}, {
  3.780206818531482*^9, 
  3.780206860748361*^9}},ExpressionUUID->"549aaf24-8f8c-4e63-9c97-\
20118bd1c066"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Alpha]", " ", "=", " ", 
  RowBox[{"Length", "[", "data", "]"}]}]], "Input",
 CellChangeTimes->{{3.815319587239538*^9, 3.815319590215356*^9}, {
  3.815319624285201*^9, 3.8153196372145834`*^9}, {3.8153196928924413`*^9, 
  3.81531970282143*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"78a496f0-c817-4261-8171-c3373e794a95"],

Cell[BoxData["1338"], "Output",
 CellChangeTimes->{3.815319703128326*^9, 3.8153218365421314`*^9, 
  3.8153219841051865`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"192573b3-e929-428d-80dc-8438811b070c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainDim", " ", "=", " ", 
  RowBox[{"Floor", "[", 
   RowBox[{"\[Alpha]", "/", "3"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.815319747114813*^9, 3.8153197807540655`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"434a9cfd-7e66-4861-bbf8-4de536e1947e"],

Cell[BoxData["446"], "Output",
 CellChangeTimes->{{3.8153197605669875`*^9, 3.815319781262907*^9}, 
   3.815321836591114*^9, 3.815321984116183*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"b956678e-7c9c-45db-b834-1df83ebd6368"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"datatrain", ",", " ", "datatest"}], "}"}], " ", "=", " ", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"RandomSample", "@", 
       RowBox[{"Values", "@", "data"}]}], " ", "//", " ", "Normal"}], ",", 
     " ", "trainDim"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.815319878082971*^9, 3.815319923684212*^9}, {
  3.8153199573121243`*^9, 3.815320038722662*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"c85c0782-b6d9-464f-9875-49d44ecad1e1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "datatrain", "]"}]], "Input",
 CellChangeTimes->{{3.815320035014208*^9, 3.815320045058588*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"311a96ea-866f-43b5-ab74-165abc20bd0d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"446", ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{3.815320045847638*^9, 3.8153218366490946`*^9, 
  3.81532198415617*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"32600eba-e138-4f8d-ba01-9f050432c180"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "datatest", "]"}]], "Input",
 CellChangeTimes->{{3.8153200624140205`*^9, 3.8153200743756657`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"128b1a64-410a-4f19-859a-d0f161ea8fe0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"892", ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{{3.8153200681612935`*^9, 3.8153200750539956`*^9}, 
   3.815321836699078*^9, 3.8153219841961575`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"d858798c-917b-4ab9-8eec-7de6f007eb97"]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{3.8153207528302555`*^9},
 CellLabel->"In[34]:=",ExpressionUUID->"61b0f7fc-668a-4f2c-90f8-beedfc84a39e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"training", " ", "=", " ", 
   RowBox[{"datatrain", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"1", ";;", " ", "6"}]}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.81532031135588*^9, 3.815320355242695*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"49d37b57-133a-4a53-a7c3-22801497cbda"],

Cell[BoxData[
 RowBox[{
  RowBox[{"traininganswer", " ", "=", " ", 
   RowBox[{"datatrain", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "7"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8153203688958416`*^9, 3.8153203839244556`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"cb805e05-7dfe-4507-9398-b07bc91c74df"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testing", " ", "=", " ", 
   RowBox[{"datatest", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"1", ";;", " ", "6"}]}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8153204033238153`*^9, 3.815320413527956*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"774a5ed7-c108-486c-861d-e0447410edd6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testinganswer", " ", "=", " ", 
   RowBox[{"datatest", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "7"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.81532040782414*^9, 3.815320417169963*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"b8c31695-2fe0-4b81-8e6d-f72b1abc1df0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingdata", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"training", "[", 
       RowBox[{"[", "i", "]"}], "]"}], " ", "\[Rule]", " ", 
      RowBox[{"traininganswer", "[", 
       RowBox[{"[", "i", "]"}], "]"}]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", 
       RowBox[{"Length", "[", "training", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.815320486683495*^9, 3.8153205324894977`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"2df53c8d-0efa-43ea-a728-848ae46c62df"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testingdata", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"testing", "[", 
       RowBox[{"[", "i", "]"}], "]"}], " ", "\[Rule]", " ", 
      RowBox[{"testinganswer", "[", 
       RowBox[{"[", "i", "]"}], "]"}]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", 
       RowBox[{"Length", "[", "testing", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8153205347825603`*^9, 3.815320561290229*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"bd059ce1-73ba-44a5-817f-3ab30af2dd30"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 12", "Subsection",
 CellChangeTimes->{{3.7802068977184687`*^9, 3.78020690467898*^9}, {
  3.8144381461876106`*^9, 
  3.8144381468009667`*^9}},ExpressionUUID->"a5f98e15-310d-4f63-b76d-\
2e9c26d47716"],

Cell["Use the training dataset to train a predictor ", "Text",
 CellChangeTimes->{{3.777534813382372*^9, 3.777534825254825*^9}, {
   3.7775431391994*^9, 3.777543193465055*^9}, {3.780206914435777*^9, 
   3.7802069237014055`*^9}, 
   3.8141005290268917`*^9},ExpressionUUID->"7cf8fb76-7a09-4980-b202-\
728333338b6d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"insurancepredictor", " ", "=", " ", 
  RowBox[{"Predict", "[", 
   RowBox[{"trainingdata", ",", " ", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8153207960862484`*^9, 3.8153208146304646`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"d9702bf9-7a27-41ad-a61b-6256299c1b47"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Nominal\"", ",", "\"Numerical\"",
                     ",", "\"Numerical\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Nominal", "Numerical", "Numerical", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["446", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 446, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Nominal"], "f3" -> 
           Association["Type" -> "Numerical"], "f4" -> 
           Association["Type" -> "Numerical"], "f5" -> 
           Association["Type" -> "Nominal"], "f6" -> 
           Association["Type" -> "Nominal"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 6]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Nominal", "Numerical", "Numerical", "Nominal", 
                  "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> False,
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Nominal", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f3f4)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 3], 
           "(f2f5f6)" -> 
           Association["Type" -> "NominalVector", "Weight" -> 3]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Nominal", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f3f4)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 3], 
               "(f2f5f6)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 3]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f3f4)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 3]], 
                 "Version" -> {12.1, 1}, "ID" -> 6665390927393525173]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "f2" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "(f2f5f6)" -> 
                   Association["Type" -> "NominalVector", "Weight" -> 3]], 
                 "Version" -> {12.1, 1}, "ID" -> 8299490119381043207]]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "(f1f3f4)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 3], 
               "(f2f5f6)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 3]], 
             "Output" -> 
             Association[
              "(f1f3f4)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 3], 
               "(f2f5f6)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 3]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f1f3f4)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 3]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 446, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {39.09865470852018, 30.31580717488789, 
                    1.0695067264573992`}, "Method" -> "Naive", "VectorLength" -> 
                    3, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {39.09865470852018, 30.31580717488789, 
                    1.0695067264573992`}, 
                    "StandardDeviation" -> {14.48779130319385, 
                    6.072527963964648, 1.208012572581632}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 3]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 3]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                    Association[
                    "Matrix" -> {{0.6891620607724147, 0.263971115478849, 
                    0.6748147184114843}, {
                    0.7132286098481526, -0.08272486481563138, \
-0.6960327196585713}, {-0.12790857706186157`, 
                    0.9609765069626247, -0.2452825900465056}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {39.09865470852018, 30.31580717488789, 
                    1.0695067264573992`}, 
                    "StandardDeviation" -> {14.48779130319385, 
                    6.072527963964648, 1.208012572581632}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 3, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0093254, "MaxTrainingMemory" -> 
                    119520, "DataMemory" -> 11376, "FunctionMemory" -> 22328, 
                    "LanguageVersion" -> {12.1, 1}, "Date" -> 
                    DateObject[{
                    2020, 11, 25, 19, 39, 44.3700966`9.399665243386982}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 3, "Output" -> 
                 Association[
                  "(f1f3f4)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 3]], 
                 "Type" -> "NumericalVector", "Version" -> {12.1, 1}, "ID" -> 
                 5772811868333326886]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "StructurePreserving" -> True, "Input" -> 
                 Association[
                  "(f2f5f6)" -> 
                   Association["Type" -> "NominalVector", "Weight" -> 3]], 
                 "VectorLength" -> 3, "Output" -> 
                 Association[
                  "(f2f5f6)" -> 
                   Association["Type" -> "NominalVector", "Weight" -> 3]], 
                 "Type" -> "NominalVector", "Version" -> {12.1, 1}, "ID" -> 
                 5894247373463295989]]}, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f3f4)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 3]], 
             "Mean" -> {39.09865470852018, 30.31580717488789, 
              1.0695067264573992`}, 
             "StandardDeviation" -> {14.48779130319385, 6.072527963964648, 
              1.208012572581632}, "Output" -> 
             Association[
              "(f1f3f4)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 3]], 
             "Version" -> {12.1, 1}, "ID" -> 8404960534059901568]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f2f5f6)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 3]], 
             "Index" -> {
               Association["female" -> 1, "male" -> 2], 
               Association["no" -> 1, "yes" -> 2], 
               Association[
               "northeast" -> 1, "northwest" -> 2, "southeast" -> 3, 
                "southwest" -> 4]}, "MissingCode" -> 0, 
             "Version" -> {12.1, 1}, "ID" -> 5366059775514875614, "Output" -> 
             Association[
              "(f2f5f6)" -> 
               Association["Type" -> "NominalVector", "Weight" -> 3]]]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 1}, "ID" -> 3452868332436575388]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {12944.402552062782`}, 
             "StandardDeviation" -> {11769.36162488307}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {12.1, 1}, "ID" -> 3166526630455491285]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {12.1, 1}, "ID" -> 3415339320084619631]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (12944.402552062782` + 
       11769.36162488307 #& ), 
      "ProcessorFunction" -> (-1.0998389687249828` + 
       0.00008496637556668969 #& ), "Name" -> "value", 
      "Quantiles" -> {-1.0036989539931946`, 3.999961758198159}], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 1, 1, 1, 3, 1, 1, 4, 7, 7, 10, 8, 8, 1, 
            8, 8, 2, 7, 1, 5, 1}], 
          "NumericalThresholds" -> {
           9.999999682655224*^-21, -0.01803874969482422, 0.26489558815956116`,
            1.0303997993469238`, 
           0.2721875458955765, -0.05069320276379585, -0.04177169036120176, \
-1.1171952486038208`, -0.013168849982321262`, 0.8957435786724091, 
           0.8957435190677643, -0.024029985070228577`, -0.24784784018993378`, \
-0.22396079450845718`, -0.42877623438835144`, -0.32355694472789764`, \
-0.22395991533994675`, -0.03172740899026394, 0.8957429826259613, 
           0.6182591021060944, -0.16732413321733475`, -1.3870283961296082`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.07987561076879501, -0.19267401099205017`, 
            0.43760770559310913`, -0.004681249614804983, 0.03323006629943848, 
            0.5648544430732727, -0.06896790862083435, 
            0.18949593603610992`, -0.16458465158939362`, -0.03191787004470825,
             0.07048641890287399, -0.09081874787807465, -0.09792917966842651, \
-0.07698044925928116, -0.019389310851693153`, -0.11698075383901596`, \
-0.13785013556480408`, -0.014179123565554619`, -0.06047910451889038, 
            0.00300682638771832, -0.05680033192038536, -0.18656504154205322`, \
-0.18101784586906433`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {7, 5}, {6, 4}, {13, 10}, {-3, -6}, {
            8, 9}, {-1, -8}, {21, 11}, {12, -10}, {14, -11}, {15, -12}, {-7, 
            16}, {-4, 17}, {-5, 19}, {-9, -16}, {-13, -17}, {20, 
            18}, {-18, -19}, {-15, -20}, {-14, -21}, {-2, 22}, {-22, -23}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 1, 1, 1, 3, 1, 1, 4, 7, 6, 6, 7, 10, 7, 
            1, 1, 1, 1, 5, 1}], 
          "NumericalThresholds" -> {
           9.999999682655224*^-21, -0.01803874969482422, 0.26489558815956116`,
            1.0303997993469238`, 
           0.2673739790916443, -0.05069320276379585, -0.21024060994386673`, \
-1.1171952486038208`, -0.013168849982321262`, 0.8957435786724091, 
           0.5072334706783295, 0.5072328150272369, 
           0.8957435190677643, -0.024029985070228577`, 
           0.8957426846027374, -0.5563377439975739, -0.8333925902843475, 
           0.7507074773311615, 
           1.443563461303711, -0.16732413321733475`, -1.3870283961296082`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.06149821728467941, -0.15412944555282593`, 
            0.34767311811447144`, -0.04340769350528717, 0.03513683006167412, 
            0.44971081614494324`, -0.05516457185149193, 
            0.15003234148025513`, -0.1355225294828415, -0.02552453987300396, 
            0.05639888718724251, -0.06099243462085724, 
            0.003959041554480791, -0.07264523953199387, -0.1177634671330452, \
-0.009174245409667492, -0.09666949510574341, -0.08451435714960098, \
-0.04436897486448288, 
            0.006727423518896103, -0.14924228191375732`, \
-0.14480452239513397`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {7, 5}, {6, 4}, {11, 10}, {-3, -6}, {
            8, 9}, {-1, -8}, {20, 13}, {14, -10}, {15, -11}, {12, 
            18}, {-4, -13}, {16, -14}, {-7, 17}, {-5, 
            19}, {-9, -17}, {-15, -18}, {-12, -19}, {-16, -20}, {-2, 
            21}, {-21, -22}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 1, 1, 1, 4, 1, 1, 6, 1, 1, 9, 8, 5, 8, 
            3, 10, 1, 10}], 
          "NumericalThresholds" -> {
           9.999999682655224*^-21, -0.01803874969482422, 0.26489558815956116`,
            1.0303997993469238`, 0.2721875458955765, -0.013168541248887777`, 
           0.27016764879226685`, -1.1171952486038208`, 
           0.5072334706783295, -0.9713696539402008, -0.4164053201675415, \
-0.31710507720708847`, -0.24784784018993378`, -0.2558038979768753, \
-0.22395985573530197`, -0.048535723239183426`, 0.731764942407608, 
           0.6182591021060944, 0.9275423586368561}, "LeafValues" -> 
          RawArray["Real32",{0.05755676329135895, -0.07948650419712067, 
            0.2797450125217438, 0.0019069453701376915`, 0.02637745440006256, 
            0.36195117235183716`, -0.018180204555392265`, 
            0.13691943883895874`, -0.039942387491464615`, 
            0.041705172508955, -0.0982637107372284, -0.06688661873340607, \
-0.1245068907737732, -0.05464407056570053, -0.019360661506652832`, \
-0.0026915716007351875`, -0.043973833322525024`, 
            0.0008206742350012064, -0.03859084099531174, \
-0.11351195722818375`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {7, 5}, {6, 4}, {13, 9}, {-3, -6}, {
            8, -7}, {-1, -8}, {12, 10}, {14, -10}, {-9, 11}, {-11, -12}, {-2, 
            19}, {-4, 15}, {-5, 17}, {18, 
            16}, {-16, -17}, {-15, -18}, {-14, -19}, {-13, -20}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 1, 3, 1, 1, 1, 5, 1, 1, 3, 6, 2, 6, 7, 
            6, 1, 8, 1, 1, 5, 4}], 
          "NumericalThresholds" -> {
           9.999999682655224*^-21, -0.01803874969482422, 
           0.26489558815956116`, -0.05069320276379585, -0.07084536552429199, 
           1.0303997993469238`, 
           0.23577813804149628`, -0.2558036595582962, -0.7315489649772644, \
-1.1171952486038208`, -0.8780049085617065, 0.5072334110736847, 
           0.5411784052848816, 0.5072334706783295, 0.895742803812027, 
           0.5072329938411713, -0.4865659177303314, -0.22396039962768555`, \
-0.699399471282959, 
           0.7461511492729187, -0.25580330193042755`, -0.0131692448630929}, 
          "LeafValues" -> 
          RawArray["Real32",{0.044741686433553696`, -0.10144240409135818`, 
            0.2187511920928955, 0.021560896188020706`, -0.08173293620347977, 
            0.2856377959251404, -0.01926327683031559, 0.10784893482923508`, 
            0.01580326072871685, -0.06672263890504837, -0.04247099906206131, 
            0.010254159569740295`, 0.06043555215001106, 
            0.02274627424776554, -0.042137984186410904`, \
-0.03876863792538643, -0.09589771181344986, -0.05195484310388565, \
-0.006122948601841927, -0.06163106486201286, -0.03235655277967453, \
-0.09296468645334244, -0.09791195392608643}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {7, 5}, {4, 6}, {10, 8}, {-3, -6}, {
            14, 11}, {-1, -8}, {19, 9}, {-9, -10}, {21, 16}, {13, 
            12}, {-12, -13}, {-7, -14}, {15, 20}, {-4, 18}, {-11, 
            17}, {-17, -18}, {-16, -19}, {-5, -20}, {-15, -21}, {-2, 
            22}, {-22, -23}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 1, 2, 4, 1, 1, 1, 1, 6, 1, 9, 7, 9, 3, 
            1, 9, 4, 3}], 
          "NumericalThresholds" -> {
           9.999999682655224*^-21, -0.07255399599671364, 0.2067645713686943, 
           0.5728307664394379, -0.013168614357709885`, 1.3750149607658386`, 
           1.5729206800460815`, -0.5607797801494598, -1.1171952486038208`, 
           0.5072326958179474, 0.2721875458955765, -0.22569946199655533`, 
           0.8957426249980927, -0.4085095077753067, -0.876563549041748, \
-0.4164053201675415, -0.31710507720708847`, -0.6856109201908112, \
-0.061055079102516174`}, "LeafValues" -> 
          RawArray["Real32",{0.018741855397820473`, -0.04840491712093353, 
            0.15110614895820618`, 0.007795355748385191, 
            0.19722695648670197`, -0.012853390537202358`, 
            0.05874458700418472, -0.0026652533560991287`, 
            0.07021795213222504, -0.01561401505023241, -0.06699663400650024, 
            0.24747775495052338`, 0.03676944226026535, 
            0.012909968383610249`, -0.04415615275502205, \
-0.02735402248799801, -0.040928807109594345`, -0.0782836377620697, \
-0.026659328490495682`, -0.08687148988246918}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {8, 4}, {5, 6}, {-3, 11}, {9, -6}, {
            12, 7}, {-7, -8}, {-1, -9}, {17, 10}, {-10, 16}, {-5, -12}, {14, 
            13}, {-13, 15}, {-4, 18}, {-14, -16}, {-11, -17}, {-2, 
            19}, {-15, -19}, {-18, -20}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 1, 3, 1, 10, 8, 1, 1, 7, 1, 4, 4, 5, 1, 
            2, 1, 8, 9, 9, 2}], 
          "NumericalThresholds" -> {
           9.999999682655224*^-21, -0.01803874969482422, 
           0.34320709109306335`, -0.04882701486349106, 
           0.6863076388835907, -0.024030077271163464`, -0.2478480115532875, 
           1.0303997993469238`, 0.27016764879226685`, 
           0.8957435786724091, -1.1171952486038208`, -0.6856111586093903, \
-0.013169885613024235`, -0.16732359677553177`, -0.8333925902843475, \
-0.2026987001299858, -0.150310218334198, 
           0.5165561139583588, -0.22569969296455383`, -0.2257009744644165, \
-0.236492320895195}, "LeafValues" -> 
          RawArray["Real32",{0.02774053066968918, -0.06962932646274567, 
            0.1433180272579193, -0.03654768690466881, 0.008545530028641224, 
            0.1969725340604782, -0.007272247690707445, -0.06356553733348846, \
-0.024050956591963768`, 0.07284366339445114, 
            0.0367773212492466, -0.01911817118525505, 
            0.045734114944934845`, -0.008826252073049545, 
            0.010056744329631329`, -0.058941908180713654`, \
-0.021181490272283554`, -0.032327041029930115`, -0.037331026047468185`, 
            
            0.0028536138124763966`, -0.05908742919564247, \
-0.06548543274402618}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {9, 5}, {4, 8}, {11, 
            6}, {-3, -6}, {-5, 7}, {-7, 18}, {14, 10}, {-1, -10}, {12, -11}, {
            20, 15}, {-9, 13}, {-13, -14}, {16, -15}, {-12, 17}, {-4, 
            19}, {-16, -18}, {-8, -19}, {-17, -20}, {-2, 21}, {-21, -22}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 1, 2, 4, 3, 2, 10, 9, 9, 1, 8, 10, 3}], 
          "NumericalThresholds" -> {
           9.999999682655224*^-21, -0.07255399599671364, 0.2067645713686943, 
           0.6834334433078766, -0.013168541248887777`, 
           0.7721121609210968, -0.7375942468643188, 
           0.9275425970554352, -0.40850959718227386`, -0.40850968658924103`, \
-1.0094558000564575`, -0.32355697453022003`, 
           0.7773063480854034, -0.050010841339826584`}, "LeafValues" -> 
          RawArray["Real32",{0.013734836131334305`, -0.018938379362225533`, 
            0.09829606860876083, 0.011357657611370087`, 0.14997351169586182`, 
            0.004559863358736038, 0.02264360710978508, 0.0501280203461647, 
            0.011730018071830273`, -0.013425227254629135`, \
-0.05073489621281624, -0.006566036958247423, -0.03997158631682396, \
-0.03798893839120865, -0.0684155747294426}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {7, 4}, {5, 6}, {-3, -5}, {10, -6}, {
            8, -7}, {-1, -8}, {9, -9}, {-4, 13}, {-2, 11}, {14, 
            12}, {-12, -13}, {-10, -14}, {-11, -15}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 1, 1, 3, 10, 8, 6, 8, 9, 9, 5, 2, 8, 5, 
            9, 2}], "NumericalThresholds" -> {-0.5651198923587799, \
-0.2026987001299858, 0.8548800349235535, 
           0.7507074773311615, -0.04898814111948013, -0.024030462838709354`, 
           0.5165567100048065, 0.5072326958179474, -0.32355713844299316`, 
           0.4278861731290817, -0.40850941836833954`, -0.16732390969991684`, 
           0.9093018770217896, -0.22396069020032883`, -0.16732335835695267`, 
           0.4750324785709381, 0.4368094950914383}, "LeafValues" -> 
          RawArray["Real32",{0.006669031456112862, -0.009602893143892288, 
            0.06675805151462555, 0.03390520066022873, 0.1412975937128067, 
            0.025300975888967514`, 0.008251756429672241, 
            0.008878865279257298, -0.043088920414447784`, \
-0.021202458068728447`, 0.04990702494978905, -0.023201005533337593`, 
            0.006852658465504646, 0.1060139611363411, 
            0.03925831615924835, -0.04778081923723221, -0.01952638290822506, 
            0.0006940861931070685}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {14, 4}, {5, 10}, {13, -5}, {7, 
            6}, {-6, 9}, {8, -8}, {-2, 16}, {-7, 15}, {11, 12}, {-4, 
            17}, {-11, -13}, {-3, -14}, {-1, -15}, {-10, -16}, {-9, -17}, \
{-12, -18}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 1, 1, 3, 5, 1, 3, 1, 7, 7, 7, 6, 10, 4, 
            4, 3}], "NumericalThresholds" -> {9.999999682655224*^-21, 
           0.5241711437702179, 
           0.4796958863735199, -0.3863624930381775, -0.05069320276379585, \
-0.2558036595582962, -0.7315489649772644, 0.7721121609210968, 
           0.0015616032178513706`, 0.8957423865795135, 0.8957426846027374, 
           0.8957438170909882, -0.565120667219162, 
           0.9275429546833038, -0.6856114566326141, -0.013168823439627886`, 
           0.7761906087398529}, "LeafValues" -> 
          RawArray["Real32",{0.010463702492415905`, -0.017449507489800453`, 
            0.11080113798379898`, -0.026059752330183983`, 
            0.047002147883176804`, -0.02733837626874447, 
            0.036072321236133575`, -0.036300573498010635`, 
            0.02647692710161209, 0.005430775694549084, 
            0.043703678995370865`, -0.012435819022357464`, 
            0.013778235763311386`, 
            
            0.07950684428215027, -0.014505619183182716`, -0.0338444858789444, \
-0.046731408685445786`, -0.038548607379198074`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 13}, {5, 8}, {-1, -5}, {14, 6}, {
            17, 7}, {-7, 9}, {10, -9}, {-8, -10}, {-4, 11}, {-11, 
            12}, {-12, -13}, {-3, -14}, {15, -15}, {-2, 
            16}, {-16, -17}, {-6, -18}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 2, 1, 3, 3, 2, 1, 4, 6, 5, 4, 7, 3, 1, 5, 
            2, 4, 3}], 
          "NumericalThresholds" -> {0.8957421481609344, -0.2026987001299858, 
           0.8847680687904358, -0.47144321724772453`, -0.05763893947005272, \
-1.0171347260475159`, -0.7315489649772644, -0.013170139398425817`, 
           0.5072334110736847, -0.1673235222697258, -0.013168869074434042`, 
           0.8957435190677643, -0.8803202509880066, -0.484792023897171, \
-0.2558038979768753, 
           0.7420374155044556, -0.6856112778186798, -0.8767273426055908}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.004652636591345072, -0.039834678173065186`, 
            0.04090263694524765, 0.008797677233815193, 
            0.0829245075583458, -0.04119489714503288, -0.016397951170802116`, \
-0.006621142849326134, 0.0529567189514637, 
            0.039954621344804764`, -0.008999797515571117, -0.0398699976503849,
             0.0040398878045380116`, -0.0352109894156456, 
            0.02228582091629505, -0.009536894038319588, \
-0.016670016571879387`, -0.028970105573534966`, -0.017154144123196602`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {14, 4}, {5, 9}, {-3, -5}, {12, 
            6}, {-6, 7}, {8, 11}, {-7, -9}, {15, 10}, {-10, -11}, {-8, -12}, {
            16, 13}, {-13, -14}, {-1, -15}, {-4, 18}, {
            17, -17}, {-2, -18}, {-16, -19}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 1, 4, 2, 1, 2, 10, 5, 1, 4, 3, 3, 3, 3, 
            2}], "NumericalThresholds" -> {0.8957421481609344, 
           0.8894558250904083, -0.013168348465114832`, -0.01803874969482422, 
           1.0234560370445251`, 
           0.4948282092809677, -0.024030694738030434`, -0.1673237755894661, \
-1.0429463982582092`, -0.6856119334697723, -0.06728046014904976, \
-0.882777065038681, -0.05961124785244465, -0.050010841339826584`, \
-0.7772271037101746}, "LeafValues" -> 
          RawArray["Real32",{-0.006444093771278858, -0.02143092453479767, 
            0.07498437166213989, 0.031628452241420746`, 
            0.024733107537031174`, -0.023089034482836723`, 
            0.021114850416779518`, -0.023845870047807693`, 
            0.03128751739859581, 0.016522468999028206`, -0.01476372592151165, 
            0.0544002465903759, 
            0.030691111460328102`, -0.021594813093543053`, \
-0.048314712941646576`, 0.010877624154090881`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -3}, {5, -4}, {15, 11}, {7, 6}, {
            12, -7}, {8, 9}, {-2, -9}, {14, 10}, {-10, -11}, {-5, -12}, {-6, 
            13}, {-13, -14}, {-8, -15}, {-1, -16}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 1, 2, 4, 1, 3, 10, 1, 5, 2, 2, 5, 10, 7}], 
          "NumericalThresholds" -> {-0.5651198923587799, 
           0.8227382898330688, -0.01803874969482422, -0.013168348465114832`, 
           0.34320709109306335`, 0.7721121609210968, -0.024031134322285652`, 
           0.5512655973434448, -0.2558038979768753, -0.918034166097641, 
           0.052003927528858185`, -0.25580327212810516`, 0.7317648828029633, 
           0.06503189355134964}, "LeafValues" -> 
          RawArray["Real32",{0.009300559759140015, 0.010312175378203392`, 
            0.06629718840122223, 0.021958906203508377`, 0.025302758440375328`,
             0.017289096489548683`, 
            0.019964341074228287`, -0.03661130741238594, 
            0.004382014740258455, -0.013281827792525291`, \
-0.004323337227106094, -0.018312476575374603`, 
            0.049144353717565536`, -0.02008073404431343, \
-0.006282841321080923}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {14, 12}, {5, -5}, {7, 6}, {
            8, -7}, {-2, 10}, {-6, 9}, {-9, -10}, {13, 
            11}, {-11, -12}, {-4, -13}, {-8, -14}, {-1, -15}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 1, 4, 9, 1, 2, 3, 4, 9, 7, 3}], 
          "NumericalThresholds" -> {
           9.999999682655224*^-21, -0.5751381814479828, 
           0.8227382898330688, -0.013168348465114832`, 0.4750327914953232, 
           0.2067645713686943, 0.29540368914604187`, 
           0.7660782039165497, -0.013169035781174898`, -0.4085102528333664, 
           0.8957436978816986, -0.05740798078477383}, "LeafValues" -> 
          RawArray["Real32",{-0.0022044465877115726`, 0.00643167644739151, 
            0.010154354386031628`, 0.06558182090520859, 0.020242206752300262`,
             0.016799675300717354`, -0.014195471070706844`, \
-0.004678233992308378, 0.04797185957431793, 
            0.015451667830348015`, -0.011923409067094326`, \
-0.03159075230360031, 0.03408235311508179}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {12, -4}, {5, -5}, {6, -6}, {
            10, 7}, {9, 8}, {-8, -9}, {-7, -10}, {-2, 
            11}, {-11, -12}, {-3, -13}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 2, 3, 3, 1, 10, 1, 10, 1, 9, 3, 7}], 
          "NumericalThresholds" -> {
           0.8957421481609344, -0.01803874969482422, -0.8880764245986938, \
-0.8853868842124939, 
           1.440644919872284, -0.024031310342252254`, -0.35156308114528656`, \
-0.024030779488384724`, 
           1.2403336763381958`, -0.22570053488016129`, -0.0587638895958662, 
           0.8957435190677643}, "LeafValues" -> 
          RawArray["Real32",{0.015518234111368656`, -0.018651898950338364`, 
            0.011818422935903072`, 0.02171269804239273, 0.022465959191322327`,
             0.020485268905758858`, -0.030702773481607437`, 
            0.042262833565473557`, -0.006401758641004562, \
-0.002143391640856862, -0.008831036277115345, 
            0.0068839904852211475`, -0.03228215128183365}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {10, 7}, {9, 4}, {-4, 5}, {
            6, -6}, {-5, 8}, {-3, -8}, {-7, -9}, {12, -10}, {-1, 
            11}, {-11, -12}, {-2, -13}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 9, 2, 3, 4, 9, 7, 7, 3, 1, 1, 2, 1, 1}], 
          "NumericalThresholds" -> {0.8957421481609344, -0.4085095673799515, 
           1.3328883647918701`, -0.8880764245986938, -0.013168418779969215`, 
           0.4750327318906784, 0.8957435190677643, 0.8957436978816986, 
           0.7644379734992981, -0.830431342124939, 1.2403336763381958`, 
           0.25242850184440613`, -1.24230295419693, 0.05792777054011822}, 
          "LeafValues" -> 
          RawArray["Real32",{
            0.037924669682979584`, -0.011426937766373158`, \
-0.01043984480202198, 0.030432172119617462`, -0.013817180879414082`, 
            0.021307464689016342`, 0.02278171107172966, 
            0.03456522151827812, -0.011691151186823845`, 0.004157515242695808,
             0.009047463536262512, -0.0017147129401564598`, 
            0.01899532973766327, -0.02443312667310238, \
-0.0005846999119967222}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {10, -4}, {11, 5}, {6, -6}, {
            7, -7}, {9, 8}, {-8, -9}, {-5, -10}, {-3, 12}, {13, -12}, {
            14, -13}, {-2, -14}, {-11, -15}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 2, 4, 5, 4, 10, 4, 9, 5, 1, 1, 5, 3, 4, 
            3}], "NumericalThresholds" -> {0.06503302231431007, 
           0.6834334433078766, -0.6856105029582977, -0.1673242375254631, \
-0.013169939164072275`, 0.7317634522914886, -0.013168992474675179`, 
           0.4278862625360489, -0.2558034211397171, 1.170843780040741, 
           0.6223829984664917, -0.25580377876758575`, -0.05545971170067787, \
-0.6856108009815216, -0.06060711853206158}, "LeafValues" -> 
          RawArray["Real32",{-0.008645798079669476, -0.013459533452987671`, 
            0.02992510423064232, 0.038773465901613235`, 
            0.02239944413304329, -0.011218927800655365`, -0.01944776251912117,
             0.02444855310022831, -0.0018788125598803163`, \
-0.012665413320064545`, -0.020279178395867348`, 0.021569188684225082`, 
            0.018123310059309006`, 0.014853250235319138`, 
            0.006650220137089491, -0.02844846062362194}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {13, -3}, {9, 4}, {-4, 5}, {-5, 6}, {
            7, 8}, {-6, -8}, {-7, -9}, {10, 15}, {11, -11}, {
            12, -12}, {-2, -13}, {14, -14}, {-1, -15}, {-10, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 1, 2, 9, 9, 8, 7, 8, 3, 3, 5, 10, 6}], 
          "NumericalThresholds" -> {1.3750149607658386`, 1.5105779767036438`, 
           1.8030426502227783`, -0.40850959718227386`, -0.4085100144147873, \
-0.22396060079336166`, 0.8957429826259613, 0.5165568292140961, 
           0.7717768549919128, 
           1.5912532806396484`, -0.16732359677553177`, -0.024030394852161407`,
            0.5072340667247772}, "LeafValues" -> 
          RawArray["Real32",{0.017054220661520958`, 
            0.04688534885644913, -0.003840085119009018, 
            0.02322174794971943, -0.009694655425846577, 
            0.039101120084524155`, -0.021791810169816017`, \
-0.012929962016642094`, 0.020033009350299835`, 0.03668917343020439, 
            0.002828933298587799, 
            0.005429661367088556, -0.0018887144979089499`, \
-0.02673257887363434}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {5, 7}, {
            6, -6}, {-1, 12}, {9, 8}, {13, -9}, {11, 
            10}, {-10, -11}, {-5, -12}, {-7, -13}, {-8, -14}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 7, 3, 2, 7, 7, 10, 9, 6, 3, 6, 5, 1, 1}], 
          "NumericalThresholds" -> {-1.0642696619033813`, 0.895742267370224, 
           1.593241810798645, -0.8790672421455383, 0.8957425653934479, 
           0.8957426846027374, 0.7773054540157318, 
           0.4278860241174698, -0.5651197731494904, -0.8823472857475281, \
-0.5651204884052277, -0.25580333173274994`, 
           0.2673739790916443, -0.13735754787921906`}, "LeafValues" -> 
          RawArray["Real32",{-0.001302710035815835, -0.0030816998332738876`, 
            0.021868374198675156`, 
            0.03767254203557968, -0.010944901034235954`, 
            0.024907264858484268`, 
            0.003702561603859067, -0.008912966586649418, 
            0.006775940768420696, -0.017954975366592407`, \
-0.023076709359884262`, 0.026010217145085335`, 
            0.017106283456087112`, -0.02572115883231163, \
-0.009198061190545559}], "Children" -> 
          RawArray["Integer16",{{10, 2}, {3, 4}, {8, -4}, {-3, 5}, {13, 
            6}, {-6, 7}, {-7, -8}, {9, 11}, {12, -10}, {-1, 
            14}, {-9, -12}, {-2, -13}, {-5, -14}, {-11, -15}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 3, 6, 2, 6, 8, 6, 4, 3, 3, 2, 8, 7, 1, 2, 
            5, 3, 8}], 
          "NumericalThresholds" -> {0.8847680687904358, 0.7769983410835266, 
           0.5072329938411713, -0.39844968914985657`, 
           0.507234126329422, -0.24784809350967407`, 
           0.5072328150272369, -0.685611754655838, -0.06512349098920822, \
-0.8791777789592743, 0.08151080459356308, -0.22395941615104675`, 
           0.8957421481609344, -1.039604902267456, -0.36348235607147217`, \
-0.16732341051101685`, -0.05064869858324528, -0.22395993024110794`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.015886111184954643`, -0.009533851407468319, 
            0.03821197897195816, -0.00346876191906631, 0.0158943273127079, 
            0.017608288675546646`, -0.01716000959277153, 
            0.020586540922522545`, -0.00799968559294939, \
-0.010310258716344833`, 0.02931453101336956, 0.013232911936938763`, 
            0.0020027966238558292`, -0.007296901661902666, \
-0.028615271672606468`, 
            0.009981815703213215, -0.012031408958137035`, \
-0.01773736998438835, -0.01830742508172989}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {9, -3}, {7, 4}, {14, 5}, {
            6, -6}, {-5, 12}, {8, -8}, {-1, 13}, {10, -10}, {
            11, -11}, {-2, -12}, {-7, -13}, {15, 17}, {-4, 16}, {-9, -16}, {
            18, -17}, {-14, -18}, {-15, -19}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 3, 6, 6, 10, 2, 4, 5, 1, 1, 7, 6, 7, 6, 7, 
            6, 1, 1}], 
          "NumericalThresholds" -> {-0.2558036595582962, -0.06012612767517567,
            0.5072337687015533, 0.5072329342365265, 0.7317643463611603, 
           1.533321499824524, -0.013169249054044485`, -0.16732367128133774`, 
           0.6182591021060944, 1.162319302558899, 0.8957435786724091, 
           0.5072336494922638, 0.8957425653934479, 0.5072334110736847, 
           0.8957435786724091, 
           0.5072334110736847, -0.702703207731247, -1.245964765548706}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.004004967398941517, -0.001047051278874278, 
            0.03520809859037399, 0.03046063892543316, 0.0019608207512646914`, 
            0.02175559289753437, 
            0.021430103108286858`, -0.024652082473039627`, \
-0.008772328495979309, 0.014765216037631035`, -0.007467023096978664, 
            0.003725184127688408, -0.00828816182911396, \
-0.030092941597104073`, 
            0.01132970117032528, -0.02089572139084339, -0.008623029105365276, \
-0.019817188382148743`, -0.01858900487422943}], "Children" -> 
          RawArray["Integer16",{{9, 2}, {6, 3}, {4, -4}, {5, 7}, {-3, 8}, {
            12, -7}, {-5, -8}, {-6, -9}, {11, 10}, {-10, -11}, {13, -12}, {14,
             18}, {-1, 16}, {15, -15}, {-2, -16}, {-14, 
            17}, {-17, -18}, {-13, -19}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 9, 9, 6, 4, 2, 2, 2, 8, 5, 4, 9, 1, 3}], 
          "NumericalThresholds" -> {0.8847680687904358, -0.4085097759962082, 
           0.42788611352443695`, 0.5072329342365265, -0.6856109201908112, 
           1.6690630316734314`, 0.4918917119503021, 0.29540368914604187`, 
           0.5165567100048065, -0.16732319444417953`, -0.013169885613024235`, 
           0.4278857856988907, -0.5523051619529724, -0.8777972161769867}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.008567589335143566, 0.029491517692804337`, 
            0.0038063256070017815`, -0.006746876053512096, 
            0.02741873450577259, -0.008909469470381737, 
            0.012772553600370884`, -0.012678707018494606`, 
            0.020407140254974365`, 0.019026532769203186`, 
            0.007988288067281246, -0.025069478899240494`, 
            0.0087368069216609, -0.009310314431786537, \
-0.022733038291335106`}], "Children" -> 
          RawArray["Integer16",{{6, 2}, {-2, 3}, {5, 4}, {-4, -5}, {-3, 14}, {
            7, -7}, {8, 11}, {9, -9}, {10, -10}, {-1, -11}, {12, 
            13}, {-8, -13}, {-12, -14}, {-6, -15}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 9, 9, 9, 8, 9, 8, 9, 1, 2, 9, 7, 3}], 
          "NumericalThresholds" -> {-0.40851064026355743`, \
-0.40850959718227386`, -0.4085099846124649, -0.22569996863603592`, 
           0.5165567100048065, -0.408510223031044, 0.5165567696094513, 
           0.427885964512825, 1.238666594028473, 0.39695580303668976`, 
           0.4278854578733444, 0.8957422077655792, 0.7641381919384003}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.017268585041165352`, 0.013072086498141289`, 
            0.0008941249689087272, 
            0.03826017677783966, -0.0030898109544068575`, 
            
            0.03995589539408684, -0.014868930913507938`, \
-0.025887755677103996`, -0.0001790476671885699, 0.01670367643237114, 
            0.006452668458223343, -0.017405297607183456`, \
-0.009719934314489365, -0.015110793523490429`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {6, -4}, {7, 5}, {
            8, -6}, {-2, -7}, {10, 13}, {11, 9}, {-9, -10}, {
            12, -11}, {-5, -12}, {-3, -13}, {-8, -14}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 10, 1, 1, 6, 6, 7, 10, 3}], 
          "NumericalThresholds" -> {-0.0240315068513155, \
-0.024031134322285652`, -1.1747119426727295`, -0.9713696539402008, 
           0.5072342455387115, 0.5072339475154877, 0.8957429826259613, 
           0.7773066461086273, -0.876563549041748}, "LeafValues" -> 
          RawArray["Real32",{-0.013321734964847565`, 0.02608454041182995, 
            0.009705130010843277, 0.020023679360747337`, 
            0.0009218706982210279, 
            0.016877431422472, -0.016794193536043167`, -0.007284145802259445, \
-0.010932844132184982`, -0.02603781409561634}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {7, 4}, {-4, 5}, {
            6, -6}, {-5, -7}, {8, 9}, {-3, -9}, {-8, -10}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 5, 3, 3, 5, 5, 3, 8, 3, 2, 5}], 
          "NumericalThresholds" -> {-0.16732274740934372`, \
-0.1673230603337288, -0.06209137849509716, -0.048535723239183426`, \
-0.1673235073685646, -0.16732362657785416`, 
           0.7717768549919128, -0.22396061569452286`, -0.8767273426055908, \
-0.02937004156410694, -0.16732261329889297`}, "LeafValues" -> 
          RawArray["Real32",{
            0.0015797405503690243`, -0.011750387027859688`, \
-0.0005857707001268864, 
            0.03264385461807251, -0.019263634458184242`, \
-0.0026756012812256813`, 0.029204169288277626`, 
            0.030548738315701485`, -0.011686181649565697`, \
-0.007912532426416874, -0.021717103198170662`, 0.00590422423556447}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {5, 3}, {-3, -4}, {11, -5}, {6, 10}, {
            7, -7}, {9, 8}, {-8, -9}, {-1, -10}, {-6, -11}, {-2, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 5, 2, 10, 1, 2, 10, 5, 1, 6, 2, 3, 7, 6, 
            5}], "NumericalThresholds" -> {-1.0642696619033813`, \
-0.2558036595582962, -0.8790672421455383, -0.024030694738030434`, 
           0.606634259223938, 
           1.6420460939407349`, -0.024030531756579876`, -0.2558033913373947, \
-0.6231958866119385, 0.5072327554225922, -0.013172573409974575`, 
           0.7687416076660156, 
           0.8957430422306061, -0.5651203691959381, -0.25580446422100067`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.008600878529250622, -0.02019483596086502, 
            0.028880273923277855`, 0.039236340671777725`, 0.0147763816639781, 
            0.001091844867914915, 
            0.021370336413383484`, -0.0037316272500902414`, \
-0.004481888376176357, 0.0035927274730056524`, 
            0.03350546211004257, -0.0012739005032926798`, \
-0.019612262025475502`, 
            0.009854352101683617, -0.013794672675430775`, \
-0.017584366723895073`}], "Children" -> 
          RawArray["Integer16",{{12, 2}, {7, 3}, {-3, 4}, {5, 6}, {-4, -6}, {
            8, -7}, {-2, 9}, {-5, -9}, {15, 10}, {14, 11}, {-11, -12}, {
            13, -13}, {-1, -14}, {-10, -15}, {-8, -16}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 3, 4, 5, 6, 3, 6, 4, 2, 2, 1, 7, 7, 4, 6, 
            3, 6, 5, 6, 7}], 
          "NumericalThresholds" -> {0.7559244632720947, 
           0.7788235247135162, -0.685611754655838, -0.2558038979768753, 
           0.5072329938411713, 0.7723318934440613, 
           0.5072328150272369, -0.685611754655838, -0.15703292936086655`, 
           0.052003927528858185`, -1.039604902267456, 0.8957431614398956, 
           0.8957426249980927, -0.013169641140848398`, 
           0.5072335302829742, -0.8844845294952393, 
           0.5072338283061981, -0.2558033913373947, -0.5651197135448456, 
           0.8957430422306061}, "LeafValues" -> 
          RawArray["Real32",{0.01969529315829277, -0.01366112008690834, 
            0.02768097072839737, 0.020875275135040283`, -0.009927905164659023,
             0.002530521946027875, -0.001863299636170268, 0.02523251436650753,
             0.007638179697096348, 
            0.018445216119289398`, -0.006176623981446028, \
-0.017340192571282387`, -0.005215147510170937, 
            0.012159000150859356`, -0.003380965441465378, 
            0.01682365871965885, -0.00419465359300375, -0.0229327455163002, \
-0.017914386466145515`, -0.014872802421450615`, -0.006413817871361971}], 
          "Children" -> 
          RawArray["Integer16",{{5, 2}, {3, -3}, {-2, 4}, {-4, 14}, {6, 9}, {
            7, 19}, {8, -8}, {-1, 16}, {11, 10}, {-10, 12}, {-6, 17}, {13, 
            18}, {-11, -14}, {-5, 15}, {-15, -16}, {-9, -17}, {
            20, -18}, {-13, -19}, {-7, -20}, {-12, -21}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 8, 1, 1, 6, 4, 4, 10, 1, 9}], 
          "NumericalThresholds" -> {0.5165573060512543, 0.5165569484233856, 
           1.440644919872284, 1.5729206800460815`, 
           0.5072339475154877, -0.013169575948268175`, -0.013170139398425817`,
            0.9275428950786591, -0.7631376087665558, 0.4278864413499832}, 
          "LeafValues" -> 
          RawArray["Real32",{0.0006322299595922232, 
            0.01274734828621149, -0.01411331444978714, 
            0.02746685780584812, -0.006488133687525988, 
            0.00022427865769714117`, -0.00687564117833972, 
            0.01753992959856987, 
            0.010838182643055916`, -0.00955614447593689, \
-0.022534526884555817`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {5, 4}, {-4, -5}, {6, 9}, {
            7, 8}, {-1, -8}, {-7, -9}, {-6, 10}, {-10, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 10, 10, 9, 9, 9, 8, 8}], 
          "NumericalThresholds" -> {-0.0240315068513155, \
-0.024031134322285652`, -0.024030779488384724`, -0.4085095673799515, \
-0.40851034224033356`, -0.22569996863603592`, 0.5165567100048065, 
           0.5165567696094513}, "LeafValues" -> 
          RawArray["Real32",{-0.010655404068529606`, 
            0.020488591864705086`, -0.015097775496542454`, \
-0.010040863417088985`, -0.002974240342155099, 
            0.03201664611697197, -0.0007593940827064216, 
            0.029798274859786034`, -0.013530619442462921`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {5, 6}, {-4, -6}, {
            8, 7}, {-7, -8}, {-5, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 8, 5, 6, 2, 3, 9, 7, 7, 2, 10, 9, 10}], 
          "NumericalThresholds" -> {-0.3235579878091812, \
-0.32355718314647675`, -0.16732405871152878`, 
           0.507234126329422, -0.0876147635281086, 
           9.999999682655224*^-21, -0.40850959718227386`, 0.8957435190677643, 
           0.8957422077655792, 0.6742469966411591, 0.7317639887332916, 
           0.42788712680339813`, 0.9275434911251068}, "LeafValues" -> 
          RawArray["Real32",{-0.008598390966653824, 0.033359263092279434`, 
            0.02069058082997799, 0.0014500486431643367`, -0.01204739511013031,
             0.02471904642879963, -0.01734256185591221, -0.004078961908817291,
             0.02453671395778656, -0.011959992349147797`, \
-0.013948874548077583`, 0.005060118623077869, -0.01929308846592903, 
            0.008836102671921253}], "Children" -> 
          RawArray["Integer16",{{6, 2}, {3, 4}, {-2, -4}, {7, 5}, {-5, -6}, {
            13, -7}, {8, 10}, {9, -9}, {-3, -10}, {12, 
            11}, {-11, -12}, {-8, -13}, {-1, -14}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 1, 8, 5, 1, 10, 9, 1, 1, 3, 3, 3, 6, 10, 6,
             7, 5}], 
          "NumericalThresholds" -> {-0.8880764245986938, 
           0.7559244632720947, -0.22396035492420197`, -0.16732390969991684`, \
-0.145352341234684, -0.02403075620532036, -0.40850962698459625`, \
-1.1195634007453918`, -0.9713696539402008, -0.05763893947005272, 
           0.7627607882022858, -0.04787876643240452, 0.5072328150272369, 
           0.7773067653179169, 0.5072332918643951, 
           0.8957427442073822, -0.16732414811849594`}, "LeafValues" -> 
          RawArray["Real32",{0.0025870343670248985`, 0.03039577044546604, 
            0.02792949415743351, -0.0014174528187140822`, \
-0.00303448922932148, -0.02371426299214363, -0.002078052144497633, \
-0.017309803515672684`, 0.019252482801675797`, -0.0005073474021628499, 
            0.023212863132357597`, -0.0036131711676716805`, \
-0.015904251486063004`, -0.018582787364721298`, -0.015401295386254787`, \
-0.005386124365031719, -0.004976212978363037, 0.005868841893970966}], 
          "Children" -> 
          RawArray["Integer16",{{13, 2}, {5, 3}, {4, 12}, {-3, -5}, {6, 
            7}, {-2, 8}, {-6, 10}, {14, 9}, {-9, -10}, {16, 11}, {-11, -12}, {
            17, -13}, {-1, 15}, {-7, -15}, {-14, -16}, {-8, -17}, {-4, -18}}],
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 9, 8, 5, 3, 3, 6, 7, 2, 9, 1, 10, 10, 2, 3,
             7, 9}], 
          "NumericalThresholds" -> {-0.2558036595582962, 
           0.4750322252511978, -0.24784809350967407`, -0.16732356697320938`, \
-0.06012612767517567, -0.04891309142112732, 0.5072336494922638, 
           0.8957435786724091, -0.013172573409974575`, 0.4750322550535202, 
           1.3050665259361267`, 0.9275433123111725, -0.024030334316194057`, 
           0.4368094950914383, -0.0506794024258852, 
           0.8957435786724091, -0.22569940984249115`}, "LeafValues" -> 
          RawArray["Real32",{-0.018298225477337837`, 
            0.031709592789411545`, -0.0009763762936927378, \
-0.0037142925430089235`, 0.0010935039026662707`, 
            0.020897891372442245`, -0.0038121575489640236`, 
            0.015853052958846092`, 
            0.019145751371979713`, -0.01298767700791359, 
            0.016591902822256088`, 
            0.008931219577789307, -0.016253575682640076`, \
-0.013813797384500504`, 
            0.004460682161152363, -0.0018160248873755336`, \
-0.012747015804052353`, -0.003201203653588891}], "Children" -> 
          RawArray["Integer16",{{8, 2}, {3, 12}, {4, 5}, {-2, -5}, {11, 
            6}, {-6, 7}, {-7, -8}, {10, 9}, {-9, -10}, {13, -11}, {
            16, -12}, {-3, -13}, {-1, 14}, {15, 
            17}, {-14, -16}, {-4, -17}, {-15, -18}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 8, 6, 3, 8, 8, 8, 9, 7, 10, 10, 6}], 
          "NumericalThresholds" -> {-0.3235579878091812, \
-0.32355718314647675`, 0.5072334706783295, 
           1.592172920703888, -0.22396061569452286`, -0.22395972907543182`, \
-0.22395939379930496`, -0.225699745118618, 
           0.8957437574863434, -0.024031310342252254`, 0.9275435507297516, 
           0.5072333514690399}, "LeafValues" -> 
          RawArray["Real32",{-0.005079645663499832, 0.022167595103383064`, 
            0.011290513910353184`, -0.006150280125439167, 
            0.026919305324554443`, -0.005947223864495754, 
            0.021812804043293, -0.004650692455470562, 
            0.0215531587600708, -0.0161044392734766, -0.0038577476516366005`, 
            0.004170711152255535, -0.016176307573914528`}], "Children" -> 
          RawArray["Integer16",{{11, 2}, {3, 4}, {-2, -4}, {6, 5}, {-5, -6}, {
            9, 7}, {-7, 8}, {-8, -9}, {10, -10}, {-3, -11}, {
            12, -12}, {-1, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 9, 9, 5, 2, 10, 3, 3, 1, 3, 2}], 
          "NumericalThresholds" -> {0.47503285109996796`, 0.4750322848558426, 
           0.4750317484140396, -0.167323537170887, -0.586018979549408, \
-0.024030077271163464`, -0.050363270565867424`, -0.8852278888225555, 
           0.4796958863735199, -0.8759350180625916, -1.3436325788497925`}, 
          "LeafValues" -> 
          RawArray["Real32",{0.00487455865368247, 
            0.01079335156828165, -0.017790034413337708`, 
            0.012302185408771038`, 
            0.0008430990274064243, -0.0020702630281448364`, 
            0.008920415304601192, 
            0.02078918367624283, -0.003143957117572427, \
-0.012287929654121399`, 0.01649528741836548, -0.014987096190452576`}], 
          "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, 4}, {5, -4}, {-3, -5}, {9, 6}, {
            7, 8}, {-6, -8}, {-7, -9}, {11, 10}, {-10, -11}, {-1, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{10, 10, 2, 10, 10, 6, 5}], 
          "NumericalThresholds" -> {-0.0240315068513155, \
-0.024031134322285652`, -1.6010496020317078`, -0.024030779488384724`, \
-0.024030101485550404`, 0.5072332918643951, -0.1673230156302452}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.008736895397305489, 
            0.01337362639605999, -0.012707553803920746`, \
-0.013422067277133465`, 0.025138089433312416`, 
            0.0018607655074447393`, -0.008885803632438183, \
-0.005343614611774683}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {-4, 5}, {6, 
            7}, {-5, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{9, 1, 1, 9, 5, 3, 2}], 
          "NumericalThresholds" -> {-0.40851064026355743`, 
           1.5121723413467407`, 
           1.3750149607658386`, -0.408510223031044, -0.25580401718616486`, 
           0.7761906087398529, -0.2026987001299858}, "LeafValues" -> 
          RawArray["Real32",{-0.010930703021585941`, 
            0.010675442405045033`, -0.008079535327851772, 
            0.020532283931970596`, -0.009854654781520367, 
            0.0024949696380645037`, -0.006801840849220753, \
-0.0007948887068778276}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, 5}, {7, 
            6}, {-6, -7}, {-5, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 8, 8, 1, 1, 10, 10, 7, 1}], 
          "NumericalThresholds" -> {0.5165573060512543, 0.5165569484233856, 
           0.516556590795517, -0.9673650860786438, -1.1145190000534058`, \
-0.024030121974647045`, -0.02403075061738491, 0.8957423865795135, 
           1.3724036812782288`}, "LeafValues" -> 
          RawArray["Real32",{0.01577255129814148, 
            0.010863113217055798`, -0.0088918162509799, 0.011988759972155094`,
             0.0030401621479541063`, 
            0.022499006241559982`, -0.003921791911125183, \
-0.001761599793098867, -0.016293084248900414`, 0.009266974404454231}], 
          "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {5, 7}, {
            6, -6}, {-1, -7}, {8, 9}, {-5, -9}, {-8, -10}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 9, 8, 9, 5, 7, 3, 3, 8, 10, 1}], 
          "NumericalThresholds" -> {0.4750327914953232, 
           0.4750322848558426, -0.323558047413826, 
           0.4750317484140396, -0.25580351054668427`, 
           0.8957435786724091, -0.8771851360797882, -0.06012612767517567, \
-0.24784725159406662`, -0.024030334316194057`, 1.3050665259361267`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.015237140469253063`, 
            
            0.007638079579919577, -0.0004316643171478063, \
-0.018747461959719658`, 0.010147130116820335`, -0.0038184570148587227`, 
            0.024037852883338928`, -0.0070874993689358234`, 
            0.01968366838991642, 
            0.0025213828776031733`, -0.004058669321238995, 
            0.006317452993243933}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {4, 3}, {-3, -4}, {5, -5}, {6, 8}, {
            10, 7}, {-7, -8}, {11, 9}, {-9, -10}, {-1, -11}, {-6, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 10, 10, 10, 4, 1, 1, 3, 7, 5, 6, 6}], 
          "NumericalThresholds" -> {-0.8882768154144287, 0.9275431334972382, 
           0.9275438487529755, 
           0.9275427758693695, -0.01316889701411128, -0.7315489649772644, 
           0.7474104166030884, -0.8831900358200073, 
           0.8957431614398956, -0.2558036595582962, 0.5072328150272369, 
           0.5072332918643951}, "LeafValues" -> 
          RawArray["Real32",{
            0.002968755317851901, -0.005824492312967777, \
-0.013518834486603737`, 0.008455049246549606, 0.01689077727496624, 
            0.013077987357974052`, -0.030878670513629913`, 
            0.0006142547936178744, -0.004900685045868158, 
            0.030484702438116074`, 
            0.005254287738353014, -0.017582068219780922`, \
-0.0028941717464476824`}], "Children" -> 
          RawArray["Integer16",{{11, 2}, {4, 3}, {-3, -4}, {5, -5}, {8, 
            6}, {-6, 7}, {-7, -8}, {9, 10}, {-2, -10}, {-9, -11}, {-1, 
            12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 9, 1, 1, 9, 2, 2, 3, 2, 8}], 
          "NumericalThresholds" -> {-0.40851064026355743`, \
-0.4085095673799515, -0.24953028559684753`, 
           0.8894558250904083, -0.40850929915905, -1.285254418849945, \
-0.8615285754203796, 
           1.6021807789802551`, -1.0642696619033813`, -0.32355713844299316`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.009166202507913113, 
            0.020345335826277733`, -0.010411469265818596`, \
-0.011277923360466957`, 0.015081374906003475`, -0.015106534585356712`, 
            0.0025816869456321, -0.0012221228098496795`, 
            0.014731071889400482`, 
            0.022015227004885674`, -0.001069847377948463}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 5}, {-2, 4}, {-4, -5}, {-3, 6}, {
            10, 7}, {9, 8}, {-8, -9}, {-7, -10}, {-6, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1, 4, 5, 5, 4}], 
          "NumericalThresholds" -> {1.5105779767036438`, 1.3750149607658386`, 
           1.1317203044891357`, 
           1.0234560370445251`, -0.013169641140848398`, \
-0.16732274740934372`, -0.1673230603337288, -0.01316889701411128}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.00017478354857303202`, -0.007698340807110071, 
            0.01428907085210085, -0.01521691307425499, 0.01535751111805439, 
            0.0007093793246895075, -0.002582076471298933, 
            0.011404347606003284`, -0.013399052433669567`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {4, 5}, {6, -5}, {-4, -6}, {
            7, 8}, {-1, -8}, {-7, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 2, 2, 5, 2, 2, 8, 9, 8, 7, 7}], 
          "NumericalThresholds" -> {1.2675729393959045`, 1.8030426502227783`, 
           0.6742469966411591, -0.2558032423257828, 0.4990248680114746, 
           0.29540368914604187`, -0.2239598110318184, -0.4085095673799515, \
-0.2239602580666542, 0.8957425653934479, 0.8957431614398956}, "LeafValues" -> 
          RawArray["Real32",{-0.008746367879211903, -0.005718468222767115, 
            0.006225572898983955, 
            0.01867574267089367, -0.003138196188956499, \
-0.011343419551849365`, 0.026316901668906212`, 0.025773053988814354`, 
            0.0006996314623393118, 
            0.0019108016276732087`, -0.0009192396537400782, \
-0.014131876640021801`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {11, -3}, {5, 4}, {-4, -5}, {6, -6}, {
            7, 9}, {10, 8}, {-8, -9}, {-7, -10}, {-1, -11}, {-2, -12}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 9, 8, 8, 8, 1, 10, 6, 2, 7}], 
          "NumericalThresholds" -> {0.4750327914953232, 
           0.4750322848558426, -0.3235575705766678, -0.32355813682079315`, \
-0.323558047413826, -1.0766962766647339`, -0.024030182510614395`, 
           0.5072342455387115, -0.3774842321872711, 0.8957439363002777}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.00196312484331429, 0.007218957878649235, 
            0.0002919304824899882, 0.020075565204024315`, 
            0.019005149602890015`, -0.01363865751773119, \
-0.003298694035038352, 0.011133434250950813`, 
            0.012974237091839314`, -0.004373306408524513, 
            0.009206494316458702}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, 5}, {4, 6}, {-1, -5}, {-3, -6}, {
            7, 8}, {-4, 9}, {10, -9}, {-8, -10}, {-7, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 9, 10, 3, 1, 1, 5, 9, 8, 7}], 
          "NumericalThresholds" -> {-0.3235579878091812, 0.4750317484140396, 
           0.9275433123111725, 1.5960396528244019`, 0.4667016863822937, 
           1.443563461303711, -0.2558047026395798, -0.4085099548101425, \
-0.3235581964254379, 0.895742803812027}, "LeafValues" -> 
          RawArray["Real32",{0.00468179676681757, 0.006682266015559435, 
            0.018942318856716156`, -0.0076043750159442425`, \
-0.00639737443998456, 
            0.021972982212901115`, -0.00924381148070097, -0.01057831384241581,
             
            0.00048326505930162966`, -0.011397788301110268`, \
-0.0053016324527561665`}], "Children" -> 
          RawArray["Integer16",{{9, 2}, {4, 3}, {-3, -4}, {6, 5}, {-5, -6}, {
            7, -7}, {-2, 8}, {-8, -9}, {10, -10}, {-1, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 10, 8, 10, 3, 8, 6, 6}], 
          "NumericalThresholds" -> {0.9275438487529755, 
           0.9275435507297516, -0.3235579878091812, 
           0.9275428354740143, -0.8882768154144287, -0.24784725159406662`, 
           0.5072328150272369, 0.5072333514690399}, "LeafValues" -> 
          RawArray["Real32",{-0.002003320725634694, 
            0.00791562907397747, -0.014656747691333294`, 0.000764346681535244,
             0.017087657004594803`, 
            0.006805394776165485, -0.0005544704617932439, \
-0.010015014559030533`, -0.012261291965842247`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {3, -3}, {8, 4}, {5, -5}, {7, 
            6}, {-6, -7}, {-4, -8}, {-1, -9}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 10, 10, 8, 5, 7, 4, 3, 8, 2}], 
          "NumericalThresholds" -> {-0.024031310342252254`, \
-0.024030933156609535`, -0.024030678905546665`, -0.22396035492420197`, \
-0.1673230156302452, 
           0.8957438766956329, -0.013169185258448124`, \
-0.059978581964969635`, -0.24784711748361588`, 0.09642146900296211}, 
          "LeafValues" -> 
          RawArray["Real32",{0.014470900408923626`, -0.017542602494359016`, 
            0.013744212687015533`, 
            0.0015717401402071118`, -0.0023598666302859783`, \
-0.006678470876067877, 
            0.009244301356375217, -0.0069956667721271515`, \
-0.0053598107770085335`, 0.0048622069880366325`, -0.014392375014722347`}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, 5}, {-1, -5}, {6, 8}, {
            7, -7}, {-4, -8}, {9, 10}, {-6, -10}, {-9, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 7, 4, 3, 10, 3, 3, 10, 4, 10, 8, 5}], 
          "NumericalThresholds" -> {0.8957436382770538, 
           0.8957435786724091, -0.013169815298169851`, 0.7627607882022858, 
           0.7317648828029633, 
           1.599275290966034, -0.05817006900906563, -0.024030678905546665`, \
-0.013169891200959682`, 
           0.9275430738925934, -0.32355792820453644`, -0.16732261329889297`}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.005026538856327534, 0.0061576575972139835`, 
            0.023985059931874275`, 
            0.0051440526731312275`, -0.01925194263458252, \
-0.013220008462667465`, -0.00926146749407053, 0.022009214386343956`, 
            0.0068252189084887505`, -0.00521796103566885, \
-0.0028434761334210634`, 0.015527017414569855`, 0.006591601297259331}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {6, -3}, {4, -4}, {5, -5}, {-2, -6}, {
            7, -7}, {10, 8}, {-8, 9}, {-9, -10}, {12, 
            11}, {-11, -12}, {-1, -13}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{3, 1, 1, 4, 9, 8, 9, 3}], 
          "NumericalThresholds" -> {1.60764479637146, 1.443563461303711, 
           1.5762414932250977`, -0.013168363366276026`, 
           0.4750327318906784, -0.32355786859989166`, 
           0.4750315994024277, -0.053907860070466995`}, "LeafValues" -> 
          RawArray["Real32",{-0.002312069060280919, 
            0.008203975856304169, -0.01783672533929348, 
            0.0016219893004745245`, 0.011948573403060436`, 
            0.008099949918687344, -0.000330311362631619, \
-0.012936493381857872`, 0.017301710322499275`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {4, 3}, {-3, -4}, {5, -5}, {6, -6}, {
            8, 7}, {-7, -8}, {-1, -9}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 6, 2, 9, 6, 4, 2, 1, 3, 1}], 
          "NumericalThresholds" -> {0.5165573060512543, 0.5072339475154877, 
           0.11893922090530396`, 0.4750327914953232, 
           0.5072337687015533, -0.013170093763619661`, -0.403459832072258, 
           1.1030119061470032`, -0.8788267374038696, 0.2624008506536484}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.0015626151580363512`, 
            0.007918384857475758, -0.006112162955105305, 0.005383535288274288,
             0.012881964445114136`, -0.0012606896925717592`, 
            0.017711514607071877`, -0.01947176642715931, 
            0.0006743706180714071, -0.015233947895467281`, 
            0.003891951870173216}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {4, 3}, {7, -4}, {5, -5}, {8, 
            6}, {-6, -7}, {-3, -8}, {10, 9}, {-9, -10}, {-1, -11}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{1, 6, 2, 2, 4, 6, 6, 8, 5, 3, 4, 5, 6, 6, 3, 
            4, 1, 4}], 
          "NumericalThresholds" -> {1.440644919872284, 
           0.5072329342365265, -0.12548677623271942`, 
           0.09186898171901703, -0.013169963844120502`, 0.5072329342365265, 
           0.5072326362133026, -0.2239600196480751, -0.2558038681745529, 
           0.7721121609210968, -0.6856110990047455, -0.2558038681745529, 
           0.5072334706783295, 0.5072341859340668, 
           0.7761906087398529, -0.013170212972909212`, 
           0.2067645713686943, -0.013169963844120502`}, "LeafValues" -> 
          RawArray["Real32",{0.007938453927636147, -0.005719490349292755, 
            0.014415155164897442`, 
            0.01995018683373928, -0.009154343977570534, \
-0.005824608262628317, -0.017957251518964767`, 0.014965939335525036`, 
            0.005542339291423559, -0.006162059027701616, 
            0.014293665066361427`, -0.012302086688578129`, 
            0.002049546455964446, 
            0.00405151629820466, -0.013976098969578743`, \
-0.008936171419918537, -0.0047201113775372505`, -0.017731426283717155`, \
-0.003595456015318632}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {6, 4}, {5, 8}, {-4, -6}, {
            7, 13}, {11, -8}, {10, 9}, {-9, 17}, {12, -11}, {-1, 
            18}, {-5, -13}, {16, 14}, {
            15, -15}, {-14, -16}, {-7, -17}, {-10, -18}, {-12, -19}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 2, 1, 7, 10, 1, 4, 10, 7, 9, 8}], 
          "NumericalThresholds" -> {-0.6856121122837067, 1.2675729393959045`, 
           1.3724036812782288`, 
           0.8957436382770538, -0.024030694738030434`, -0.24953028559684753`, \
-0.013169657438993454`, -0.024030190892517567`, 
           0.8957438170909882, -0.2256993055343628, -0.2239602953195572}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.009741265326738358, 
            0.0247037410736084, -0.00917932577431202, 
            0.009653312154114246, -0.01168991532176733, \
-0.010400380939245224`, -0.001284157857298851, 0.0035255220718681812`, 
            0.000859687221236527, 0.001426689326763153, 
            0.0007607691804878414, -0.008021092973649502}], "Children" -> 
          RawArray["Integer16",{{10, 2}, {3, 7}, {4, -4}, {5, 9}, {6, 
            8}, {-2, -7}, {-3, -8}, {-6, -9}, {-5, 
            11}, {-1, -11}, {-10, -12}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]]}, 
      "ClassNumber" -> 1, "IterationsNumber" -> 50, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f2f5f6)" -> 
           Association[
            "Type" -> "NominalVector", "Weight" -> 3, "SetSize" -> {2, 2, 4}],
            "(f1f3f4)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 3]], "Output" -> 
         Association[
          "((f1f3f4)(f2f5f6))" -> 
           Association[
            "Type" -> "NumericalVector", "Weight" -> 6.000000000000001]], 
         "Processors" -> {
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f2f5f6)" -> 
               Association[
                "Type" -> "NominalVector", "Weight" -> 3, 
                 "SetSize" -> {2, 2, 4}]], "Index" -> {
               Association[1 -> 1, 2 -> 2], 
               Association[1 -> 1, 2 -> 2], 
               Association[1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4]}, "Output" -> 
             Association[
              "(f2f5f6)" -> 
               Association["Weight" -> 3, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 
                0.}, {-0.013169222511351109`, -0.1673232614994049}, \
{-0.685611367225647, -0.2558041214942932}}], 
               RawArray["Real32",{{0., 0.}, {0.5072333812713623, 
                0.8957431316375732}, {-0.5651206374168396, 
                0.06503215432167053}}], 
               RawArray["Real32",{{0., 0., 0.}, {-0.32355788350105286`, 
                0.475032240152359, 
                0.9275431036949158}, {-0.22396010160446167`, \
-0.4085097908973694, -0.024030836299061775`}, {-0.24784716963768005`, 
                0.4278862476348877, 0.7773063778877258}, {
                0.5165566802024841, -0.2257002592086792, 
                0.7317641973495483}}]}, "Version" -> {12.1, 1}, "ID" -> 
             4077317464470873943]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f3f4)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 3], 
               "(f2f5f6)" -> 
               Association["Weight" -> 3, "Type" -> "NumericalVector"]], 
             "Spans" -> {
               Span[1, 3], 
               Span[4, 10]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f1f3f4)(f2f5f6))" -> 
               Association[
                "Weight" -> {1., 1., 1., 0.42857142857142855`, 
                  0.42857142857142855`, 0.42857142857142855`, 
                  0.42857142857142855`, 0.42857142857142855`, 
                  0.42857142857142855`, 0.42857142857142855`}, "Type" -> 
                 "NumericalVector"]], "Version" -> {12.1, 1}, "ID" -> 
             8053526099925594492]], 
           MachineLearning`MLProcessor["DensifyNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "((f1f3f4)(f2f5f6))" -> 
               Association[
                "Weight" -> {1., 1., 1., 0.42857142857142855`, 
                  0.42857142857142855`, 0.42857142857142855`, 
                  0.42857142857142855`, 0.42857142857142855`, 
                  0.42857142857142855`, 0.42857142857142855`}, "Type" -> 
                 "NumericalVector"]], "Version" -> {12.1, 1}, "ID" -> 
             2898414261657576438, "Output" -> 
             Association[
              "((f1f3f4)(f2f5f6))" -> 
               Association[
                "Type" -> "NumericalVector", "Weight" -> 
                 6.000000000000001]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 6.000000000000001], 
             "Key" -> "((f1f3f4)(f2f5f6))", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Impossible", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], 
      "DistributionData" -> {NormalDistribution, {0.13952674840264395`}}, 
      "Method" -> "GradientBoostedTrees", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "BoostingMethod" -> 
        Association["Value" -> "Gradient", "Options" -> Association[]], 
        MaxTrainingRounds -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "LeavesNumber" -> 
        Association["Value" -> 250, "Options" -> Association[]], 
        "LearningRate" -> 
        Association["Value" -> 0.2, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "MaxBinNumber" -> 
        Association["Value" -> 255, "Options" -> Association[]], 
        "ThreadNumber" -> 
        Association["Value" -> 6, "Options" -> Association[]], "MaxDepth" -> 
        Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
        Association["Value" -> 15, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFrequency" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "MinGainToSplit" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], "LossFunction" -> 
        Association[
         "Value" -> "MeanSquaredError", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[7505], "TrainingFunction" -> Predict, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 9.373254961305344, "PreprocessingTime" -> 
      1.0987558`7.492446174093247, "LossName" -> "StandardDeviation", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[11.838063560112257`, 1.4123764607775144`], 
         "StandardDeviation" -> Around[4468.409861127608, 907.3482963917182], 
         "EvaluationTime" -> 0.000056313172317671004`, "TestSize" -> 89, 
         "ModelMemory" -> 142080, "ModelUtility" -> -9.137767987150978, 
         "TrainingSize" -> 357, "TrainingTime" -> 0.07943282347242814, 
         "TrainingMemory" -> 585904, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[11.838063560112257`, 0.9987009730040363]}, 
         "StandardDeviationHistory" -> {
           Around[4468.409861127608, 641.5921332766453]}, 
         "Configuration" -> {
          "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
           MaxTrainingRounds -> 50, "LeavesNumber" -> 250, "LearningRate" -> 
           0.2, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
           "ThreadNumber" -> 6, "MaxDepth" -> 6, "LeafSize" -> 15, 
           "FeatureFraction" -> 1, "BaggingFraction" -> 1, "BaggingFrequency" -> 
           0, "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
           "L2Regularization" -> 0, "LossFunction" -> "MeanSquaredError"}, 
         "FinalTrainingSize" -> 446], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
          "TrainingTime", "TrainingMemory", "ExperimentCount", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 17], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 24301142759555]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[11.385272676461579`, 0.01476171125672135], 
              "StandardDeviation" -> 
              Around[11694.049560608197`, 762.6966561616272], 
              "EvaluationTime" -> 0.00001790077753714996, "TestSize" -> 200, 
              "ModelMemory" -> 27928, "ModelUtility" -> -10.072953318936927`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 446464, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[11.385272676461579`, 0.010438106131545458`]}, 
              "StandardDeviationHistory" -> {
                Around[11694.049560608197`, 539.3079775601911]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.38314923625471, 0.07940624551722904], 
              "StandardDeviation" -> 
              Around[7714.523310330052, 736.9921190214341], "EvaluationTime" -> 
              0.00002578769987568629, "TestSize" -> 200, "ModelMemory" -> 
              27928, "ModelUtility" -> -9.662944429904115, "TrainingSize" -> 
              60, "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              88128, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.38314923625471, 0.05614869467379654]}, 
              "StandardDeviationHistory" -> {
                Around[7714.523310330052, 521.1321250410991]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.090921264037936`, 0.08377441422195343], 
              "StandardDeviation" -> 
              Around[5760.909994200937, 652.0373206048201], "EvaluationTime" -> 
              0.000017807788679338343`, "TestSize" -> 89, "ModelMemory" -> 
              27928, "ModelUtility" -> -9.374392999716234, "TrainingSize" -> 
              357, "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              174224, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.090921264037936`, 0.05923745638627402]}, 
              "StandardDeviationHistory" -> {
                Around[5760.909994200937, 461.0600109863753]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000017807788679338343`, "ModelMemory" -> 
             27928, "StandardDeviation" -> 
             Around[5760.909994200937, 652.0373206048201], "TrainingMemory" -> 
             174224, "TrainingTime" -> 0.028317005761084483`], "Index" -> 1], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 6], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[11.604280321561841`, 0.0176519813894186], 
              "StandardDeviation" -> 
              Around[11566.180351870926`, 1198.9052862072351`], 
              "EvaluationTime" -> 0.00002048389811985346, "TestSize" -> 200, 
              "ModelMemory" -> 31824, "ModelUtility" -> -10.06951841422152, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 97576, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[11.604280321561841`, 0.012481835741836625`]}, 
              "StandardDeviationHistory" -> {
                Around[11566.180351870926`, 847.7540578775345]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.786658004667375`, 0.06514919250997397], 
              "StandardDeviation" -> 
              Around[11392.702158354443`, 936.2255497823239], 
              "EvaluationTime" -> 0.000017498166805773083`, "TestSize" -> 300,
               "ModelMemory" -> 31824, "ModelUtility" -> -10.050188721622792`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 79984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[10.786658004667375`, 0.046067435812630425`]}, 
              "StandardDeviationHistory" -> {
                Around[11392.702158354443`, 662.0114349711848]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[9.846025406085559, 0.2764702543389291], 
              "StandardDeviation" -> 
              Around[4528.498648854347, 898.8327077912301], "EvaluationTime" -> 
              0.00007089408364945989, "TestSize" -> 89, "ModelMemory" -> 
              134768, "ModelUtility" -> -9.150245356256507, "TrainingSize" -> 
              357, "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 
              464416, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[9.846025406085559, 0.19549399163942627`]}, 
              "StandardDeviationHistory" -> {
                Around[4528.498648854347, 635.5707028314453]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007089408364945989, "ModelMemory" -> 
             134768, "StandardDeviation" -> 
             Around[4528.498648854347, 898.8327077912301], "TrainingMemory" -> 
             464416, "TrainingTime" -> 0.09467441529664646], "Index" -> 2], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[10.78293726958099, 0.07527228065491223], 
              "StandardDeviation" -> 
              Around[11379.625644255844`, 961.0231298615176], 
              "EvaluationTime" -> 0.0000501187233627272, "TestSize" -> 100, 
              "ModelMemory" -> 111616, "ModelUtility" -> -10.049496844532335`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 211936, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[10.78293726958099, 0.05322554008646541]}, 
              "StandardDeviationHistory" -> {
                Around[11379.625644255844`, 679.5459720021992]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.392702979028611`, 0.07815278313316007], 
              "StandardDeviation" -> 
              Around[7742.957815438444, 782.2981487840049], "EvaluationTime" -> 
              0.000039810717055349695`, "TestSize" -> 200, "ModelMemory" -> 
              111616, "ModelUtility" -> -9.66771213013811, "TrainingSize" -> 
              60, "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
              174704, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.392702979028611`, 0.05526236292205911]}, 
              "StandardDeviationHistory" -> {
                Around[7742.957815438444, 553.1683259148525]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[9.951361908057438, 0.10743876346508176`], 
              "StandardDeviation" -> 
              Around[5070.41941299523, 739.3606434831206], "EvaluationTime" -> 
              0.00004473114275881988, "TestSize" -> 89, "ModelMemory" -> 
              127552, "ModelUtility" -> -9.25309503207324, "TrainingSize" -> 
              357, "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
              304296, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[9.951361908057438, 0.0759706782084568]}, 
              "StandardDeviationHistory" -> {
                Around[5070.41941299523, 522.8069247493639]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004473114275881988, "ModelMemory" -> 
             127552, "StandardDeviation" -> 
             Around[5070.41941299523, 739.3606434831206], "TrainingMemory" -> 
             304296, "TrainingTime" -> 0.035648998138551095`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[10.778968364410705`, 0.07062827671225713], 
              "StandardDeviation" -> 
              Around[11660.25550964196, 710.7787517359874], "EvaluationTime" -> 
              0.000015848931924611128`, "TestSize" -> 300, "ModelMemory" -> 
              21312, "ModelUtility" -> -10.069216432430757`, "TrainingSize" -> 
              10, "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
              95488, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.778968364410705`, 0.04994173340675693]}, 
              "StandardDeviationHistory" -> {
                Around[11660.25550964196, 502.5964752758262]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.748342587942043`, 0.09153576974645958], 
              "StandardDeviation" -> 
              Around[11302.829227199776`, 1150.8279013385256`], 
              "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 200, 
              "ModelMemory" -> 25664, "ModelUtility" -> -10.04612512952194, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 162936, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[10.748342587942043`, 0.06472556350885199]}, 
              "StandardDeviationHistory" -> {
                Around[11302.829227199776`, 813.7582130151545]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.51250618275601, 0.08656853722274024], 
              "StandardDeviation" -> 
              Around[9458.80446515342, 1302.5133037203577`], "EvaluationTime" -> 
              0.000028223443050669432`, "TestSize" -> 89, "ModelMemory" -> 
              51040, "ModelUtility" -> -9.875030383524551, "TrainingSize" -> 
              357, "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
              1326088, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.51250618275601, 0.061213199707599676`]}, 
              "StandardDeviationHistory" -> {
                Around[9458.80446515342, 921.015989646358]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000028223443050669432`, "ModelMemory" -> 
             51040, "StandardDeviation" -> 
             Around[9458.80446515342, 1302.5133037203577`], "TrainingMemory" -> 
             1326088, "TrainingTime" -> 0.03769056359755466], "Index" -> 4], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[13.666247956215752`, 0.565921346619014], 
              "StandardDeviation" -> 
              Around[13113.154950728374`, 851.7034252164533], 
              "EvaluationTime" -> 0.000014762372655721304`, "TestSize" -> 300,
               "ModelMemory" -> 27928, "ModelUtility" -> -10.1874356818806, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 77032, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[13.666247956215752`, 0.4001668218125275]}, 
              "StandardDeviationHistory" -> {
                Around[13113.154950728374`, 602.2452675303637]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.189312296955022`, 0.08791486043924154], 
              "StandardDeviation" -> 
              Around[6469.944747810855, 601.2073002982947], "EvaluationTime" -> 
              0.00002253574373239229, "TestSize" -> 200, "ModelMemory" -> 
              27928, "ModelUtility" -> -9.48649495889949, "TrainingSize" -> 
              60, "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              88320, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.189312296955022`, 0.06216519398365663]}, 
              "StandardDeviationHistory" -> {
                Around[6469.944747810855, 425.11775893978125`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.099790415665245`, 0.0899716087569179], 
              "StandardDeviation" -> 
              Around[5841.216659405265, 648.8323919131166], "EvaluationTime" -> 
              0.000028223443050669432`, "TestSize" -> 89, "ModelMemory" -> 
              27928, "ModelUtility" -> -9.387824953888705, "TrainingSize" -> 
              357, "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              174096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.099790415665245`, 0.0636195346662796]}, 
              "StandardDeviationHistory" -> {
                Around[5841.216659405265, 458.7937841752523]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000028223443050669432`, "ModelMemory" -> 
             27928, "StandardDeviation" -> 
             Around[5841.216659405265, 648.8323919131166], "TrainingMemory" -> 
             174096, "TrainingTime" -> 0.02367103399038563], "Index" -> 5], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[10.719008942076055`, 0.08301572967737852], 
              "StandardDeviation" -> 
              Around[10698.924051105068`, 1104.9478315143292`], 
              "EvaluationTime" -> 0.000014219093021276394`, "TestSize" -> 200,
               "ModelMemory" -> 27928, "ModelUtility" -> -9.991501406133287, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 88256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[10.719008942076055`, 0.05870098540002367]}, 
              "StandardDeviationHistory" -> {
                Around[10698.924051105068`, 781.316104521153]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.370533299171148`, 0.09754985856951097], 
              "StandardDeviation" -> 
              Around[7349.792921881061, 1039.451906454489], "EvaluationTime" -> 
              0.000017807788679338343`, "TestSize" -> 89, "ModelMemory" -> 
              27928, "ModelUtility" -> -9.623478051779607, "TrainingSize" -> 
              357, "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
              174080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.370533299171148`, 0.06897816649828985]}, 
              "StandardDeviationHistory" -> {
                Around[7349.792921881061, 735.0034917712541]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[11.551994082524239`, 0.011384011673849849`], 
              "StandardDeviation" -> 
              Around[12367.54399963271, 536.0626428334472], "EvaluationTime" -> 
              0.000014219093021276394`, "TestSize" -> 400, "ModelMemory" -> 
              27928, "ModelUtility" -> -10.124620471011118`, "TrainingSize" -> 
              10, "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
              77096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[11.551994082524239`, 0.008049711851686047]}, 
              "StandardDeviationHistory" -> {
                Around[12367.54399963271, 379.0535298883127]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014219093021276394`, "ModelMemory" -> 
             27928, "StandardDeviation" -> 
             Around[12367.54399963271, 536.0626428334472], "TrainingMemory" -> 
             77096, "TrainingTime" -> 0.04801629338664462], "Index" -> 6], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[10.14704204740797, 0.05764311858177829], 
              "StandardDeviation" -> 
              Around[6164.1484428069225`, 436.5168392177535], 
              "EvaluationTime" -> 0.000012589254117941663`, "TestSize" -> 300,
               "ModelMemory" -> 27928, "ModelUtility" -> -9.433727071189065, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 88192, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[10.14704204740797, 0.04075984003791571]}, 
              "StandardDeviationHistory" -> {
                Around[6164.1484428069225`, 308.66401711299136`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.943437641971057`, 0.02099194007494158], 
              "StandardDeviation" -> 
              Around[11825.239512230206`, 561.4367452752998], 
              "EvaluationTime" -> 0.000013675813386831484`, "TestSize" -> 300,
               "ModelMemory" -> 27928, "ModelUtility" -> -10.080600301762654`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              77096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.943437641971057`, 0.014843543177252833`]}, 
              "StandardDeviationHistory" -> {
                Around[11825.239512230206`, 396.9957297914688]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.097494144646081`, 0.08962712019902139], 
              "StandardDeviation" -> 
              Around[5826.829959649143, 649.692523210302], "EvaluationTime" -> 
              0.000017807788679338343`, "TestSize" -> 89, "ModelMemory" -> 
              27928, "ModelUtility" -> -9.38544147998383, "TrainingSize" -> 
              357, "TrainingTime" -> 0.01, "TrainingMemory" -> 174080, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.097494144646081`, 0.06337594447094981]}, 
              "StandardDeviationHistory" -> {
                Around[5826.829959649143, 459.40198884820296`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000017807788679338343`, "ModelMemory" -> 
             27928, "StandardDeviation" -> 
             Around[5826.829959649143, 649.692523210302], "TrainingMemory" -> 
             174080, "TrainingTime" -> 0.020436279546122364`], "Index" -> 7], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[11.830243726085866`, 0.277883555547199], 
              "StandardDeviation" -> 
              Around[14110.10286640524, 973.91472530878], "EvaluationTime" -> 
              0.00001885405921651873, "TestSize" -> 200, "ModelMemory" -> 
              27928, "ModelUtility" -> -10.261514495025732`, "TrainingSize" -> 
              10, "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
              77032, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[11.830243726085866`, 0.19649334650765304`]}, 
              "StandardDeviationHistory" -> {
                Around[14110.10286640524, 688.661706563272]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.187144547762587`, 0.08682199358993073], 
              "StandardDeviation" -> 
              Around[6455.514326994925, 596.48230514236], "EvaluationTime" -> 
              0.00002048389811985346, "TestSize" -> 200, "ModelMemory" -> 
              27928, "ModelUtility" -> -9.484159152769212, "TrainingSize" -> 
              60, "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              88256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.187144547762587`, 0.06139242042357498]}, 
              "StandardDeviationHistory" -> {
                Around[6455.514326994925, 421.7766828239462]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.099332047651352`, 0.08985430441848224], 
              "StandardDeviation" -> 
              Around[5838.519736718871, 648.5554575633032], "EvaluationTime" -> 
              0.000028223443050669432`, "TestSize" -> 89, "ModelMemory" -> 
              27928, "ModelUtility" -> -9.38736390015218, "TrainingSize" -> 
              357, "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
              174048, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.099332047651352`, 0.06353658797310915]}, 
              "StandardDeviationHistory" -> {
                Around[5838.519736718871, 458.59796201855585`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000028223443050669432`, "ModelMemory" -> 
             27928, "StandardDeviation" -> 
             Around[5838.519736718871, 648.5554575633032], "TrainingMemory" -> 
             174048, "TrainingTime" -> 0.027743348561182775`], "Index" -> 8], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[10.18956762453252, 0.08801811296452487], 
              "StandardDeviation" -> 
              Around[6471.6568777946395`, 601.6590981330382], 
              "EvaluationTime" -> 0.00002048389811985346, "TestSize" -> 200, 
              "ModelMemory" -> 27928, "ModelUtility" -> -9.486768430621876, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 88192, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[10.18956762453252, 0.06223820454445911]}, 
              "StandardDeviationHistory" -> {
                Around[6471.6568777946395`, 425.43722825245374`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[27.537337053052727`, 2.6500920194156214`], 
              "StandardDeviation" -> 
              Around[13002.487483707702`, 893.3765064916035], 
              "EvaluationTime" -> 0.00001885405921651873, "TestSize" -> 200, 
              "ModelMemory" -> 27928, "ModelUtility" -> -10.179702099604532`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 77032, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[27.537337053052727`, 1.8738980376971375`]}, 
              "StandardDeviationHistory" -> {
                Around[13002.487483707702`, 631.7125858929605]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.099776438905698`, 0.08994378362134967], 
              "StandardDeviation" -> 
              Around[5841.149868382088, 648.698021956021], "EvaluationTime" -> 
              0.000017807788679338343`, "TestSize" -> 89, "ModelMemory" -> 
              27928, "ModelUtility" -> -9.387809256651117, "TrainingSize" -> 
              357, "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              174080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.099776438905698`, 0.06359985932423187]}, 
              "StandardDeviationHistory" -> {
                Around[5841.149868382088, 458.6987702674023]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000017807788679338343`, "ModelMemory" -> 
             27928, "StandardDeviation" -> 
             Around[5841.149868382088, 648.698021956021], "TrainingMemory" -> 
             174080, "TrainingTime" -> 0.02367103399038563], "Index" -> 9], 
         Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1711.5419319581322`, 206.47294102969227`], 
              "StandardDeviation" -> 
              Around[22182.506624774014`, 1327.0142388563258`], 
              "EvaluationTime" -> 0.000015848931924611128`, "TestSize" -> 300,
               "ModelMemory" -> 27928, "ModelUtility" -> -10.712110838560811`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 79128, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1711.5419319581322`, 145.99841673362553`]}, 
              "StandardDeviationHistory" -> {
                Around[22182.506624774014`, 938.3407670264128]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.158289482810313`, 0.06732548630854941], 
              "StandardDeviation" -> 
              Around[6250.60223027563, 478.63268709987346`], "EvaluationTime" -> 
              0.000017852350119216196`, "TestSize" -> 300, "ModelMemory" -> 
              27928, "ModelUtility" -> -9.448789848868545, "TrainingSize" -> 
              60, "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
              88256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.158289482810313`, 0.04760630791545734]}, 
              "StandardDeviationHistory" -> {
                Around[6250.60223027563, 338.4444187458595]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.099774905590147`, 0.08994083141917657], 
              "StandardDeviation" -> 
              Around[5841.142497256003, 648.6839155704935], "EvaluationTime" -> 
              0.000028223443050669432`, "TestSize" -> 89, "ModelMemory" -> 
              27928, "ModelUtility" -> -9.387807560049428, "TrainingSize" -> 
              357, "TrainingTime" -> 0.01, "TrainingMemory" -> 174048, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.099774905590147`, 0.06359777180205584]}, 
              "StandardDeviationHistory" -> {
                Around[5841.142497256003, 458.68879554653773`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000028223443050669432`, "ModelMemory" -> 
             27928, "StandardDeviation" -> 
             Around[5841.142497256003, 648.6839155704935], "TrainingMemory" -> 
             174048, "TrainingTime" -> 0.020436279546122364`], "Index" -> 10],
          Association[
          "Value" -> "LinearRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[10.788209662348844`, 0.06345600884040122], 
              "StandardDeviation" -> 
              Around[11386.816735308515`, 928.9999697165067], 
              "EvaluationTime" -> 0.000013675813386831484`, "TestSize" -> 300,
               "ModelMemory" -> 27928, "ModelUtility" -> -10.049555026449891`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 88280, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[10.788209662348844`, 0.04487017415808121]}, 
              "StandardDeviationHistory" -> {
                Around[11386.816735308515`, 656.9021783086391]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[10.690007995480368`, 0.0990680518281835], 
              "StandardDeviation" -> 
              Around[10079.697686046959`, 1442.5197292271025`], 
              "EvaluationTime" -> 0.000022418677696279538`, "TestSize" -> 89, 
              "ModelMemory" -> 27928, "ModelUtility" -> -9.939656941482482, 
              "TrainingSize" -> 357, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 174048, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[10.690007995480368`, 0.0700516912466489]}, 
              "StandardDeviationHistory" -> {
                Around[10079.697686046959`, 1020.0154825318665`]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[11.57090321008157, 0.011576266601034696`], 
              "StandardDeviation" -> 
              Around[12483.392534589198`, 548.9380080531804], 
              "EvaluationTime" -> 0.000016874854730880543`, "TestSize" -> 400,
               "ModelMemory" -> 27928, "ModelUtility" -> -10.134068757389482`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 77160, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[11.57090321008157, 0.008185656614414978]}, 
              "StandardDeviationHistory" -> {
                Around[12483.392534589198`, 388.15778794543945`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000016874854730880543`, "ModelMemory" -> 
             27928, "StandardDeviation" -> 
             Around[12483.392534589198`, 548.9380080531804], "TrainingMemory" -> 
             77160, "TrainingTime" -> 0.04337032161594576], "Index" -> 11], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 250], "LearningRate" -> 
             Association["Value" -> 0.2], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 6], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> "MeanSquaredError"]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[10.850822860681951`, 0.2880527577841336], 
              "StandardDeviation" -> 
              Around[8005.136791275474, 754.6749317111936], "EvaluationTime" -> 
              0.0000630957344480193, "TestSize" -> 200, "ModelMemory" -> 
              128792, "ModelUtility" -> -9.699687790597435, "TrainingSize" -> 
              60, "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
              294272, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[10.850822860681951`, 0.20368405836864692`]}, 
              "StandardDeviationHistory" -> {
                Around[8005.136791275474, 533.6357618044797]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[11.838063560112257`, 1.4123764607775144`], 
              "StandardDeviation" -> 
              Around[4468.409861127608, 907.3482963917182], "EvaluationTime" -> 
              0.000056313172317671004`, "TestSize" -> 89, "ModelMemory" -> 
              142080, "ModelUtility" -> -9.137767987150978, "TrainingSize" -> 
              357, "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
              585904, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[11.838063560112257`, 0.9987009730040363]}, 
              "StandardDeviationHistory" -> {
                Around[4468.409861127608, 641.5921332766453]}], 
             Association[
             "MeanCrossEntropy" -> 
              Around[11.603168335986306`, 0.014233585414398937`], 
              "StandardDeviation" -> 
              Around[11392.702158354443`, 936.2255497823239], 
              "EvaluationTime" -> 0.000023396783926626793`, "TestSize" -> 300,
               "ModelMemory" -> 31824, "ModelUtility" -> -10.050188727521409`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 71104, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[11.603168335986306`, 0.010064664767119423`]}, 
              "StandardDeviationHistory" -> {
                Around[11392.702158354443`, 662.0114349711848]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000023396783926626793`, "ModelMemory" -> 
             31824, "StandardDeviation" -> 
             Around[11392.702158354443`, 936.2255497823239], "TrainingMemory" -> 
             71104, "TrainingTime" -> 0.12080495974649288`], "Index" -> 12]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "GradientBoostedTrees", "LinearRegression", "NearestNeighbors", 
             "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
              "TrainingTime", "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 3], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 12], 
        Association["ID" -> 24296847792259]], "MaxTrainingSize" -> 446, 
      "PreprocessorEvaluationTime" -> 4.977294921875`4.*^-6, 
      "PreprocessorMemory" -> 65424, "InputDimension" -> 6, "OutputDimension" -> 
      1, "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
      True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
      "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
      "LastReportingTime" -> 3.8153219866721137`17.334106184434898*^9, 
      "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.19599999999999998`, 
          "ElapsedTimes" -> 0.3455498, "ExperimentCounts" -> 12], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.2799999999999999, 
          "ElapsedTimes" -> 0.3208921, "ExperimentCounts" -> 12], 
         Association[
         "TrainingSizes" -> 357, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.467844, "ExperimentCounts" -> 12]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association["ID" -> 24309732694147]]], "AnomalyDetector" -> None, 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, "ID" -> 
           2677209384536529696], "f2" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, "ID" -> 
           2094725855374892613], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.8}, "ID" -> 
           6072946621961155708], "f4" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4631297986907657407], "f5" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"no"}, "ID" -> 
           6304035131587355891], "f6" -> 
         Association[
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"southwest"}, "ID" -> 
           8778114707174829320]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 2.753124, 
      "MaxTrainingMemory" -> 22263176, "DataMemory" -> 142864, 
      "FunctionMemory" -> 414944, "LanguageVersion" -> {12.1, 1}, "Date" -> 
      DateObject[{2020, 11, 25, 19, 39, 47.0929712`9.425530952875286}, 
        "Instant", "Gregorian", 0.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.81532081791896*^9, 3.815321836909006*^9, 
  3.815321987151951*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"9c078784-cbad-490c-a132-2142ee92c45a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 13", "Subsection",
 CellChangeTimes->{{3.7802070890041666`*^9, 3.7802070919894156`*^9}, {
  3.8144381489203005`*^9, 
  3.8144381499146757`*^9}},ExpressionUUID->"bb874de3-0a91-43d3-9c19-\
70935fc7ad7d"],

Cell[TextData[{
 "Create a predictor measurements object (named ",
 StyleBox["insurancepm", "CodeText"],
 ")to analyse the performance of the trained model on the test data."
}], "Text",
 CellChangeTimes->{{3.77754345892064*^9, 3.777543477576811*^9}, {
  3.777543515575591*^9, 3.77754355424835*^9}, {3.7802074135012145`*^9, 
  3.780207438251298*^9}, {3.814100538270172*^9, 
  3.8141005403017387`*^9}},ExpressionUUID->"fa858e39-8343-4e73-8cc2-\
dcf032cd3070"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"insuranceperformance", " ", "=", " ", 
  RowBox[{"PredictorMeasurements", "[", 
   RowBox[{"insurancepredictor", ",", " ", "testingdata"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.815320612459282*^9, 3.815320628457158*^9}, {
  3.815320842908495*^9, 3.8153209060563545`*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"05aa786f-ca30-42e8-b8a5-c0ce8f883203"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{{}, {}, {
                GrayLevel[0.6], 
                Thickness[0.03], 
                Opacity[1.], 
                Dashing[{Small, Small}], 
                
                LineBox[{{2.409616047529911*^-7, 2.409616047529911*^-7}, {
                 11.803066020732206`, 11.803066020732206`}}]}}, {{}, {{}, {
                 GrayLevel[0.4], 
                 PointSize[0.09], 
                 AbsoluteThickness[1.6], 
                 
                 PointBox[{{1.6948167795276383`, 2.9052679959834418`}, {
                  2.227816320451859, 2.584653237430766}, {3.043099335090081, 
                  4.798822972025658}, {3.5728355469237116`, 
                  5.9507424155697155`}, {4.158566334344331, 
                  5.2097676165465385`}, {4.824808988689111, 
                  7.23346088027902}, {6.88649660338492, 5.297021421229134}, {
                  7.819072150835878, 6.533166043611269}, {8.437306856915493, 
                  8.81724006216815}, {8.604907881861761, 
                  11.302704526196452`}}]}, {}}, {}}}, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Predictor: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["892", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{{}, {}, {
                GrayLevel[0.6], 
                Thickness[0.03], 
                Opacity[1.], 
                Dashing[{Small, Small}], 
                
                LineBox[{{2.409616047529911*^-7, 2.409616047529911*^-7}, {
                 11.803066020732206`, 11.803066020732206`}}]}}, {{}, {{}, {
                 GrayLevel[0.4], 
                 PointSize[0.09], 
                 AbsoluteThickness[1.6], 
                 PointBox[{{1.6948167795276383`, 2.9052679959834418`}, {
                  2.227816320451859, 2.584653237430766}, {3.043099335090081, 
                  4.798822972025658}, {3.5728355469237116`, 
                  5.9507424155697155`}, {4.158566334344331, 
                  5.2097676165465385`}, {4.824808988689111, 
                  7.23346088027902}, {6.88649660338492, 5.297021421229134}, {
                  7.819072150835878, 6.533166043611269}, {8.437306856915493, 
                  8.81724006216815}, {8.604907881861761, 
                  11.302704526196452`}}]}, {}}, {}}}, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Predictor: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["892", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"StandardDeviation: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   
                   TemplateBox[{"5024.", "242."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                   Around[5024.374859413418, 242.47201460875885`]], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorMeasurementsObject[
   Association["Model" -> PredictorFunction[
      Association[
      "ExampleNumber" -> 446, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical"], "f2" -> 
              Association["Type" -> "Nominal"], "f3" -> 
              Association["Type" -> "Numerical"], "f4" -> 
              Association["Type" -> "Numerical"], "f5" -> 
              Association["Type" -> "Nominal"], "f6" -> 
              Association["Type" -> "Nominal"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Nominal", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Nominal", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 6]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Nominal", "Numerical", "Numerical", 
                    "Nominal", "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Nominal", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Nominal", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
            Association[
             "(f1f3f4)" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 3], 
              "(f2f5f6)" -> 
              Association["Type" -> "NominalVector", "Weight" -> 3]], 
            "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f3f4)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 3], 
                  "(f2f5f6)" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 3]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f3" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f1f3f4)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 3]], 
                    "Version" -> {12.1, 1}, "ID" -> 6665390927393525173]], 
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f2" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                    "f5" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                    "f6" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f2f5f6)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]], 
                    "Version" -> {12.1, 1}, "ID" -> 8299490119381043207]]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "(f1f3f4)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 3], 
                  "(f2f5f6)" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 3]], 
                "Output" -> 
                Association[
                 "(f1f3f4)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 3], 
                  "(f2f5f6)" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 3]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "(f1f3f4)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 3]], 
                    "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 446, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {39.09865470852018, 30.31580717488789, 
                    1.0695067264573992`}, "Method" -> "Naive", "VectorLength" -> 
                    3, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {39.09865470852018, 30.31580717488789, 
                    1.0695067264573992`}, 
                    "StandardDeviation" -> {14.48779130319385, 
                    6.072527963964648, 1.208012572581632}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 3]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 3]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                    Association[
                    "Matrix" -> {{0.6891620607724147, 0.263971115478849, 
                    0.6748147184114843}, {
                    0.7132286098481526, -0.08272486481563138, \
-0.6960327196585713}, {-0.12790857706186157`, 
                    0.9609765069626247, -0.2452825900465056}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {39.09865470852018, 30.31580717488789, 
                    1.0695067264573992`}, 
                    "StandardDeviation" -> {14.48779130319385, 
                    6.072527963964648, 1.208012572581632}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 3, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0093254, "MaxTrainingMemory" -> 
                    119520, "DataMemory" -> 11376, "FunctionMemory" -> 22328, 
                    "LanguageVersion" -> {12.1, 1}, "Date" -> 
                    DateObject[{
                    2020, 11, 25, 19, 39, 44.3700966`9.399665243386982}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                    "DimensionReduction", "VectorLength" -> 3, "Output" -> 
                    Association[
                    "(f1f3f4)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 3]], 
                    "Type" -> "NumericalVector", "Version" -> {12.1, 1}, "ID" -> 
                    5772811868333326886]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "(f2f5f6)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]], 
                    "VectorLength" -> 3, "Output" -> 
                    Association[
                    "(f2f5f6)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]], 
                    "Type" -> "NominalVector", "Version" -> {12.1, 1}, "ID" -> 
                    5894247373463295989]]}, "Invertibility" -> "Perfect", 
                "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f3f4)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 3]], 
                "Mean" -> {39.09865470852018, 30.31580717488789, 
                 1.0695067264573992`}, 
                "StandardDeviation" -> {14.48779130319385, 6.072527963964648, 
                 1.208012572581632}, "Output" -> 
                Association[
                 "(f1f3f4)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 3]], 
                "Version" -> {12.1, 1}, "ID" -> 8404960534059901568]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f2f5f6)" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 3]], 
                "Index" -> {
                  Association["female" -> 1, "male" -> 2], 
                  Association["no" -> 1, "yes" -> 2], 
                  Association[
                  "northeast" -> 1, "northwest" -> 2, "southeast" -> 3, 
                   "southwest" -> 4]}, "MissingCode" -> 0, 
                "Version" -> {12.1, 1}, "ID" -> 5366059775514875614, "Output" -> 
                Association[
                 "(f2f5f6)" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 3]]]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Numerical"]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"]], "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.1, 1}, "ID" -> 3452868332436575388]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {12944.402552062782`}, 
                "StandardDeviation" -> {11769.36162488307}, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {12.1, 1}, "ID" -> 3166526630455491285]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Version" -> {12.1, 1}, "ID" -> 3415339320084619631]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "Key" -> "f1", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
         "InverseProcessorFunction" -> (12944.402552062782` + 
          11769.36162488307 #& ), 
         "ProcessorFunction" -> (-1.0998389687249828` + 
          0.00008496637556668969 #& ), "Name" -> "value", 
         "Quantiles" -> {-1.0036989539931946`, 3.999961758198159}], "Prior" -> 
       Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
       "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> Association["Trees" -> {
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 2, 1, 1, 1, 3, 1, 1, 4, 7, 7, 10, 8, 8, 
               1, 8, 8, 2, 7, 1, 5, 1}], 
             "NumericalThresholds" -> {
              9.999999682655224*^-21, -0.01803874969482422, 
              0.26489558815956116`, 1.0303997993469238`, 
              0.2721875458955765, -0.05069320276379585, -0.04177169036120176, \
-1.1171952486038208`, -0.013168849982321262`, 0.8957435786724091, 
              0.8957435190677643, -0.024029985070228577`, \
-0.24784784018993378`, -0.22396079450845718`, -0.42877623438835144`, \
-0.32355694472789764`, -0.22395991533994675`, -0.03172740899026394, 
              0.8957429826259613, 
              0.6182591021060944, -0.16732413321733475`, \
-1.3870283961296082`}, "LeafValues" -> 
             RawArray["Real32",{0.07987561076879501, -0.19267401099205017`, 
               0.43760770559310913`, -0.004681249614804983, 
               0.03323006629943848, 0.5648544430732727, -0.06896790862083435, 
               0.18949593603610992`, -0.16458465158939362`, \
-0.03191787004470825, 
               0.07048641890287399, -0.09081874787807465, \
-0.09792917966842651, -0.07698044925928116, -0.019389310851693153`, \
-0.11698075383901596`, -0.13785013556480408`, -0.014179123565554619`, \
-0.06047910451889038, 
               0.00300682638771832, -0.05680033192038536, \
-0.18656504154205322`, -0.18101784586906433`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {7, 5}, {6, 4}, {13, 
               10}, {-3, -6}, {8, 9}, {-1, -8}, {21, 11}, {12, -10}, {
               14, -11}, {15, -12}, {-7, 16}, {-4, 17}, {-5, 
               19}, {-9, -16}, {-13, -17}, {20, 
               18}, {-18, -19}, {-15, -20}, {-14, -21}, {-2, 
               22}, {-22, -23}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 2, 1, 1, 1, 3, 1, 1, 4, 7, 6, 6, 7, 10, 
               7, 1, 1, 1, 1, 5, 1}], 
             "NumericalThresholds" -> {
              9.999999682655224*^-21, -0.01803874969482422, 
              0.26489558815956116`, 1.0303997993469238`, 
              0.2673739790916443, -0.05069320276379585, \
-0.21024060994386673`, -1.1171952486038208`, -0.013168849982321262`, 
              0.8957435786724091, 0.5072334706783295, 0.5072328150272369, 
              0.8957435190677643, -0.024029985070228577`, 
              0.8957426846027374, -0.5563377439975739, -0.8333925902843475, 
              0.7507074773311615, 
              1.443563461303711, -0.16732413321733475`, -1.3870283961296082`},
              "LeafValues" -> 
             RawArray["Real32",{0.06149821728467941, -0.15412944555282593`, 
               0.34767311811447144`, -0.04340769350528717, 
               0.03513683006167412, 
               0.44971081614494324`, -0.05516457185149193, 
               0.15003234148025513`, -0.1355225294828415, \
-0.02552453987300396, 0.05639888718724251, -0.06099243462085724, 
               0.003959041554480791, -0.07264523953199387, \
-0.1177634671330452, -0.009174245409667492, -0.09666949510574341, \
-0.08451435714960098, -0.04436897486448288, 
               0.006727423518896103, -0.14924228191375732`, \
-0.14480452239513397`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {7, 5}, {6, 4}, {11, 
               10}, {-3, -6}, {8, 9}, {-1, -8}, {20, 13}, {14, -10}, {
               15, -11}, {12, 18}, {-4, -13}, {16, -14}, {-7, 17}, {-5, 
               19}, {-9, -17}, {-15, -18}, {-12, -19}, {-16, -20}, {-2, 
               21}, {-21, -22}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 2, 1, 1, 1, 4, 1, 1, 6, 1, 1, 9, 8, 5, 
               8, 3, 10, 1, 10}], 
             "NumericalThresholds" -> {
              9.999999682655224*^-21, -0.01803874969482422, 
              0.26489558815956116`, 1.0303997993469238`, 
              0.2721875458955765, -0.013168541248887777`, 
              0.27016764879226685`, -1.1171952486038208`, 
              0.5072334706783295, -0.9713696539402008, -0.4164053201675415, \
-0.31710507720708847`, -0.24784784018993378`, -0.2558038979768753, \
-0.22395985573530197`, -0.048535723239183426`, 0.731764942407608, 
              0.6182591021060944, 0.9275423586368561}, "LeafValues" -> 
             RawArray["Real32",{0.05755676329135895, -0.07948650419712067, 
               0.2797450125217438, 0.0019069453701376915`, 
               0.02637745440006256, 
               0.36195117235183716`, -0.018180204555392265`, 
               0.13691943883895874`, -0.039942387491464615`, 
               0.041705172508955, -0.0982637107372284, -0.06688661873340607, \
-0.1245068907737732, -0.05464407056570053, -0.019360661506652832`, \
-0.0026915716007351875`, -0.043973833322525024`, 
               0.0008206742350012064, -0.03859084099531174, \
-0.11351195722818375`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {7, 5}, {6, 4}, {13, 
               9}, {-3, -6}, {8, -7}, {-1, -8}, {12, 10}, {14, -10}, {-9, 
               11}, {-11, -12}, {-2, 19}, {-4, 15}, {-5, 17}, {18, 
               16}, {-16, -17}, {-15, -18}, {-14, -19}, {-13, -20}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 2, 1, 3, 1, 1, 1, 5, 1, 1, 3, 6, 2, 6, 
               7, 6, 1, 8, 1, 1, 5, 4}], 
             "NumericalThresholds" -> {
              9.999999682655224*^-21, -0.01803874969482422, 
              0.26489558815956116`, -0.05069320276379585, \
-0.07084536552429199, 1.0303997993469238`, 
              0.23577813804149628`, -0.2558036595582962, -0.7315489649772644, \
-1.1171952486038208`, -0.8780049085617065, 0.5072334110736847, 
              0.5411784052848816, 0.5072334706783295, 0.895742803812027, 
              0.5072329938411713, -0.4865659177303314, -0.22396039962768555`, \
-0.699399471282959, 
              0.7461511492729187, -0.25580330193042755`, -0.0131692448630929},
              "LeafValues" -> 
             RawArray["Real32",{0.044741686433553696`, -0.10144240409135818`, 
               0.2187511920928955, 
               0.021560896188020706`, -0.08173293620347977, 
               0.2856377959251404, -0.01926327683031559, 0.10784893482923508`,
                0.01580326072871685, -0.06672263890504837, \
-0.04247099906206131, 0.010254159569740295`, 0.06043555215001106, 
               0.02274627424776554, -0.042137984186410904`, \
-0.03876863792538643, -0.09589771181344986, -0.05195484310388565, \
-0.006122948601841927, -0.06163106486201286, -0.03235655277967453, \
-0.09296468645334244, -0.09791195392608643}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {7, 5}, {4, 6}, {10, 
               8}, {-3, -6}, {14, 11}, {-1, -8}, {19, 9}, {-9, -10}, {21, 
               16}, {13, 12}, {-12, -13}, {-7, -14}, {15, 20}, {-4, 18}, {-11,
                17}, {-17, -18}, {-16, -19}, {-5, -20}, {-15, -21}, {-2, 
               22}, {-22, -23}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 2, 1, 2, 4, 1, 1, 1, 1, 6, 1, 9, 7, 9, 
               3, 1, 9, 4, 3}], 
             "NumericalThresholds" -> {
              9.999999682655224*^-21, -0.07255399599671364, 
              0.2067645713686943, 0.5728307664394379, -0.013168614357709885`, 
              1.3750149607658386`, 
              1.5729206800460815`, -0.5607797801494598, -1.1171952486038208`, 
              0.5072326958179474, 0.2721875458955765, -0.22569946199655533`, 
              0.8957426249980927, -0.4085095077753067, -0.876563549041748, \
-0.4164053201675415, -0.31710507720708847`, -0.6856109201908112, \
-0.061055079102516174`}, "LeafValues" -> 
             RawArray["Real32",{0.018741855397820473`, -0.04840491712093353, 
               0.15110614895820618`, 0.007795355748385191, 
               0.19722695648670197`, -0.012853390537202358`, 
               0.05874458700418472, -0.0026652533560991287`, 
               0.07021795213222504, -0.01561401505023241, \
-0.06699663400650024, 0.24747775495052338`, 0.03676944226026535, 
               0.012909968383610249`, -0.04415615275502205, \
-0.02735402248799801, -0.040928807109594345`, -0.0782836377620697, \
-0.026659328490495682`, -0.08687148988246918}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {8, 4}, {5, 6}, {-3, 11}, {
               9, -6}, {12, 7}, {-7, -8}, {-1, -9}, {17, 10}, {-10, 
               16}, {-5, -12}, {14, 13}, {-13, 15}, {-4, 
               18}, {-14, -16}, {-11, -17}, {-2, 
               19}, {-15, -19}, {-18, -20}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 2, 1, 3, 1, 10, 8, 1, 1, 7, 1, 4, 4, 5, 
               1, 2, 1, 8, 9, 9, 2}], 
             "NumericalThresholds" -> {
              9.999999682655224*^-21, -0.01803874969482422, 
              0.34320709109306335`, -0.04882701486349106, 
              0.6863076388835907, -0.024030077271163464`, -0.2478480115532875,
               1.0303997993469238`, 0.27016764879226685`, 
              0.8957435786724091, -1.1171952486038208`, -0.6856111586093903, \
-0.013169885613024235`, -0.16732359677553177`, -0.8333925902843475, \
-0.2026987001299858, -0.150310218334198, 
              0.5165561139583588, -0.22569969296455383`, -0.2257009744644165, \
-0.236492320895195}, "LeafValues" -> 
             RawArray["Real32",{0.02774053066968918, -0.06962932646274567, 
               0.1433180272579193, -0.03654768690466881, 0.008545530028641224,
                0.1969725340604782, -0.007272247690707445, \
-0.06356553733348846, -0.024050956591963768`, 0.07284366339445114, 
               0.0367773212492466, -0.01911817118525505, 
               0.045734114944934845`, -0.008826252073049545, 
               0.010056744329631329`, -0.058941908180713654`, \
-0.021181490272283554`, -0.032327041029930115`, -0.037331026047468185`, 
               0.0028536138124763966`, -0.05908742919564247, \
-0.06548543274402618}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {9, 5}, {4, 8}, {11, 
               6}, {-3, -6}, {-5, 7}, {-7, 18}, {14, 10}, {-1, -10}, {
               12, -11}, {20, 15}, {-9, 13}, {-13, -14}, {16, -15}, {-12, 
               17}, {-4, 19}, {-16, -18}, {-8, -19}, {-17, -20}, {-2, 
               21}, {-21, -22}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 2, 1, 2, 4, 3, 2, 10, 9, 9, 1, 8, 10, 
               3}], "NumericalThresholds" -> {
              9.999999682655224*^-21, -0.07255399599671364, 
              0.2067645713686943, 0.6834334433078766, -0.013168541248887777`, 
              0.7721121609210968, -0.7375942468643188, 
              0.9275425970554352, -0.40850959718227386`, \
-0.40850968658924103`, -1.0094558000564575`, -0.32355697453022003`, 
              0.7773063480854034, -0.050010841339826584`}, "LeafValues" -> 
             RawArray["Real32",{0.013734836131334305`, -0.018938379362225533`,
                0.09829606860876083, 0.011357657611370087`, 
               0.14997351169586182`, 0.004559863358736038, 
               0.02264360710978508, 0.0501280203461647, 
               0.011730018071830273`, -0.013425227254629135`, \
-0.05073489621281624, -0.006566036958247423, -0.03997158631682396, \
-0.03798893839120865, -0.0684155747294426}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {7, 4}, {5, 6}, {-3, -5}, {
               10, -6}, {8, -7}, {-1, -8}, {9, -9}, {-4, 13}, {-2, 11}, {14, 
               12}, {-12, -13}, {-10, -14}, {-11, -15}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 2, 1, 1, 3, 10, 8, 6, 8, 9, 9, 5, 2, 8, 
               5, 9, 2}], 
             "NumericalThresholds" -> {-0.5651198923587799, \
-0.2026987001299858, 0.8548800349235535, 
              0.7507074773311615, -0.04898814111948013, \
-0.024030462838709354`, 0.5165567100048065, 
              0.5072326958179474, -0.32355713844299316`, 
              0.4278861731290817, -0.40850941836833954`, \
-0.16732390969991684`, 
              0.9093018770217896, -0.22396069020032883`, \
-0.16732335835695267`, 0.4750324785709381, 0.4368094950914383}, "LeafValues" -> 
             RawArray["Real32",{0.006669031456112862, -0.009602893143892288, 
               0.06675805151462555, 0.03390520066022873, 0.1412975937128067, 
               0.025300975888967514`, 0.008251756429672241, 
               0.008878865279257298, -0.043088920414447784`, \
-0.021202458068728447`, 0.04990702494978905, -0.023201005533337593`, 
               0.006852658465504646, 0.1060139611363411, 
               0.03925831615924835, -0.04778081923723221, \
-0.01952638290822506, 0.0006940861931070685}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {14, 4}, {5, 10}, {13, -5}, {7, 
               6}, {-6, 9}, {8, -8}, {-2, 16}, {-7, 15}, {11, 12}, {-4, 
               17}, {-11, -13}, {-3, -14}, {-1, -15}, {-10, -16}, {-9, -17}, \
{-12, -18}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 2, 1, 1, 3, 5, 1, 3, 1, 7, 7, 7, 6, 10, 
               4, 4, 3}], 
             "NumericalThresholds" -> {9.999999682655224*^-21, 
              0.5241711437702179, 
              0.4796958863735199, -0.3863624930381775, -0.05069320276379585, \
-0.2558036595582962, -0.7315489649772644, 0.7721121609210968, 
              0.0015616032178513706`, 0.8957423865795135, 0.8957426846027374, 
              0.8957438170909882, -0.565120667219162, 
              0.9275429546833038, -0.6856114566326141, -0.013168823439627886`,
               0.7761906087398529}, "LeafValues" -> 
             RawArray["Real32",{0.010463702492415905`, -0.017449507489800453`,
                0.11080113798379898`, -0.026059752330183983`, 
               0.047002147883176804`, -0.02733837626874447, 
               0.036072321236133575`, -0.036300573498010635`, 
               0.02647692710161209, 0.005430775694549084, 
               0.043703678995370865`, -0.012435819022357464`, 
               0.013778235763311386`, 
               0.07950684428215027, -0.014505619183182716`, \
-0.0338444858789444, -0.046731408685445786`, -0.038548607379198074`}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, 13}, {5, 8}, {-1, -5}, {14, 
               6}, {17, 7}, {-7, 9}, {10, -9}, {-8, -10}, {-4, 11}, {-11, 
               12}, {-12, -13}, {-3, -14}, {15, -15}, {-2, 
               16}, {-16, -17}, {-6, -18}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 2, 1, 3, 3, 2, 1, 4, 6, 5, 4, 7, 3, 1, 
               5, 2, 4, 3}], 
             "NumericalThresholds" -> {
              0.8957421481609344, -0.2026987001299858, 
              0.8847680687904358, -0.47144321724772453`, \
-0.05763893947005272, -1.0171347260475159`, -0.7315489649772644, \
-0.013170139398425817`, 
              0.5072334110736847, -0.1673235222697258, -0.013168869074434042`,
               0.8957435190677643, -0.8803202509880066, -0.484792023897171, \
-0.2558038979768753, 
              0.7420374155044556, -0.6856112778186798, -0.8767273426055908}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.004652636591345072, -0.039834678173065186`,
                0.04090263694524765, 0.008797677233815193, 
               0.0829245075583458, -0.04119489714503288, \
-0.016397951170802116`, -0.006621142849326134, 0.0529567189514637, 
               0.039954621344804764`, -0.008999797515571117, \
-0.0398699976503849, 0.0040398878045380116`, -0.0352109894156456, 
               0.02228582091629505, -0.009536894038319588, \
-0.016670016571879387`, -0.028970105573534966`, -0.017154144123196602`}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {14, 4}, {5, 9}, {-3, -5}, {12, 
               6}, {-6, 7}, {8, 11}, {-7, -9}, {15, 
               10}, {-10, -11}, {-8, -12}, {16, 
               13}, {-13, -14}, {-1, -15}, {-4, 18}, {
               17, -17}, {-2, -18}, {-16, -19}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 1, 4, 2, 1, 2, 10, 5, 1, 4, 3, 3, 3, 3, 
               2}], "NumericalThresholds" -> {0.8957421481609344, 
              0.8894558250904083, -0.013168348465114832`, \
-0.01803874969482422, 1.0234560370445251`, 
              0.4948282092809677, -0.024030694738030434`, \
-0.1673237755894661, -1.0429463982582092`, -0.6856119334697723, \
-0.06728046014904976, -0.882777065038681, -0.05961124785244465, \
-0.050010841339826584`, -0.7772271037101746}, "LeafValues" -> 
             RawArray["Real32",{-0.006444093771278858, -0.02143092453479767, 
               0.07498437166213989, 0.031628452241420746`, 
               0.024733107537031174`, -0.023089034482836723`, 
               0.021114850416779518`, -0.023845870047807693`, 
               0.03128751739859581, 
               0.016522468999028206`, -0.01476372592151165, 
               0.0544002465903759, 
               0.030691111460328102`, -0.021594813093543053`, \
-0.048314712941646576`, 0.010877624154090881`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {4, -3}, {5, -4}, {15, 11}, {7, 
               6}, {12, -7}, {8, 9}, {-2, -9}, {14, 
               10}, {-10, -11}, {-5, -12}, {-6, 
               13}, {-13, -14}, {-8, -15}, {-1, -16}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 1, 2, 4, 1, 3, 10, 1, 5, 2, 2, 5, 10, 
               7}], "NumericalThresholds" -> {-0.5651198923587799, 
              0.8227382898330688, -0.01803874969482422, \
-0.013168348465114832`, 0.34320709109306335`, 
              0.7721121609210968, -0.024031134322285652`, 
              0.5512655973434448, -0.2558038979768753, -0.918034166097641, 
              0.052003927528858185`, -0.25580327212810516`, 
              0.7317648828029633, 0.06503189355134964}, "LeafValues" -> 
             RawArray["Real32",{0.009300559759140015, 0.010312175378203392`, 
               0.06629718840122223, 0.021958906203508377`, 
               0.025302758440375328`, 0.017289096489548683`, 
               0.019964341074228287`, -0.03661130741238594, 
               0.004382014740258455, -0.013281827792525291`, \
-0.004323337227106094, -0.018312476575374603`, 
               0.049144353717565536`, -0.02008073404431343, \
-0.006282841321080923}], "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, -3}, {14, 12}, {5, -5}, {7, 
               6}, {8, -7}, {-2, 10}, {-6, 9}, {-9, -10}, {13, 
               11}, {-11, -12}, {-4, -13}, {-8, -14}, {-1, -15}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 2, 1, 4, 9, 1, 2, 3, 4, 9, 7, 3}], 
             "NumericalThresholds" -> {
              9.999999682655224*^-21, -0.5751381814479828, 
              0.8227382898330688, -0.013168348465114832`, 0.4750327914953232, 
              0.2067645713686943, 0.29540368914604187`, 
              0.7660782039165497, -0.013169035781174898`, -0.4085102528333664,
               0.8957436978816986, -0.05740798078477383}, "LeafValues" -> 
             RawArray["Real32",{-0.0022044465877115726`, 0.00643167644739151, 
               0.010154354386031628`, 0.06558182090520859, 
               0.020242206752300262`, 
               0.016799675300717354`, -0.014195471070706844`, \
-0.004678233992308378, 0.04797185957431793, 
               
               0.015451667830348015`, -0.011923409067094326`, \
-0.03159075230360031, 0.03408235311508179}], "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {12, -4}, {5, -5}, {
               6, -6}, {10, 7}, {9, 8}, {-8, -9}, {-7, -10}, {-2, 
               11}, {-11, -12}, {-3, -13}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 2, 3, 3, 1, 10, 1, 10, 1, 9, 3, 7}], 
             "NumericalThresholds" -> {
              0.8957421481609344, -0.01803874969482422, -0.8880764245986938, \
-0.8853868842124939, 
              1.440644919872284, -0.024031310342252254`, \
-0.35156308114528656`, -0.024030779488384724`, 
              1.2403336763381958`, -0.22570053488016129`, -0.0587638895958662,
               0.8957435190677643}, "LeafValues" -> 
             RawArray["Real32",{0.015518234111368656`, -0.018651898950338364`,
                0.011818422935903072`, 0.02171269804239273, 
               0.022465959191322327`, 
               0.020485268905758858`, -0.030702773481607437`, 
               0.042262833565473557`, -0.006401758641004562, \
-0.002143391640856862, -0.008831036277115345, 
               0.0068839904852211475`, -0.03228215128183365}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {10, 7}, {9, 4}, {-4, 5}, {
               6, -6}, {-5, 8}, {-3, -8}, {-7, -9}, {12, -10}, {-1, 
               11}, {-11, -12}, {-2, -13}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 9, 2, 3, 4, 9, 7, 7, 3, 1, 1, 2, 1, 1}],
              "NumericalThresholds" -> {
              0.8957421481609344, -0.4085095673799515, 
              1.3328883647918701`, -0.8880764245986938, \
-0.013168418779969215`, 0.4750327318906784, 0.8957435190677643, 
              0.8957436978816986, 0.7644379734992981, -0.830431342124939, 
              1.2403336763381958`, 0.25242850184440613`, -1.24230295419693, 
              0.05792777054011822}, "LeafValues" -> 
             RawArray["Real32",{
               0.037924669682979584`, -0.011426937766373158`, \
-0.01043984480202198, 0.030432172119617462`, -0.013817180879414082`, 
               0.021307464689016342`, 0.02278171107172966, 
               0.03456522151827812, -0.011691151186823845`, 
               0.004157515242695808, 
               0.009047463536262512, -0.0017147129401564598`, 
               0.01899532973766327, -0.02443312667310238, \
-0.0005846999119967222}], "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {10, -4}, {11, 5}, {
               6, -6}, {7, -7}, {9, 8}, {-8, -9}, {-5, -10}, {-3, 12}, {
               13, -12}, {14, -13}, {-2, -14}, {-11, -15}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 2, 4, 5, 4, 10, 4, 9, 5, 1, 1, 5, 3, 4, 
               3}], "NumericalThresholds" -> {0.06503302231431007, 
              0.6834334433078766, -0.6856105029582977, -0.1673242375254631, \
-0.013169939164072275`, 0.7317634522914886, -0.013168992474675179`, 
              0.4278862625360489, -0.2558034211397171, 1.170843780040741, 
              0.6223829984664917, -0.25580377876758575`, \
-0.05545971170067787, -0.6856108009815216, -0.06060711853206158}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.008645798079669476, -0.013459533452987671`,
                0.02992510423064232, 0.038773465901613235`, 
               0.02239944413304329, -0.011218927800655365`, \
-0.01944776251912117, 
               0.02444855310022831, -0.0018788125598803163`, \
-0.012665413320064545`, -0.020279178395867348`, 0.021569188684225082`, 
               0.018123310059309006`, 0.014853250235319138`, 
               0.006650220137089491, -0.02844846062362194}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {13, -3}, {9, 4}, {-4, 5}, {-5, 
               6}, {7, 8}, {-6, -8}, {-7, -9}, {10, 15}, {11, -11}, {
               12, -12}, {-2, -13}, {14, -14}, {-1, -15}, {-10, -16}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{1, 1, 2, 9, 9, 8, 7, 8, 3, 3, 5, 10, 6}], 
             "NumericalThresholds" -> {1.3750149607658386`, 
              1.5105779767036438`, 
              1.8030426502227783`, -0.40850959718227386`, \
-0.4085100144147873, -0.22396060079336166`, 0.8957429826259613, 
              0.5165568292140961, 0.7717768549919128, 
              1.5912532806396484`, -0.16732359677553177`, \
-0.024030394852161407`, 0.5072340667247772}, "LeafValues" -> 
             RawArray["Real32",{0.017054220661520958`, 
               0.04688534885644913, -0.003840085119009018, 
               0.02322174794971943, -0.009694655425846577, 
               0.039101120084524155`, -0.021791810169816017`, \
-0.012929962016642094`, 0.020033009350299835`, 0.03668917343020439, 
               0.002828933298587799, 
               0.005429661367088556, -0.0018887144979089499`, \
-0.02673257887363434}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {5, 7}, {
               6, -6}, {-1, 12}, {9, 8}, {13, -9}, {11, 
               10}, {-10, -11}, {-5, -12}, {-7, -13}, {-8, -14}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 7, 3, 2, 7, 7, 10, 9, 6, 3, 6, 5, 1, 
               1}], "NumericalThresholds" -> {-1.0642696619033813`, 
              0.895742267370224, 1.593241810798645, -0.8790672421455383, 
              0.8957425653934479, 0.8957426846027374, 0.7773054540157318, 
              0.4278860241174698, -0.5651197731494904, -0.8823472857475281, \
-0.5651204884052277, -0.25580333173274994`, 
              0.2673739790916443, -0.13735754787921906`}, "LeafValues" -> 
             RawArray[
               "Real32",{-0.001302710035815835, -0.0030816998332738876`, 
               0.021868374198675156`, 
               0.03767254203557968, -0.010944901034235954`, 
               0.024907264858484268`, 
               0.003702561603859067, -0.008912966586649418, 
               0.006775940768420696, -0.017954975366592407`, \
-0.023076709359884262`, 0.026010217145085335`, 
               0.017106283456087112`, -0.02572115883231163, \
-0.009198061190545559}], "Children" -> 
             RawArray["Integer16",{{10, 2}, {3, 4}, {8, -4}, {-3, 5}, {13, 
               6}, {-6, 7}, {-7, -8}, {9, 11}, {12, -10}, {-1, 
               14}, {-9, -12}, {-2, -13}, {-5, -14}, {-11, -15}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{1, 3, 6, 2, 6, 8, 6, 4, 3, 3, 2, 8, 7, 1, 
               2, 5, 3, 8}], 
             "NumericalThresholds" -> {0.8847680687904358, 0.7769983410835266,
               0.5072329938411713, -0.39844968914985657`, 
              0.507234126329422, -0.24784809350967407`, 
              0.5072328150272369, -0.685611754655838, -0.06512349098920822, \
-0.8791777789592743, 0.08151080459356308, -0.22395941615104675`, 
              0.8957421481609344, -1.039604902267456, -0.36348235607147217`, \
-0.16732341051101685`, -0.05064869858324528, -0.22395993024110794`}, 
             "LeafValues" -> 
             RawArray["Real32",{0.015886111184954643`, -0.009533851407468319, 
               0.03821197897195816, -0.00346876191906631, 0.0158943273127079, 
               0.017608288675546646`, -0.01716000959277153, 
               0.020586540922522545`, -0.00799968559294939, \
-0.010310258716344833`, 0.02931453101336956, 0.013232911936938763`, 
               0.0020027966238558292`, -0.007296901661902666, \
-0.028615271672606468`, 
               0.009981815703213215, -0.012031408958137035`, \
-0.01773736998438835, -0.01830742508172989}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {9, -3}, {7, 4}, {14, 5}, {
               6, -6}, {-5, 12}, {8, -8}, {-1, 13}, {10, -10}, {
               11, -11}, {-2, -12}, {-7, -13}, {15, 17}, {-4, 
               16}, {-9, -16}, {18, -17}, {-14, -18}, {-15, -19}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 3, 6, 6, 10, 2, 4, 5, 1, 1, 7, 6, 7, 6, 
               7, 6, 1, 1}], 
             "NumericalThresholds" -> {-0.2558036595582962, \
-0.06012612767517567, 0.5072337687015533, 0.5072329342365265, 
              0.7317643463611603, 
              1.533321499824524, -0.013169249054044485`, \
-0.16732367128133774`, 0.6182591021060944, 1.162319302558899, 
              0.8957435786724091, 0.5072336494922638, 0.8957425653934479, 
              0.5072334110736847, 0.8957435786724091, 
              0.5072334110736847, -0.702703207731247, -1.245964765548706}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.004004967398941517, -0.001047051278874278, 
               0.03520809859037399, 0.03046063892543316, 
               0.0019608207512646914`, 0.02175559289753437, 
               0.021430103108286858`, -0.024652082473039627`, \
-0.008772328495979309, 0.014765216037631035`, -0.007467023096978664, 
               0.003725184127688408, -0.00828816182911396, \
-0.030092941597104073`, 
               0.01132970117032528, -0.02089572139084339, \
-0.008623029105365276, -0.019817188382148743`, -0.01858900487422943}], 
             "Children" -> 
             RawArray["Integer16",{{9, 2}, {6, 3}, {4, -4}, {5, 7}, {-3, 8}, {
               12, -7}, {-5, -8}, {-6, -9}, {11, 10}, {-10, -11}, {13, -12}, {
               14, 18}, {-1, 16}, {15, -15}, {-2, -16}, {-14, 
               17}, {-17, -18}, {-13, -19}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{1, 9, 9, 6, 4, 2, 2, 2, 8, 5, 4, 9, 1, 3}],
              "NumericalThresholds" -> {
              0.8847680687904358, -0.4085097759962082, 0.42788611352443695`, 
              0.5072329342365265, -0.6856109201908112, 1.6690630316734314`, 
              0.4918917119503021, 0.29540368914604187`, 
              0.5165567100048065, -0.16732319444417953`, \
-0.013169885613024235`, 
              0.4278857856988907, -0.5523051619529724, -0.8777972161769867}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.008567589335143566, 0.029491517692804337`, 
               0.0038063256070017815`, -0.006746876053512096, 
               0.02741873450577259, -0.008909469470381737, 
               0.012772553600370884`, -0.012678707018494606`, 
               0.020407140254974365`, 0.019026532769203186`, 
               0.007988288067281246, -0.025069478899240494`, 
               0.0087368069216609, -0.009310314431786537, \
-0.022733038291335106`}], "Children" -> 
             RawArray["Integer16",{{6, 2}, {-2, 3}, {5, 4}, {-4, -5}, {-3, 
               14}, {7, -7}, {8, 11}, {9, -9}, {10, -10}, {-1, -11}, {12, 
               13}, {-8, -13}, {-12, -14}, {-6, -15}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 9, 9, 9, 8, 9, 8, 9, 1, 2, 9, 7, 3}], 
             "NumericalThresholds" -> {-0.40851064026355743`, \
-0.40850959718227386`, -0.4085099846124649, -0.22569996863603592`, 
              0.5165567100048065, -0.408510223031044, 0.5165567696094513, 
              0.427885964512825, 1.238666594028473, 0.39695580303668976`, 
              0.4278854578733444, 0.8957422077655792, 0.7641381919384003}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.017268585041165352`, 0.013072086498141289`,
                0.0008941249689087272, 
               0.03826017677783966, -0.0030898109544068575`, 
               0.03995589539408684, -0.014868930913507938`, \
-0.025887755677103996`, -0.0001790476671885699, 0.01670367643237114, 
               0.006452668458223343, -0.017405297607183456`, \
-0.009719934314489365, -0.015110793523490429`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 4}, {6, -4}, {7, 5}, {
               8, -6}, {-2, -7}, {10, 13}, {11, 9}, {-9, -10}, {
               12, -11}, {-5, -12}, {-3, -13}, {-8, -14}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 10, 1, 1, 6, 6, 7, 10, 3}], 
             "NumericalThresholds" -> {-0.0240315068513155, \
-0.024031134322285652`, -1.1747119426727295`, -0.9713696539402008, 
              0.5072342455387115, 0.5072339475154877, 0.8957429826259613, 
              0.7773066461086273, -0.876563549041748}, "LeafValues" -> 
             RawArray["Real32",{-0.013321734964847565`, 0.02608454041182995, 
               0.009705130010843277, 0.020023679360747337`, 
               0.0009218706982210279, 
               0.016877431422472, -0.016794193536043167`, \
-0.007284145802259445, -0.010932844132184982`, -0.02603781409561634}], 
             "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {7, 4}, {-4, 5}, {
               6, -6}, {-5, -7}, {8, 9}, {-3, -9}, {-8, -10}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 5, 3, 3, 5, 5, 3, 8, 3, 2, 5}], 
             "NumericalThresholds" -> {-0.16732274740934372`, \
-0.1673230603337288, -0.06209137849509716, -0.048535723239183426`, \
-0.1673235073685646, -0.16732362657785416`, 
              0.7717768549919128, -0.22396061569452286`, -0.8767273426055908, \
-0.02937004156410694, -0.16732261329889297`}, "LeafValues" -> 
             RawArray["Real32",{
               0.0015797405503690243`, -0.011750387027859688`, \
-0.0005857707001268864, 
               0.03264385461807251, -0.019263634458184242`, \
-0.0026756012812256813`, 0.029204169288277626`, 
               0.030548738315701485`, -0.011686181649565697`, \
-0.007912532426416874, -0.021717103198170662`, 0.00590422423556447}], 
             "Children" -> 
             RawArray["Integer16",{{2, 4}, {5, 3}, {-3, -4}, {11, -5}, {6, 
               10}, {7, -7}, {9, 
               8}, {-8, -9}, {-1, -10}, {-6, -11}, {-2, -12}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 5, 2, 10, 1, 2, 10, 5, 1, 6, 2, 3, 7, 6,
                5}], "NumericalThresholds" -> {-1.0642696619033813`, \
-0.2558036595582962, -0.8790672421455383, -0.024030694738030434`, 
              0.606634259223938, 
              1.6420460939407349`, -0.024030531756579876`, \
-0.2558033913373947, -0.6231958866119385, 
              0.5072327554225922, -0.013172573409974575`, 0.7687416076660156, 
              0.8957430422306061, -0.5651203691959381, -0.25580446422100067`},
              "LeafValues" -> 
             RawArray["Real32",{-0.008600878529250622, -0.02019483596086502, 
               0.028880273923277855`, 0.039236340671777725`, 
               0.0147763816639781, 0.001091844867914915, 
               0.021370336413383484`, -0.0037316272500902414`, \
-0.004481888376176357, 0.0035927274730056524`, 
               0.03350546211004257, -0.0012739005032926798`, \
-0.019612262025475502`, 
               0.009854352101683617, -0.013794672675430775`, \
-0.017584366723895073`}], "Children" -> 
             RawArray["Integer16",{{12, 2}, {7, 3}, {-3, 4}, {5, 
               6}, {-4, -6}, {8, -7}, {-2, 9}, {-5, -9}, {15, 10}, {14, 
               11}, {-11, -12}, {13, -13}, {-1, -14}, {-10, -15}, {-8, -16}}],
              "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{1, 3, 4, 5, 6, 3, 6, 4, 2, 2, 1, 7, 7, 4, 
               6, 3, 6, 5, 6, 7}], 
             "NumericalThresholds" -> {0.7559244632720947, 
              0.7788235247135162, -0.685611754655838, -0.2558038979768753, 
              0.5072329938411713, 0.7723318934440613, 
              0.5072328150272369, -0.685611754655838, -0.15703292936086655`, 
              0.052003927528858185`, -1.039604902267456, 0.8957431614398956, 
              0.8957426249980927, -0.013169641140848398`, 
              0.5072335302829742, -0.8844845294952393, 
              0.5072338283061981, -0.2558033913373947, -0.5651197135448456, 
              0.8957430422306061}, "LeafValues" -> 
             RawArray["Real32",{0.01969529315829277, -0.01366112008690834, 
               0.02768097072839737, 
               0.020875275135040283`, -0.009927905164659023, 
               0.002530521946027875, -0.001863299636170268, 
               0.02523251436650753, 0.007638179697096348, 
               0.018445216119289398`, -0.006176623981446028, \
-0.017340192571282387`, -0.005215147510170937, 
               0.012159000150859356`, -0.003380965441465378, 
               0.01682365871965885, -0.00419465359300375, \
-0.0229327455163002, -0.017914386466145515`, -0.014872802421450615`, \
-0.006413817871361971}], "Children" -> 
             RawArray["Integer16",{{5, 2}, {3, -3}, {-2, 4}, {-4, 14}, {6, 
               9}, {7, 19}, {8, -8}, {-1, 16}, {11, 10}, {-10, 12}, {-6, 
               17}, {13, 18}, {-11, -14}, {-5, 15}, {-15, -16}, {-9, -17}, {
               20, -18}, {-13, -19}, {-7, -20}, {-12, -21}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 8, 1, 1, 6, 4, 4, 10, 1, 9}], 
             "NumericalThresholds" -> {0.5165573060512543, 0.5165569484233856,
               1.440644919872284, 1.5729206800460815`, 
              0.5072339475154877, -0.013169575948268175`, \
-0.013170139398425817`, 0.9275428950786591, -0.7631376087665558, 
              0.4278864413499832}, "LeafValues" -> 
             RawArray["Real32",{0.0006322299595922232, 
               0.01274734828621149, -0.01411331444978714, 
               0.02746685780584812, -0.006488133687525988, 
               0.00022427865769714117`, -0.00687564117833972, 
               0.01753992959856987, 
               0.010838182643055916`, -0.00955614447593689, \
-0.022534526884555817`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {5, 4}, {-4, -5}, {6, 
               9}, {7, 8}, {-1, -8}, {-7, -9}, {-6, 10}, {-10, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 10, 10, 9, 9, 9, 8, 8}], 
             "NumericalThresholds" -> {-0.0240315068513155, \
-0.024031134322285652`, -0.024030779488384724`, -0.4085095673799515, \
-0.40851034224033356`, -0.22569996863603592`, 0.5165567100048065, 
              0.5165567696094513}, "LeafValues" -> 
             RawArray["Real32",{-0.010655404068529606`, 
               0.020488591864705086`, -0.015097775496542454`, \
-0.010040863417088985`, -0.002974240342155099, 
               0.03201664611697197, -0.0007593940827064216, 
               0.029798274859786034`, -0.013530619442462921`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {5, 
               6}, {-4, -6}, {8, 7}, {-7, -8}, {-5, -9}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 8, 5, 6, 2, 3, 9, 7, 7, 2, 10, 9, 10}], 
             "NumericalThresholds" -> {-0.3235579878091812, \
-0.32355718314647675`, -0.16732405871152878`, 
              0.507234126329422, -0.0876147635281086, 
              9.999999682655224*^-21, -0.40850959718227386`, 
              0.8957435190677643, 0.8957422077655792, 0.6742469966411591, 
              0.7317639887332916, 0.42788712680339813`, 0.9275434911251068}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.008598390966653824, 0.033359263092279434`, 
               0.02069058082997799, 
               0.0014500486431643367`, -0.01204739511013031, 
               0.02471904642879963, -0.01734256185591221, \
-0.004078961908817291, 
               0.02453671395778656, -0.011959992349147797`, \
-0.013948874548077583`, 0.005060118623077869, -0.01929308846592903, 
               0.008836102671921253}], "Children" -> 
             RawArray["Integer16",{{6, 2}, {3, 4}, {-2, -4}, {7, 
               5}, {-5, -6}, {13, -7}, {8, 10}, {9, -9}, {-3, -10}, {12, 
               11}, {-11, -12}, {-8, -13}, {-1, -14}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 1, 8, 5, 1, 10, 9, 1, 1, 3, 3, 3, 6, 10,
                6, 7, 5}], 
             "NumericalThresholds" -> {-0.8880764245986938, 
              0.7559244632720947, -0.22396035492420197`, \
-0.16732390969991684`, -0.145352341234684, -0.02403075620532036, \
-0.40850962698459625`, -1.1195634007453918`, -0.9713696539402008, \
-0.05763893947005272, 0.7627607882022858, -0.04787876643240452, 
              0.5072328150272369, 0.7773067653179169, 0.5072332918643951, 
              0.8957427442073822, -0.16732414811849594`}, "LeafValues" -> 
             RawArray["Real32",{0.0025870343670248985`, 0.03039577044546604, 
               0.02792949415743351, -0.0014174528187140822`, \
-0.00303448922932148, -0.02371426299214363, -0.002078052144497633, \
-0.017309803515672684`, 0.019252482801675797`, -0.0005073474021628499, 
               0.023212863132357597`, -0.0036131711676716805`, \
-0.015904251486063004`, -0.018582787364721298`, -0.015401295386254787`, \
-0.005386124365031719, -0.004976212978363037, 0.005868841893970966}], 
             "Children" -> 
             RawArray["Integer16",{{13, 2}, {5, 3}, {4, 12}, {-3, -5}, {6, 
               7}, {-2, 8}, {-6, 10}, {14, 9}, {-9, -10}, {16, 
               11}, {-11, -12}, {17, -13}, {-1, 
               15}, {-7, -15}, {-14, -16}, {-8, -17}, {-4, -18}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 9, 8, 5, 3, 3, 6, 7, 2, 9, 1, 10, 10, 2,
                3, 7, 9}], 
             "NumericalThresholds" -> {-0.2558036595582962, 
              0.4750322252511978, -0.24784809350967407`, \
-0.16732356697320938`, -0.06012612767517567, -0.04891309142112732, 
              0.5072336494922638, 0.8957435786724091, -0.013172573409974575`, 
              0.4750322550535202, 1.3050665259361267`, 
              0.9275433123111725, -0.024030334316194057`, 
              0.4368094950914383, -0.0506794024258852, 
              0.8957435786724091, -0.22569940984249115`}, "LeafValues" -> 
             RawArray["Real32",{-0.018298225477337837`, 
               0.031709592789411545`, -0.0009763762936927378, \
-0.0037142925430089235`, 0.0010935039026662707`, 
               0.020897891372442245`, -0.0038121575489640236`, 
               0.015853052958846092`, 
               0.019145751371979713`, -0.01298767700791359, 
               0.016591902822256088`, 
               0.008931219577789307, -0.016253575682640076`, \
-0.013813797384500504`, 
               0.004460682161152363, -0.0018160248873755336`, \
-0.012747015804052353`, -0.003201203653588891}], "Children" -> 
             RawArray["Integer16",{{8, 2}, {3, 12}, {4, 5}, {-2, -5}, {11, 
               6}, {-6, 7}, {-7, -8}, {10, 9}, {-9, -10}, {13, -11}, {
               16, -12}, {-3, -13}, {-1, 14}, {15, 
               17}, {-14, -16}, {-4, -17}, {-15, -18}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 8, 6, 3, 8, 8, 8, 9, 7, 10, 10, 6}], 
             "NumericalThresholds" -> {-0.3235579878091812, \
-0.32355718314647675`, 0.5072334706783295, 
              1.592172920703888, -0.22396061569452286`, \
-0.22395972907543182`, -0.22395939379930496`, -0.225699745118618, 
              0.8957437574863434, -0.024031310342252254`, 0.9275435507297516, 
              0.5072333514690399}, "LeafValues" -> 
             RawArray["Real32",{-0.005079645663499832, 0.022167595103383064`, 
               0.011290513910353184`, -0.006150280125439167, 
               0.026919305324554443`, -0.005947223864495754, 
               0.021812804043293, -0.004650692455470562, 
               0.0215531587600708, -0.0161044392734766, \
-0.0038577476516366005`, 0.004170711152255535, -0.016176307573914528`}], 
             "Children" -> 
             RawArray["Integer16",{{11, 2}, {3, 4}, {-2, -4}, {6, 
               5}, {-5, -6}, {9, 7}, {-7, 8}, {-8, -9}, {
               10, -10}, {-3, -11}, {12, -12}, {-1, -13}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 9, 9, 5, 2, 10, 3, 3, 1, 3, 2}], 
             "NumericalThresholds" -> {0.47503285109996796`, 
              0.4750322848558426, 
              0.4750317484140396, -0.167323537170887, -0.586018979549408, \
-0.024030077271163464`, -0.050363270565867424`, -0.8852278888225555, 
              0.4796958863735199, -0.8759350180625916, -1.3436325788497925`}, 
             "LeafValues" -> 
             RawArray["Real32",{0.00487455865368247, 
               0.01079335156828165, -0.017790034413337708`, 
               0.012302185408771038`, 
               0.0008430990274064243, -0.0020702630281448364`, 
               0.008920415304601192, 
               0.02078918367624283, -0.003143957117572427, \
-0.012287929654121399`, 0.01649528741836548, -0.014987096190452576`}], 
             "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, 4}, {5, -4}, {-3, -5}, {9, 
               6}, {7, 8}, {-6, -8}, {-7, -9}, {11, 
               10}, {-10, -11}, {-1, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 10, 2, 10, 10, 6, 5}], 
             "NumericalThresholds" -> {-0.0240315068513155, \
-0.024031134322285652`, -1.6010496020317078`, -0.024030779488384724`, \
-0.024030101485550404`, 0.5072332918643951, -0.1673230156302452}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.008736895397305489, 
               0.01337362639605999, -0.012707553803920746`, \
-0.013422067277133465`, 0.025138089433312416`, 
               0.0018607655074447393`, -0.008885803632438183, \
-0.005343614611774683}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {-4, 5}, {6, 
               7}, {-5, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> RawArray["Integer16",{9, 1, 1, 9, 5, 3, 2}], 
             "NumericalThresholds" -> {-0.40851064026355743`, 
              1.5121723413467407`, 
              1.3750149607658386`, -0.408510223031044, -0.25580401718616486`, 
              0.7761906087398529, -0.2026987001299858}, "LeafValues" -> 
             RawArray["Real32",{-0.010930703021585941`, 
               0.010675442405045033`, -0.008079535327851772, 
               0.020532283931970596`, -0.009854654781520367, 
               0.0024949696380645037`, -0.006801840849220753, \
-0.0007948887068778276}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, 5}, {7, 
               6}, {-6, -7}, {-5, -8}}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 8, 8, 1, 1, 10, 10, 7, 1}], 
             "NumericalThresholds" -> {0.5165573060512543, 0.5165569484233856,
               0.516556590795517, -0.9673650860786438, -1.1145190000534058`, \
-0.024030121974647045`, -0.02403075061738491, 0.8957423865795135, 
              1.3724036812782288`}, "LeafValues" -> 
             RawArray["Real32",{0.01577255129814148, 
               0.010863113217055798`, -0.0088918162509799, 
               0.011988759972155094`, 0.0030401621479541063`, 
               0.022499006241559982`, -0.003921791911125183, \
-0.001761599793098867, -0.016293084248900414`, 0.009266974404454231}], 
             "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {5, 7}, {
               6, -6}, {-1, -7}, {8, 9}, {-5, -9}, {-8, -10}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 9, 8, 9, 5, 7, 3, 3, 8, 10, 1}], 
             "NumericalThresholds" -> {0.4750327914953232, 
              0.4750322848558426, -0.323558047413826, 
              0.4750317484140396, -0.25580351054668427`, 
              0.8957435786724091, -0.8771851360797882, -0.06012612767517567, \
-0.24784725159406662`, -0.024030334316194057`, 1.3050665259361267`}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.015237140469253063`, 
               0.007638079579919577, -0.0004316643171478063, \
-0.018747461959719658`, 0.010147130116820335`, -0.0038184570148587227`, 
               0.024037852883338928`, -0.0070874993689358234`, 
               0.01968366838991642, 
               0.0025213828776031733`, -0.004058669321238995, 
               0.006317452993243933}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {4, 3}, {-3, -4}, {5, -5}, {6, 
               8}, {10, 7}, {-7, -8}, {11, 
               9}, {-9, -10}, {-1, -11}, {-6, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 10, 10, 10, 4, 1, 1, 3, 7, 5, 6, 6}], 
             "NumericalThresholds" -> {-0.8882768154144287, 
              0.9275431334972382, 0.9275438487529755, 
              0.9275427758693695, -0.01316889701411128, -0.7315489649772644, 
              0.7474104166030884, -0.8831900358200073, 
              0.8957431614398956, -0.2558036595582962, 0.5072328150272369, 
              0.5072332918643951}, "LeafValues" -> 
             RawArray["Real32",{
               0.002968755317851901, -0.005824492312967777, \
-0.013518834486603737`, 0.008455049246549606, 0.01689077727496624, 
               0.013077987357974052`, -0.030878670513629913`, 
               0.0006142547936178744, -0.004900685045868158, 
               0.030484702438116074`, 
               0.005254287738353014, -0.017582068219780922`, \
-0.0028941717464476824`}], "Children" -> 
             RawArray["Integer16",{{11, 2}, {4, 3}, {-3, -4}, {5, -5}, {8, 
               6}, {-6, 7}, {-7, -8}, {9, 10}, {-2, -10}, {-9, -11}, {-1, 
               12}, {-12, -13}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 9, 1, 1, 9, 2, 2, 3, 2, 8}], 
             "NumericalThresholds" -> {-0.40851064026355743`, \
-0.4085095673799515, -0.24953028559684753`, 
              0.8894558250904083, -0.40850929915905, -1.285254418849945, \
-0.8615285754203796, 
              1.6021807789802551`, -1.0642696619033813`, \
-0.32355713844299316`}, "LeafValues" -> 
             RawArray["Real32",{-0.009166202507913113, 
               0.020345335826277733`, -0.010411469265818596`, \
-0.011277923360466957`, 0.015081374906003475`, -0.015106534585356712`, 
               0.0025816869456321, -0.0012221228098496795`, 
               0.014731071889400482`, 
               0.022015227004885674`, -0.001069847377948463}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 5}, {-2, 4}, {-4, -5}, {-3, 
               6}, {10, 7}, {9, 8}, {-8, -9}, {-7, -10}, {-6, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{1, 1, 1, 1, 4, 5, 5, 4}], 
             "NumericalThresholds" -> {1.5105779767036438`, 
              1.3750149607658386`, 1.1317203044891357`, 
              1.0234560370445251`, -0.013169641140848398`, \
-0.16732274740934372`, -0.1673230603337288, -0.01316889701411128}, 
             "LeafValues" -> 
             RawArray[
               "Real32",{-0.00017478354857303202`, -0.007698340807110071, 
               0.01428907085210085, -0.01521691307425499, 0.01535751111805439,
                0.0007093793246895075, -0.002582076471298933, 
               0.011404347606003284`, -0.013399052433669567`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {4, 5}, {
               6, -5}, {-4, -6}, {7, 8}, {-1, -8}, {-7, -9}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 2, 2, 5, 2, 2, 8, 9, 8, 7, 7}], 
             "NumericalThresholds" -> {1.2675729393959045`, 
              1.8030426502227783`, 0.6742469966411591, -0.2558032423257828, 
              0.4990248680114746, 
              0.29540368914604187`, -0.2239598110318184, -0.4085095673799515, \
-0.2239602580666542, 0.8957425653934479, 0.8957431614398956}, "LeafValues" -> 
             RawArray["Real32",{-0.008746367879211903, -0.005718468222767115, 
               0.006225572898983955, 
               0.01867574267089367, -0.003138196188956499, \
-0.011343419551849365`, 0.026316901668906212`, 0.025773053988814354`, 
               0.0006996314623393118, 
               0.0019108016276732087`, -0.0009192396537400782, \
-0.014131876640021801`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {11, -3}, {5, 4}, {-4, -5}, {
               6, -6}, {7, 9}, {10, 
               8}, {-8, -9}, {-7, -10}, {-1, -11}, {-2, -12}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 9, 8, 8, 8, 1, 10, 6, 2, 7}], 
             "NumericalThresholds" -> {0.4750327914953232, 
              0.4750322848558426, -0.3235575705766678, -0.32355813682079315`, \
-0.323558047413826, -1.0766962766647339`, -0.024030182510614395`, 
              0.5072342455387115, -0.3774842321872711, 0.8957439363002777}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.00196312484331429, 0.007218957878649235, 
               0.0002919304824899882, 0.020075565204024315`, 
               0.019005149602890015`, -0.01363865751773119, \
-0.003298694035038352, 0.011133434250950813`, 
               0.012974237091839314`, -0.004373306408524513, 
               0.009206494316458702}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, 5}, {4, 
               6}, {-1, -5}, {-3, -6}, {7, 8}, {-4, 9}, {
               10, -9}, {-8, -10}, {-7, -11}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 9, 10, 3, 1, 1, 5, 9, 8, 7}], 
             "NumericalThresholds" -> {-0.3235579878091812, 
              0.4750317484140396, 0.9275433123111725, 1.5960396528244019`, 
              0.4667016863822937, 
              1.443563461303711, -0.2558047026395798, -0.4085099548101425, \
-0.3235581964254379, 0.895742803812027}, "LeafValues" -> 
             RawArray["Real32",{0.00468179676681757, 0.006682266015559435, 
               0.018942318856716156`, -0.0076043750159442425`, \
-0.00639737443998456, 
               0.021972982212901115`, -0.00924381148070097, \
-0.01057831384241581, 
               0.00048326505930162966`, -0.011397788301110268`, \
-0.0053016324527561665`}], "Children" -> 
             RawArray["Integer16",{{9, 2}, {4, 3}, {-3, -4}, {6, 
               5}, {-5, -6}, {7, -7}, {-2, 8}, {-8, -9}, {
               10, -10}, {-1, -11}}], "NominalSplits" -> {}, "RootIndex" -> 1,
              "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 10, 8, 10, 3, 8, 6, 6}], 
             "NumericalThresholds" -> {0.9275438487529755, 
              0.9275435507297516, -0.3235579878091812, 
              0.9275428354740143, -0.8882768154144287, -0.24784725159406662`, 
              0.5072328150272369, 0.5072333514690399}, "LeafValues" -> 
             RawArray["Real32",{-0.002003320725634694, 
               0.00791562907397747, -0.014656747691333294`, 
               0.000764346681535244, 0.017087657004594803`, 
               
               0.006805394776165485, -0.0005544704617932439, \
-0.010015014559030533`, -0.012261291965842247`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {3, -3}, {8, 4}, {5, -5}, {7, 
               6}, {-6, -7}, {-4, -8}, {-1, -9}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 10, 10, 8, 5, 7, 4, 3, 8, 2}], 
             "NumericalThresholds" -> {-0.024031310342252254`, \
-0.024030933156609535`, -0.024030678905546665`, -0.22396035492420197`, \
-0.1673230156302452, 
              0.8957438766956329, -0.013169185258448124`, \
-0.059978581964969635`, -0.24784711748361588`, 0.09642146900296211}, 
             "LeafValues" -> 
             RawArray["Real32",{0.014470900408923626`, -0.017542602494359016`,
                0.013744212687015533`, 
               0.0015717401402071118`, -0.0023598666302859783`, \
-0.006678470876067877, 
               0.009244301356375217, -0.0069956667721271515`, \
-0.0053598107770085335`, 0.0048622069880366325`, -0.014392375014722347`}], 
             "Children" -> 
             RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, 5}, {-1, -5}, {6, 
               8}, {7, -7}, {-4, -8}, {9, 10}, {-6, -10}, {-9, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 7, 4, 3, 10, 3, 3, 10, 4, 10, 8, 5}], 
             "NumericalThresholds" -> {0.8957436382770538, 
              0.8957435786724091, -0.013169815298169851`, 0.7627607882022858, 
              0.7317648828029633, 
              1.599275290966034, -0.05817006900906563, \
-0.024030678905546665`, -0.013169891200959682`, 
              0.9275430738925934, -0.32355792820453644`, \
-0.16732261329889297`}, "LeafValues" -> 
             RawArray["Real32",{-0.005026538856327534, 0.0061576575972139835`,
                0.023985059931874275`, 
               0.0051440526731312275`, -0.01925194263458252, \
-0.013220008462667465`, -0.00926146749407053, 0.022009214386343956`, 
               
               0.0068252189084887505`, -0.00521796103566885, \
-0.0028434761334210634`, 0.015527017414569855`, 0.006591601297259331}], 
             "Children" -> 
             RawArray["Integer16",{{2, 3}, {6, -3}, {4, -4}, {
               5, -5}, {-2, -6}, {7, -7}, {10, 8}, {-8, 9}, {-9, -10}, {12, 
               11}, {-11, -12}, {-1, -13}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 1, 1, 4, 9, 8, 9, 3}], 
             "NumericalThresholds" -> {1.60764479637146, 1.443563461303711, 
              1.5762414932250977`, -0.013168363366276026`, 
              0.4750327318906784, -0.32355786859989166`, 
              0.4750315994024277, -0.053907860070466995`}, "LeafValues" -> 
             RawArray["Real32",{-0.002312069060280919, 
               0.008203975856304169, -0.01783672533929348, 
               0.0016219893004745245`, 0.011948573403060436`, 
               0.008099949918687344, -0.000330311362631619, \
-0.012936493381857872`, 0.017301710322499275`}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {4, 3}, {-3, -4}, {5, -5}, {
               6, -6}, {8, 7}, {-7, -8}, {-1, -9}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 6, 2, 9, 6, 4, 2, 1, 3, 1}], 
             "NumericalThresholds" -> {0.5165573060512543, 0.5072339475154877,
               0.11893922090530396`, 0.4750327914953232, 
              0.5072337687015533, -0.013170093763619661`, -0.403459832072258, 
              1.1030119061470032`, -0.8788267374038696, 0.2624008506536484}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.0015626151580363512`, 
               0.007918384857475758, -0.006112162955105305, 
               0.005383535288274288, 
               0.012881964445114136`, -0.0012606896925717592`, 
               0.017711514607071877`, -0.01947176642715931, 
               0.0006743706180714071, -0.015233947895467281`, 
               0.003891951870173216}], "Children" -> 
             RawArray["Integer16",{{2, -2}, {4, 3}, {7, -4}, {5, -5}, {8, 
               6}, {-6, -7}, {-3, -8}, {10, 9}, {-9, -10}, {-1, -11}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{1, 6, 2, 2, 4, 6, 6, 8, 5, 3, 4, 5, 6, 6, 
               3, 4, 1, 4}], 
             "NumericalThresholds" -> {1.440644919872284, 
              0.5072329342365265, -0.12548677623271942`, 
              0.09186898171901703, -0.013169963844120502`, 0.5072329342365265,
               0.5072326362133026, -0.2239600196480751, -0.2558038681745529, 
              0.7721121609210968, -0.6856110990047455, -0.2558038681745529, 
              0.5072334706783295, 0.5072341859340668, 
              0.7761906087398529, -0.013170212972909212`, 
              0.2067645713686943, -0.013169963844120502`}, "LeafValues" -> 
             RawArray["Real32",{0.007938453927636147, -0.005719490349292755, 
               0.014415155164897442`, 
               0.01995018683373928, -0.009154343977570534, \
-0.005824608262628317, -0.017957251518964767`, 0.014965939335525036`, 
               0.005542339291423559, -0.006162059027701616, 
               0.014293665066361427`, -0.012302086688578129`, 
               0.002049546455964446, 
               0.00405151629820466, -0.013976098969578743`, \
-0.008936171419918537, -0.0047201113775372505`, -0.017731426283717155`, \
-0.003595456015318632}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {-2, -3}, {6, 4}, {5, 
               8}, {-4, -6}, {7, 13}, {11, -8}, {10, 9}, {-9, 17}, {
               12, -11}, {-1, 18}, {-5, -13}, {16, 14}, {
               15, -15}, {-14, -16}, {-7, -17}, {-10, -18}, {-12, -19}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 2, 1, 7, 10, 1, 4, 10, 7, 9, 8}], 
             "NumericalThresholds" -> {-0.6856121122837067, 
              1.2675729393959045`, 1.3724036812782288`, 
              0.8957436382770538, -0.024030694738030434`, \
-0.24953028559684753`, -0.013169657438993454`, -0.024030190892517567`, 
              0.8957438170909882, -0.2256993055343628, -0.2239602953195572}, 
             "LeafValues" -> 
             RawArray["Real32",{-0.009741265326738358, 
               0.0247037410736084, -0.00917932577431202, 
               0.009653312154114246, -0.01168991532176733, \
-0.010400380939245224`, -0.001284157857298851, 0.0035255220718681812`, 
               0.000859687221236527, 0.001426689326763153, 
               0.0007607691804878414, -0.008021092973649502}], "Children" -> 
             RawArray["Integer16",{{10, 2}, {3, 7}, {4, -4}, {5, 9}, {6, 
               8}, {-2, -7}, {-3, -8}, {-6, -9}, {-5, 
               11}, {-1, -11}, {-10, -12}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]]}, "ClassNumber" -> 1, "IterationsNumber" -> 50, "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "(f2f5f6)" -> 
              Association[
               "Type" -> "NominalVector", "Weight" -> 3, 
                "SetSize" -> {2, 2, 4}], "(f1f3f4)" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 3]], 
            "Output" -> 
            Association[
             "((f1f3f4)(f2f5f6))" -> 
              Association[
               "Type" -> "NumericalVector", "Weight" -> 6.000000000000001]], 
            "Processors" -> {
              MachineLearning`MLProcessor["EmbedNominalVector", 
               Association[
               "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f2f5f6)" -> 
                  Association[
                   "Type" -> "NominalVector", "Weight" -> 3, 
                    "SetSize" -> {2, 2, 4}]], "Index" -> {
                  Association[1 -> 1, 2 -> 2], 
                  Association[1 -> 1, 2 -> 2], 
                  Association[1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4]}, "Output" -> 
                Association[
                 "(f2f5f6)" -> 
                  Association["Weight" -> 3, "Type" -> "NumericalVector"]], 
                "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 
                   0.}, {-0.013169222511351109`, -0.1673232614994049}, \
{-0.685611367225647, -0.2558041214942932}}], 
                  RawArray["Real32",{{0., 0.}, {0.5072333812713623, 
                   0.8957431316375732}, {-0.5651206374168396, 
                   0.06503215432167053}}], 
                  RawArray["Real32",{{0., 0., 0.}, {-0.32355788350105286`, 
                   0.475032240152359, 
                   0.9275431036949158}, {-0.22396010160446167`, \
-0.4085097908973694, -0.024030836299061775`}, {-0.24784716963768005`, 
                   0.4278862476348877, 0.7773063778877258}, {
                   0.5165566802024841, -0.2257002592086792, 
                   0.7317641973495483}}]}, "Version" -> {12.1, 1}, "ID" -> 
                4077317464470873943]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "(f1f3f4)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 3], 
                  "(f2f5f6)" -> 
                  Association["Weight" -> 3, "Type" -> "NumericalVector"]], 
                "Spans" -> {
                  Span[1, 3], 
                  Span[4, 10]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f1f3f4)(f2f5f6))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 0.42857142857142855`, 
                    0.42857142857142855`, 0.42857142857142855`, 
                    0.42857142857142855`, 0.42857142857142855`, 
                    0.42857142857142855`, 0.42857142857142855`}, "Type" -> 
                    "NumericalVector"]], "Version" -> {12.1, 1}, "ID" -> 
                8053526099925594492]], 
              MachineLearning`MLProcessor["DensifyNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, "Input" -> 
                Association[
                 "((f1f3f4)(f2f5f6))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 0.42857142857142855`, 
                    0.42857142857142855`, 0.42857142857142855`, 
                    0.42857142857142855`, 0.42857142857142855`, 
                    0.42857142857142855`, 0.42857142857142855`}, "Type" -> 
                    "NumericalVector"]], "Version" -> {12.1, 1}, "ID" -> 
                2898414261657576438, "Output" -> 
                Association[
                 "((f1f3f4)(f2f5f6))" -> 
                  Association[
                   "Type" -> "NumericalVector", "Weight" -> 
                    6.000000000000001]]]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 6.000000000000001], 
                "Key" -> "((f1f3f4)(f2f5f6))", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"]]}, 
            "Invertibility" -> "Impossible", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"]], 
         "DistributionData" -> {NormalDistribution, {0.13952674840264395`}}, 
         "Method" -> "GradientBoostedTrees", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], "Options" -> 
         Association[
          "BoostingMethod" -> 
           Association["Value" -> "Gradient", "Options" -> Association[]], 
           MaxTrainingRounds -> 
           Association["Value" -> 50, "Options" -> Association[]], 
           "LeavesNumber" -> 
           Association["Value" -> 250, "Options" -> Association[]], 
           "LearningRate" -> 
           Association["Value" -> 0.2, "Options" -> Association[]], 
           ValidationSet -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "MaxBinNumber" -> 
           Association["Value" -> 255, "Options" -> Association[]], 
           "ThreadNumber" -> 
           Association["Value" -> 6, "Options" -> Association[]], "MaxDepth" -> 
           Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
           Association["Value" -> 15, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "BaggingFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "BaggingFrequency" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "MinGainToSplit" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "LossFunction" -> 
           Association[
            "Value" -> "MeanSquaredError", "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "PanelCell" -> CellObject[7505], "TrainingFunction" -> Predict, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 9.373254961305344, "PreprocessingTime" -> 
         1.0987558`7.492446174093247, "LossName" -> "StandardDeviation", 
         "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            Around[11.838063560112257`, 1.4123764607775144`], 
            "StandardDeviation" -> 
            Around[4468.409861127608, 907.3482963917182], "EvaluationTime" -> 
            0.000056313172317671004`, "TestSize" -> 89, "ModelMemory" -> 
            142080, "ModelUtility" -> -9.137767987150978, "TrainingSize" -> 
            357, "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
            585904, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[11.838063560112257`, 0.9987009730040363]}, 
            "StandardDeviationHistory" -> {
              Around[4468.409861127608, 641.5921332766453]}, 
            "Configuration" -> {
             "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
              MaxTrainingRounds -> 50, "LeavesNumber" -> 250, "LearningRate" -> 
              0.2, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
              "ThreadNumber" -> 6, "MaxDepth" -> 6, "LeafSize" -> 15, 
              "FeatureFraction" -> 1, "BaggingFraction" -> 1, 
              "BaggingFrequency" -> 0, "MinGainToSplit" -> 0, 
              "L1Regularization" -> 0, "L2Regularization" -> 0, 
              "LossFunction" -> "MeanSquaredError"}, "FinalTrainingSize" -> 
            446], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
             "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
             "TrainingTime", "TrainingMemory", "ExperimentCount", 
             "MeanCrossEntropyHistory", "StandardDeviationHistory", 
             "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 17], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 24301142759555]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[11.385272676461579`, 0.01476171125672135], 
                 "StandardDeviation" -> 
                 Around[11694.049560608197`, 762.6966561616272], 
                 "EvaluationTime" -> 0.00001790077753714996, "TestSize" -> 
                 200, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -10.072953318936927`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 446464, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[11.385272676461579`, 0.010438106131545458`]}, 
                 "StandardDeviationHistory" -> {
                   Around[11694.049560608197`, 539.3079775601911]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.38314923625471, 0.07940624551722904], 
                 "StandardDeviation" -> 
                 Around[7714.523310330052, 736.9921190214341], 
                 "EvaluationTime" -> 0.00002578769987568629, "TestSize" -> 
                 200, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -9.662944429904115, "TrainingSize" -> 60, 
                 "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 88128, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.38314923625471, 0.05614869467379654]}, 
                 "StandardDeviationHistory" -> {
                   Around[7714.523310330052, 521.1321250410991]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.090921264037936`, 0.08377441422195343], 
                 "StandardDeviation" -> 
                 Around[5760.909994200937, 652.0373206048201], 
                 "EvaluationTime" -> 0.000017807788679338343`, "TestSize" -> 
                 89, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -9.374392999716234, "TrainingSize" -> 357, 
                 "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 174224, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.090921264037936`, 0.05923745638627402]}, 
                 "StandardDeviationHistory" -> {
                   Around[5760.909994200937, 461.0600109863753]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000017807788679338343`, "ModelMemory" -> 
                27928, "StandardDeviation" -> 
                Around[5760.909994200937, 652.0373206048201], 
                "TrainingMemory" -> 174224, "TrainingTime" -> 
                0.028317005761084483`], "Index" -> 1], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 6], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 35], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> "MeanSquaredError"]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[11.604280321561841`, 0.0176519813894186], 
                 "StandardDeviation" -> 
                 Around[11566.180351870926`, 1198.9052862072351`], 
                 "EvaluationTime" -> 0.00002048389811985346, "TestSize" -> 
                 200, "ModelMemory" -> 31824, 
                 "ModelUtility" -> -10.06951841422152, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 97576, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[11.604280321561841`, 0.012481835741836625`]}, 
                 "StandardDeviationHistory" -> {
                   Around[11566.180351870926`, 847.7540578775345]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.786658004667375`, 0.06514919250997397], 
                 "StandardDeviation" -> 
                 Around[11392.702158354443`, 936.2255497823239], 
                 "EvaluationTime" -> 0.000017498166805773083`, "TestSize" -> 
                 300, "ModelMemory" -> 31824, 
                 "ModelUtility" -> -10.050188721622792`, "TrainingSize" -> 60,
                  "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 79984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.786658004667375`, 0.046067435812630425`]}, 
                 "StandardDeviationHistory" -> {
                   Around[11392.702158354443`, 662.0114349711848]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[9.846025406085559, 0.2764702543389291], 
                 "StandardDeviation" -> 
                 Around[4528.498648854347, 898.8327077912301], 
                 "EvaluationTime" -> 0.00007089408364945989, "TestSize" -> 89,
                  "ModelMemory" -> 134768, 
                 "ModelUtility" -> -9.150245356256507, "TrainingSize" -> 357, 
                 "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 
                 464416, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[9.846025406085559, 0.19549399163942627`]}, 
                 "StandardDeviationHistory" -> {
                   Around[4528.498648854347, 635.5707028314453]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007089408364945989, "ModelMemory" -> 
                134768, "StandardDeviation" -> 
                Around[4528.498648854347, 898.8327077912301], 
                "TrainingMemory" -> 464416, "TrainingTime" -> 
                0.09467441529664646], "Index" -> 2], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.78293726958099, 0.07527228065491223], 
                 "StandardDeviation" -> 
                 Around[11379.625644255844`, 961.0231298615176], 
                 "EvaluationTime" -> 0.0000501187233627272, "TestSize" -> 100,
                  "ModelMemory" -> 111616, 
                 "ModelUtility" -> -10.049496844532335`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 211936, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.78293726958099, 0.05322554008646541]}, 
                 "StandardDeviationHistory" -> {
                   Around[11379.625644255844`, 679.5459720021992]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.392702979028611`, 0.07815278313316007], 
                 "StandardDeviation" -> 
                 Around[7742.957815438444, 782.2981487840049], 
                 "EvaluationTime" -> 0.000039810717055349695`, "TestSize" -> 
                 200, "ModelMemory" -> 111616, 
                 "ModelUtility" -> -9.66771213013811, "TrainingSize" -> 60, 
                 "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 174704, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.392702979028611`, 0.05526236292205911]}, 
                 "StandardDeviationHistory" -> {
                   Around[7742.957815438444, 553.1683259148525]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[9.951361908057438, 0.10743876346508176`], 
                 "StandardDeviation" -> 
                 Around[5070.41941299523, 739.3606434831206], 
                 "EvaluationTime" -> 0.00004473114275881988, "TestSize" -> 89,
                  "ModelMemory" -> 127552, 
                 "ModelUtility" -> -9.25309503207324, "TrainingSize" -> 357, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 304296, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[9.951361908057438, 0.0759706782084568]}, 
                 "StandardDeviationHistory" -> {
                   Around[5070.41941299523, 522.8069247493639]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00004473114275881988, "ModelMemory" -> 
                127552, "StandardDeviation" -> 
                Around[5070.41941299523, 739.3606434831206], "TrainingMemory" -> 
                304296, "TrainingTime" -> 0.035648998138551095`], "Index" -> 
              3], Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.778968364410705`, 0.07062827671225713], 
                 "StandardDeviation" -> 
                 Around[11660.25550964196, 710.7787517359874], 
                 "EvaluationTime" -> 0.000015848931924611128`, "TestSize" -> 
                 300, "ModelMemory" -> 21312, 
                 "ModelUtility" -> -10.069216432430757`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 95488, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.778968364410705`, 0.04994173340675693]}, 
                 "StandardDeviationHistory" -> {
                   Around[11660.25550964196, 502.5964752758262]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.748342587942043`, 0.09153576974645958], 
                 "StandardDeviation" -> 
                 Around[11302.829227199776`, 1150.8279013385256`], 
                 "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 
                 200, "ModelMemory" -> 25664, 
                 "ModelUtility" -> -10.04612512952194, "TrainingSize" -> 60, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 162936, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.748342587942043`, 0.06472556350885199]}, 
                 "StandardDeviationHistory" -> {
                   Around[11302.829227199776`, 813.7582130151545]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.51250618275601, 0.08656853722274024], 
                 "StandardDeviation" -> 
                 Around[9458.80446515342, 1302.5133037203577`], 
                 "EvaluationTime" -> 0.000028223443050669432`, "TestSize" -> 
                 89, "ModelMemory" -> 51040, 
                 "ModelUtility" -> -9.875030383524551, "TrainingSize" -> 357, 
                 "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
                 1326088, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.51250618275601, 0.061213199707599676`]}, 
                 "StandardDeviationHistory" -> {
                   Around[9458.80446515342, 921.015989646358]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000028223443050669432`, "ModelMemory" -> 
                51040, "StandardDeviation" -> 
                Around[9458.80446515342, 1302.5133037203577`], 
                "TrainingMemory" -> 1326088, "TrainingTime" -> 
                0.03769056359755466], "Index" -> 4], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[13.666247956215752`, 0.565921346619014], 
                 "StandardDeviation" -> 
                 Around[13113.154950728374`, 851.7034252164533], 
                 "EvaluationTime" -> 0.000014762372655721304`, "TestSize" -> 
                 300, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -10.1874356818806, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 77032, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[13.666247956215752`, 0.4001668218125275]}, 
                 "StandardDeviationHistory" -> {
                   Around[13113.154950728374`, 602.2452675303637]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.189312296955022`, 0.08791486043924154], 
                 "StandardDeviation" -> 
                 Around[6469.944747810855, 601.2073002982947], 
                 "EvaluationTime" -> 0.00002253574373239229, "TestSize" -> 
                 200, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -9.48649495889949, "TrainingSize" -> 60, 
                 "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 88320, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.189312296955022`, 0.06216519398365663]}, 
                 "StandardDeviationHistory" -> {
                   Around[6469.944747810855, 425.11775893978125`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.099790415665245`, 0.0899716087569179], 
                 "StandardDeviation" -> 
                 Around[5841.216659405265, 648.8323919131166], 
                 "EvaluationTime" -> 0.000028223443050669432`, "TestSize" -> 
                 89, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -9.387824953888705, "TrainingSize" -> 357, 
                 "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 174096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.099790415665245`, 0.0636195346662796]}, 
                 "StandardDeviationHistory" -> {
                   Around[5841.216659405265, 458.7937841752523]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000028223443050669432`, "ModelMemory" -> 
                27928, "StandardDeviation" -> 
                Around[5841.216659405265, 648.8323919131166], 
                "TrainingMemory" -> 174096, "TrainingTime" -> 
                0.02367103399038563], "Index" -> 5], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.719008942076055`, 0.08301572967737852], 
                 "StandardDeviation" -> 
                 Around[10698.924051105068`, 1104.9478315143292`], 
                 "EvaluationTime" -> 0.000014219093021276394`, "TestSize" -> 
                 200, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -9.991501406133287, "TrainingSize" -> 60, 
                 "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 88256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.719008942076055`, 0.05870098540002367]}, 
                 "StandardDeviationHistory" -> {
                   Around[10698.924051105068`, 781.316104521153]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.370533299171148`, 0.09754985856951097], 
                 "StandardDeviation" -> 
                 Around[7349.792921881061, 1039.451906454489], 
                 "EvaluationTime" -> 0.000017807788679338343`, "TestSize" -> 
                 89, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -9.623478051779607, "TrainingSize" -> 357, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 174080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.370533299171148`, 0.06897816649828985]}, 
                 "StandardDeviationHistory" -> {
                   Around[7349.792921881061, 735.0034917712541]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[11.551994082524239`, 0.011384011673849849`], 
                 "StandardDeviation" -> 
                 Around[12367.54399963271, 536.0626428334472], 
                 "EvaluationTime" -> 0.000014219093021276394`, "TestSize" -> 
                 400, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -10.124620471011118`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 77096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[11.551994082524239`, 0.008049711851686047]}, 
                 "StandardDeviationHistory" -> {
                   Around[12367.54399963271, 379.0535298883127]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000014219093021276394`, "ModelMemory" -> 
                27928, "StandardDeviation" -> 
                Around[12367.54399963271, 536.0626428334472], 
                "TrainingMemory" -> 77096, "TrainingTime" -> 
                0.04801629338664462], "Index" -> 6], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.14704204740797, 0.05764311858177829], 
                 "StandardDeviation" -> 
                 Around[6164.1484428069225`, 436.5168392177535], 
                 "EvaluationTime" -> 0.000012589254117941663`, "TestSize" -> 
                 300, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -9.433727071189065, "TrainingSize" -> 60, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 88192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.14704204740797, 0.04075984003791571]}, 
                 "StandardDeviationHistory" -> {
                   Around[6164.1484428069225`, 308.66401711299136`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.943437641971057`, 0.02099194007494158], 
                 "StandardDeviation" -> 
                 Around[11825.239512230206`, 561.4367452752998], 
                 "EvaluationTime" -> 0.000013675813386831484`, "TestSize" -> 
                 300, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -10.080600301762654`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.01, "TrainingMemory" -> 77096, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.943437641971057`, 0.014843543177252833`]}, 
                 "StandardDeviationHistory" -> {
                   Around[11825.239512230206`, 396.9957297914688]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.097494144646081`, 0.08962712019902139], 
                 "StandardDeviation" -> 
                 Around[5826.829959649143, 649.692523210302], 
                 "EvaluationTime" -> 0.000017807788679338343`, "TestSize" -> 
                 89, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -9.38544147998383, "TrainingSize" -> 357, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 174080, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.097494144646081`, 0.06337594447094981]}, 
                 "StandardDeviationHistory" -> {
                   Around[5826.829959649143, 459.40198884820296`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000017807788679338343`, "ModelMemory" -> 
                27928, "StandardDeviation" -> 
                Around[5826.829959649143, 649.692523210302], "TrainingMemory" -> 
                174080, "TrainingTime" -> 0.020436279546122364`], "Index" -> 
              7], Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[11.830243726085866`, 0.277883555547199], 
                 "StandardDeviation" -> 
                 Around[14110.10286640524, 973.91472530878], "EvaluationTime" -> 
                 0.00001885405921651873, "TestSize" -> 200, "ModelMemory" -> 
                 27928, "ModelUtility" -> -10.261514495025732`, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.007943282347242814,
                  "TrainingMemory" -> 77032, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[11.830243726085866`, 0.19649334650765304`]}, 
                 "StandardDeviationHistory" -> {
                   Around[14110.10286640524, 688.661706563272]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.187144547762587`, 0.08682199358993073], 
                 "StandardDeviation" -> 
                 Around[6455.514326994925, 596.48230514236], "EvaluationTime" -> 
                 0.00002048389811985346, "TestSize" -> 200, "ModelMemory" -> 
                 27928, "ModelUtility" -> -9.484159152769212, "TrainingSize" -> 
                 60, "TrainingTime" -> 0.012589254117941668`, 
                 "TrainingMemory" -> 88256, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[10.187144547762587`, 0.06139242042357498]}, 
                 "StandardDeviationHistory" -> {
                   Around[6455.514326994925, 421.7766828239462]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.099332047651352`, 0.08985430441848224], 
                 "StandardDeviation" -> 
                 Around[5838.519736718871, 648.5554575633032], 
                 "EvaluationTime" -> 0.000028223443050669432`, "TestSize" -> 
                 89, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -9.38736390015218, "TrainingSize" -> 357, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 174048, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.099332047651352`, 0.06353658797310915]}, 
                 "StandardDeviationHistory" -> {
                   Around[5838.519736718871, 458.59796201855585`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000028223443050669432`, "ModelMemory" -> 
                27928, "StandardDeviation" -> 
                Around[5838.519736718871, 648.5554575633032], 
                "TrainingMemory" -> 174048, "TrainingTime" -> 
                0.027743348561182775`], "Index" -> 8], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.18956762453252, 0.08801811296452487], 
                 "StandardDeviation" -> 
                 Around[6471.6568777946395`, 601.6590981330382], 
                 "EvaluationTime" -> 0.00002048389811985346, "TestSize" -> 
                 200, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -9.486768430621876, "TrainingSize" -> 60, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 88192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.18956762453252, 0.06223820454445911]}, 
                 "StandardDeviationHistory" -> {
                   Around[6471.6568777946395`, 425.43722825245374`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[27.537337053052727`, 2.6500920194156214`], 
                 "StandardDeviation" -> 
                 Around[13002.487483707702`, 893.3765064916035], 
                 "EvaluationTime" -> 0.00001885405921651873, "TestSize" -> 
                 200, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -10.179702099604532`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 77032, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[27.537337053052727`, 1.8738980376971375`]}, 
                 "StandardDeviationHistory" -> {
                   Around[13002.487483707702`, 631.7125858929605]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.099776438905698`, 0.08994378362134967], 
                 "StandardDeviation" -> 
                 Around[5841.149868382088, 648.698021956021], 
                 "EvaluationTime" -> 0.000017807788679338343`, "TestSize" -> 
                 89, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -9.387809256651117, "TrainingSize" -> 357, 
                 "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 174080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.099776438905698`, 0.06359985932423187]}, 
                 "StandardDeviationHistory" -> {
                   Around[5841.149868382088, 458.6987702674023]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000017807788679338343`, "ModelMemory" -> 
                27928, "StandardDeviation" -> 
                Around[5841.149868382088, 648.698021956021], "TrainingMemory" -> 
                174080, "TrainingTime" -> 0.02367103399038563], "Index" -> 9],
             Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[1711.5419319581322`, 206.47294102969227`], 
                 "StandardDeviation" -> 
                 Around[22182.506624774014`, 1327.0142388563258`], 
                 "EvaluationTime" -> 0.000015848931924611128`, "TestSize" -> 
                 300, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -10.712110838560811`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 79128, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1711.5419319581322`, 145.99841673362553`]}, 
                 "StandardDeviationHistory" -> {
                   Around[22182.506624774014`, 938.3407670264128]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.158289482810313`, 0.06732548630854941], 
                 "StandardDeviation" -> 
                 Around[6250.60223027563, 478.63268709987346`], 
                 "EvaluationTime" -> 0.000017852350119216196`, "TestSize" -> 
                 300, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -9.448789848868545, "TrainingSize" -> 60, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 88256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.158289482810313`, 0.04760630791545734]}, 
                 "StandardDeviationHistory" -> {
                   Around[6250.60223027563, 338.4444187458595]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.099774905590147`, 0.08994083141917657], 
                 "StandardDeviation" -> 
                 Around[5841.142497256003, 648.6839155704935], 
                 "EvaluationTime" -> 0.000028223443050669432`, "TestSize" -> 
                 89, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -9.387807560049428, "TrainingSize" -> 357, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 174048, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.099774905590147`, 0.06359777180205584]}, 
                 "StandardDeviationHistory" -> {
                   Around[5841.142497256003, 458.68879554653773`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000028223443050669432`, "ModelMemory" -> 
                27928, "StandardDeviation" -> 
                Around[5841.142497256003, 648.6839155704935], 
                "TrainingMemory" -> 174048, "TrainingTime" -> 
                0.020436279546122364`], "Index" -> 10], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.788209662348844`, 0.06345600884040122], 
                 "StandardDeviation" -> 
                 Around[11386.816735308515`, 928.9999697165067], 
                 "EvaluationTime" -> 0.000013675813386831484`, "TestSize" -> 
                 300, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -10.049555026449891`, "TrainingSize" -> 60,
                  "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 88280, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.788209662348844`, 0.04487017415808121]}, 
                 "StandardDeviationHistory" -> {
                   Around[11386.816735308515`, 656.9021783086391]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.690007995480368`, 0.0990680518281835], 
                 "StandardDeviation" -> 
                 Around[10079.697686046959`, 1442.5197292271025`], 
                 "EvaluationTime" -> 0.000022418677696279538`, "TestSize" -> 
                 89, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -9.939656941482482, "TrainingSize" -> 357, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 174048, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.690007995480368`, 0.0700516912466489]}, 
                 "StandardDeviationHistory" -> {
                   Around[10079.697686046959`, 1020.0154825318665`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[11.57090321008157, 0.011576266601034696`], 
                 "StandardDeviation" -> 
                 Around[12483.392534589198`, 548.9380080531804], 
                 "EvaluationTime" -> 0.000016874854730880543`, "TestSize" -> 
                 400, "ModelMemory" -> 27928, 
                 "ModelUtility" -> -10.134068757389482`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 77160, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[11.57090321008157, 0.008185656614414978]}, 
                 "StandardDeviationHistory" -> {
                   Around[12483.392534589198`, 388.15778794543945`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000016874854730880543`, "ModelMemory" -> 
                27928, "StandardDeviation" -> 
                Around[12483.392534589198`, 548.9380080531804], 
                "TrainingMemory" -> 77160, "TrainingTime" -> 
                0.04337032161594576], "Index" -> 11], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 250], "LearningRate" -> 
                Association["Value" -> 0.2], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 6], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> "MeanSquaredError"]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 Around[10.850822860681951`, 0.2880527577841336], 
                 "StandardDeviation" -> 
                 Around[8005.136791275474, 754.6749317111936], 
                 "EvaluationTime" -> 0.0000630957344480193, "TestSize" -> 200,
                  "ModelMemory" -> 128792, 
                 "ModelUtility" -> -9.699687790597435, "TrainingSize" -> 60, 
                 "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
                 294272, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[10.850822860681951`, 0.20368405836864692`]}, 
                 "StandardDeviationHistory" -> {
                   Around[8005.136791275474, 533.6357618044797]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[11.838063560112257`, 1.4123764607775144`], 
                 "StandardDeviation" -> 
                 Around[4468.409861127608, 907.3482963917182], 
                 "EvaluationTime" -> 0.000056313172317671004`, "TestSize" -> 
                 89, "ModelMemory" -> 142080, 
                 "ModelUtility" -> -9.137767987150978, "TrainingSize" -> 357, 
                 "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                 585904, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[11.838063560112257`, 0.9987009730040363]}, 
                 "StandardDeviationHistory" -> {
                   Around[4468.409861127608, 641.5921332766453]}], 
                Association[
                "MeanCrossEntropy" -> 
                 Around[11.603168335986306`, 0.014233585414398937`], 
                 "StandardDeviation" -> 
                 Around[11392.702158354443`, 936.2255497823239], 
                 "EvaluationTime" -> 0.000023396783926626793`, "TestSize" -> 
                 300, "ModelMemory" -> 31824, 
                 "ModelUtility" -> -10.050188727521409`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 71104, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[11.603168335986306`, 0.010064664767119423`]}, 
                 "StandardDeviationHistory" -> {
                   Around[11392.702158354443`, 662.0114349711848]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000023396783926626793`, "ModelMemory" -> 
                31824, "StandardDeviation" -> 
                Around[11392.702158354443`, 936.2255497823239], 
                "TrainingMemory" -> 71104, "TrainingTime" -> 
                0.12080495974649288`], "Index" -> 12]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "GradientBoostedTrees", "LinearRegression", "NearestNeighbors",
                 "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                 "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 3], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "ModelMemory", "StandardDeviation", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 12], 
           Association["ID" -> 24296847792259]], "MaxTrainingSize" -> 446, 
         "PreprocessorEvaluationTime" -> 4.977294921875`4.*^-6, 
         "PreprocessorMemory" -> 65424, "InputDimension" -> 6, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.4189385332046727`, "VariableBudget" -> 
         True, "CheckpointingInfo" -> Association["Checkpointing" -> False], 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.8153219866721137`17.334106184434898*^9, 
         "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.19599999999999998`, 
             "ElapsedTimes" -> 0.3455498, "ExperimentCounts" -> 12], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 0.2799999999999999, 
             "ElapsedTimes" -> 0.3208921, "ExperimentCounts" -> 12], 
            Association[
            "TrainingSizes" -> 357, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.467844, "ExperimentCounts" -> 12]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association["ID" -> 24309732694147]]], "AnomalyDetector" -> None, 
       "Log" -> Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, "ID" -> 
              2677209384536529696], "f2" -> 
            Association[
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, "ID" -> 
              2094725855374892613], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.8}, "ID" -> 
              6072946621961155708], "f4" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              4631297986907657407], "f5" -> 
            Association[
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"no"}, "ID" -> 
              6304035131587355891], "f6" -> 
            Association[
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"southwest"}, 
              "ID" -> 8778114707174829320]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False]], "TrainingTime" -> 2.753124, 
         "MaxTrainingMemory" -> 22263176, "DataMemory" -> 142864, 
         "FunctionMemory" -> 414944, "LanguageVersion" -> {12.1, 1}, "Date" -> 
         DateObject[{2020, 11, 25, 19, 39, 47.0929712`9.425530952875286}, 
           "Instant", "Gregorian", 0.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{56, "female", 32.3, 3, "no", "northeast"}, {
        55, "male", 32.67, 1, "no", "southeast"}, {
        55, "female", 33.535, 2, "no", "northwest"}, {
        56, "female", 28.785, 0, "no", "northeast"}, {
        58, "male", 38., 0, "no", "southwest"}, {
        56, "male", 33.66, 4, "no", "southeast"}, {
        39, "female", 23.275, 3, "no", "northeast"}, {
        29, "male", 31.73, 2, "no", "northwest"}, {
        49, "female", 23.18, 2, "no", "northwest"}, {
        57, "male", 34.01, 0, "no", "northwest"}, {
        44, "female", 36.955, 1, "no", "northwest"}, {
        60, "male", 33.11, 3, "no", "southeast"}, {
        57, "female", 20.1, 1, "no", "southwest"}, {
        31, "female", 38.095, 1, "yes", "northeast"}, {
        64, "female", 32.965, 0, "no", "northwest"}, {
        52, "male", 26.4, 3, "no", "southeast"}, {
        58, "male", 23.3, 0, "no", "southwest"}, {
        25, "male", 25.74, 0, "no", "southeast"}, {
        19, "male", 30.4, 0, "no", "southwest"}, {
        31, "female", 29.1, 0, "no", "southwest"}, {
        46, "female", 32.3, 2, "no", "northeast"}, {
        60, "male", 28.9, 0, "no", "southwest"}, {
        30, "female", 30.9, 3, "no", "southwest"}, {
        18, "female", 29.165, 0, "no", "northeast"}, {
        39, "male", 26.41, 0, "yes", "northeast"}, {
        43, "male", 26.03, 0, "no", "northeast"}, {
        34, "female", 37.335, 2, "no", "northwest"}, {
        36, "female", 30.02, 0, "no", "northwest"}, {
        42, "female", 40.37, 2, "yes", "southeast"}, {
        18, "male", 33.535, 0, "yes", "northeast"}, {
        19, "female", 23.4, 2, "no", "southwest"}, {
        56, "male", 36.1, 3, "no", "southwest"}, {
        21, "female", 22.135, 0, "no", "northeast"}, {
        50, "female", 27.6, 1, "yes", "southwest"}, {
        63, "female", 36.3, 0, "no", "southeast"}, {
        54, "male", 25.1, 3, "yes", "southwest"}, {
        53, "male", 26.41, 2, "no", "northeast"}, {
        41, "female", 33.06, 2, "no", "northwest"}, {
        45, "female", 30.495, 1, "yes", "northwest"}, {
        64, "male", 26.41, 0, "no", "northeast"}, {
        32, "male", 30.8, 3, "no", "southwest"}, {
        40, "male", 34.105, 1, "no", "northeast"}, {
        52, "female", 37.525, 2, "no", "northwest"}, {
        31, "male", 27.645, 2, "no", "northeast"}, {
        58, "female", 27.17, 0, "no", "northwest"}, {
        21, "female", 25.8, 0, "no", "southwest"}, {
        34, "male", 30.8, 0, "yes", "southwest"}, {
        49, "female", 33.345, 2, "no", "northeast"}, {
        32, "male", 37.18, 2, "no", "southeast"}, {
        59, "male", 41.14, 1, "yes", "southeast"}, {
        53, "female", 33.25, 0, "no", "northeast"}, {
        36, "female", 25.84, 0, "no", "northwest"}, {
        47, "female", 45.32, 1, "no", "southeast"}, {
        43, "male", 27.8, 0, "yes", "southwest"}, {
        23, "female", 32.78, 2, "yes", "southeast"}, {
        24, "female", 22.6, 0, "no", "southwest"}, {
        34, "male", 34.675, 0, "no", "northeast"}, {
        44, "female", 20.235, 1, "yes", "northeast"}, {
        31, "female", 30.495, 3, "no", "northeast"}, {
        61, "male", 28.31, 1, "yes", "northwest"}, {
        21, "female", 34.6, 0, "no", "southwest"}, {
        60, "female", 27.55, 0, "no", "northeast"}, {
        41, "female", 32.2, 1, "no", "southwest"}, {
        32, "female", 37.145, 3, "no", "northeast"}, {
        44, "male", 31.35, 1, "yes", "northeast"}, {
        18, "female", 21.66, 0, "yes", "northeast"}, {
        56, "male", 40.3, 0, "no", "southwest"}, {
        33, "male", 42.46, 1, "no", "southeast"}, {
        59, "male", 28.785, 0, "no", "northwest"}, {
        35, "female", 34.21, 1, "no", "southeast"}, {
        56, "female", 28.31, 0, "no", "northeast"}, {
        52, "male", 24.32, 3, "yes", "northeast"}, {
        62, "female", 39.16, 0, "no", "southeast"}, {
        24, "female", 29.925, 0, "no", "northwest"}, {
        24, "male", 28.5, 0, "yes", "northeast"}, {
        36, "female", 26.2, 0, "no", "southwest"}, {
        59, "male", 29.83, 3, "yes", "northeast"}, {
        27, "female", 24.1, 0, "no", "southwest"}, {
        41, "male", 40.26, 0, "no", "southeast"}, {
        37, "female", 38.39, 0, "yes", "southeast"}, {
        48, "female", 22.8, 0, "no", "southwest"}, {
        54, "male", 40.565, 3, "yes", "northeast"}, {
        38, "male", 28.27, 1, "no", "southeast"}, {
        41, "male", 30.59, 2, "no", "northwest"}, {
        58, "male", 36.08, 0, "no", "southeast"}, {
        43, "female", 29.9, 1, "no", "southwest"}, {
        24, "female", 30.1, 3, "no", "southwest"}, {
        32, "male", 28.88, 0, "no", "northwest"}, {
        19, "male", 27.265, 2, "no", "northwest"}, {
        48, "female", 27.265, 1, "no", "northeast"}, {
        27, "male", 23.1, 0, "no", "southeast"}, {
        60, "female", 24.53, 0, "no", "southeast"}, {
        64, "female", 39.05, 3, "no", "southeast"}, {
        30, "male", 28.69, 3, "yes", "northwest"}, {
        21, "male", 35.53, 0, "no", "southeast"}, {
        64, "male", 37.905, 0, "no", "northwest"}, {
        55, "female", 26.8, 1, "no", "southwest"}, {
        45, "female", 36.3, 2, "no", "southeast"}, {
        41, "female", 21.755, 1, "no", "northeast"}, {
        46, "female", 19.95, 2, "no", "northwest"}, {
        41, "female", 31.02, 0, "no", "southeast"}, {
        41, "male", 28.8, 1, "no", "southwest"}, {
        42, "female", 25.3, 1, "no", "southwest"}, {
        23, "female", 28.12, 0, "no", "northwest"}, {
        35, "female", 35.815, 1, "no", "northwest"}, {
        59, "female", 32.395, 3, "no", "northeast"}, {
        44, "female", 26.41, 0, "no", "northwest"}, {
        32, "male", 35.2, 2, "no", "southwest"}, {
        48, "female", 35.91, 1, "no", "northeast"}, {
        18, "male", 35.2, 1, "no", "southeast"}, {
        51, "female", 34.96, 2, "yes", "northeast"}, {
        61, "male", 36.3, 1, "yes", "southwest"}, {
        58, "female", 25.2, 0, "no", "southwest"}, {
        48, "male", 40.15, 0, "no", "southeast"}, {
        63, "female", 32.2, 2, "yes", "southwest"}, {
        26, "female", 34.2, 2, "no", "southwest"}, {
        57, "male", 31.54, 0, "no", "northwest"}, {
        46, "female", 23.655, 1, "yes", "northwest"}, {
        45, "female", 27.83, 2, "no", "southeast"}, {
        41, "male", 37.05, 2, "no", "northwest"}, {
        37, "male", 29.64, 0, "no", "northwest"}, {
        20, "male", 27.3, 0, "yes", "southwest"}, {
        18, "female", 36.85, 0, "yes", "southeast"}, {
        23, "female", 28.49, 1, "yes", "southeast"}, {
        18, "female", 27.28, 3, "yes", "southeast"}, {
        45, "female", 30.9, 2, "no", "southwest"}, {
        19, "male", 36.955, 0, "yes", "northwest"}, {
        62, "male", 26.695, 0, "yes", "northeast"}, {
        19, "female", 34.7, 2, "yes", "southwest"}, {
        18, "female", 30.115, 0, "no", "northeast"}, {
        53, "male", 36.1, 1, "no", "southwest"}, {
        61, "female", 22.04, 0, "no", "northeast"}, {
        44, "female", 27.5, 1, "no", "southwest"}, {
        60, "male", 31.35, 3, "yes", "northwest"}, {
        55, "female", 35.2, 0, "yes", "southeast"}, {
        49, "female", 23.845, 3, "yes", "northeast"}, {
        61, "male", 36.1, 3, "no", "southwest"}, {
        44, "female", 38.06, 0, "yes", "southeast"}, {
        50, "male", 25.365, 2, "no", "northwest"}, {
        28, "female", 33.4, 0, "no", "southwest"}, {
        57, "male", 42.13, 1, "yes", "southeast"}, {
        54, "female", 21.47, 3, "no", "northwest"}, {
        53, "female", 28.1, 3, "no", "southwest"}, {
        41, "male", 23.94, 1, "no", "northeast"}, {
        62, "female", 38.095, 2, "no", "northeast"}, {
        48, "female", 32.3, 2, "no", "northeast"}, {
        64, "male", 23.76, 0, "yes", "southeast"}, {
        25, "female", 42.13, 1, "no", "southeast"}, {
        20, "male", 35.625, 3, "yes", "northwest"}, {
        24, "female", 23.21, 0, "no", "southeast"}, {
        27, "male", 31.13, 1, "yes", "southeast"}, {
        20, "female", 33., 0, "no", "southeast"}, {
        38, "female", 19.475, 2, "no", "northwest"}, {
        40, "female", 22.22, 2, "yes", "southeast"}, {
        45, "female", 39.995, 3, "no", "northeast"}, {
        51, "female", 33.915, 0, "no", "northeast"}, {
        20, "male", 33., 1, "no", "southwest"}, {
        27, "female", 31.4, 0, "yes", "southwest"}, {
        57, "male", 40.37, 0, "no", "southeast"}, {
        56, "female", 37.51, 2, "no", "southeast"}, {
        27, "female", 23.21, 1, "no", "southeast"}, {
        22, "male", 28.88, 0, "no", "northeast"}, {
        30, "female", 23.655, 3, "yes", "northwest"}, {
        25, "female", 24.3, 3, "no", "southwest"}, {
        49, "female", 34.77, 1, "no", "northwest"}, {
        40, "female", 29.3, 4, "no", "southwest"}, {
        21, "female", 16.815, 1, "no", "northeast"}, {
        31, "female", 26.62, 0, "no", "southeast"}, {
        35, "male", 39.71, 4, "no", "northeast"}, {
        48, "female", 33.11, 0, "yes", "southeast"}, {
        30, "male", 35.53, 0, "yes", "southeast"}, {
        27, "female", 17.955, 2, "yes", "northeast"}, {
        56, "female", 39.82, 0, "no", "southeast"}, {
        53, "male", 36.6, 3, "no", "southwest"}, {
        50, "female", 27.36, 0, "no", "northeast"}, {
        47, "male", 19.19, 1, "no", "northeast"}, {
        56, "male", 25.935, 0, "no", "northeast"}, {
        35, "male", 17.86, 1, "no", "northwest"}, {
        46, "female", 48.07, 2, "no", "northeast"}, {
        47, "female", 36.63, 1, "yes", "southeast"}, {
        38, "male", 31., 1, "no", "southwest"}, {
        48, "female", 27.93, 4, "no", "northwest"}, {
        60, "male", 36.955, 0, "no", "northeast"}, {
        27, "male", 45.9, 2, "no", "southwest"}, {
        43, "female", 20.045, 2, "yes", "northeast"}, {
        45, "male", 33.7, 1, "no", "southwest"}, {
        29, "female", 21.85, 0, "yes", "northeast"}, {
        58, "male", 34.39, 0, "no", "northwest"}, {
        61, "female", 25.08, 0, "no", "southeast"}, {
        47, "female", 36., 1, "no", "southwest"}, {
        59, "male", 29.7, 2, "no", "southeast"}, {
        52, "female", 44.7, 3, "no", "southwest"}, {
        62, "female", 33.2, 0, "no", "southwest"}, {
        52, "female", 46.75, 5, "no", "southeast"}, {
        30, "male", 31.57, 3, "no", "southeast"}, {
        29, "female", 25.9, 0, "no", "southwest"}, {
        40, "male", 32.775, 1, "yes", "northeast"}, {
        36, "male", 28.595, 3, "no", "northwest"}, {
        47, "female", 23.6, 1, "no", "southwest"}, {
        45, "male", 21.375, 0, "no", "northwest"}, {
        45, "male", 27.5, 3, "no", "southwest"}, {
        49, "female", 31.9, 5, "no", "southwest"}, {
        51, "male", 37., 0, "no", "southwest"}, {
        37, "female", 34.8, 2, "yes", "southwest"}, {
        42, "female", 37.9, 0, "no", "southwest"}, {
        46, "male", 43.89, 3, "no", "southeast"}, {
        18, "male", 23.085, 0, "no", "northeast"}, {
        41, "female", 32.6, 3, "no", "southwest"}, {
        53, "female", 32.3, 2, "no", "northeast"}, {
        19, "male", 30.25, 0, "yes", "southeast"}, {
        25, "male", 26.22, 0, "no", "northeast"}, {
        58, "male", 49.06, 0, "no", "southeast"}, {
        22, "male", 39.5, 0, "no", "southwest"}, {
        42, "male", 26.125, 2, "no", "northeast"}, {
        52, "male", 27.36, 0, "yes", "northwest"}, {
        25, "female", 22.515, 1, "no", "northwest"}, {
        20, "female", 22.42, 0, "yes", "northwest"}, {
        47, "male", 32.3, 1, "no", "southwest"}, {
        49, "female", 21.3, 1, "no", "southwest"}, {
        38, "female", 40.15, 0, "no", "southeast"}, {
        19, "male", 44.88, 0, "yes", "southeast"}, {
        22, "male", 35.6, 0, "yes", "southwest"}, {
        25, "male", 25.84, 1, "no", "northeast"}, {
        38, "male", 29.26, 2, "no", "northwest"}, {
        55, "female", 29.83, 0, "no", "northeast"}, {
        50, "male", 32.3, 1, "yes", "northeast"}, {
        25, "male", 33.33, 2, "yes", "southeast"}, {
        34, "female", 26.41, 1, "no", "northwest"}, {
        60, "female", 24.035, 0, "no", "northwest"}, {
        18, "male", 31.73, 0, "yes", "northeast"}, {
        54, "female", 31.9, 3, "no", "southeast"}, {
        60, "male", 29.64, 0, "no", "northeast"}, {
        56, "female", 25.3, 0, "no", "southwest"}, {
        36, "female", 26.885, 0, "no", "northwest"}, {
        28, "male", 22.515, 2, "no", "northeast"}, {
        50, "female", 27.83, 3, "no", "southeast"}, {
        45, "male", 30.495, 2, "no", "northwest"}, {
        23, "male", 41.91, 0, "no", "southeast"}, {
        18, "female", 26.315, 0, "no", "northeast"}, {
        48, "male", 29.7, 0, "no", "southeast"}, {
        30, "male", 37.8, 2, "yes", "southwest"}, {
        62, "male", 32.015, 0, "yes", "northeast"}, {
        55, "male", 30.685, 0, "yes", "northeast"}, {
        39, "male", 26.22, 1, "no", "northwest"}, {
        56, "female", 41.91, 0, "no", "southeast"}, {
        33, "female", 33.5, 0, "yes", "southwest"}, {
        35, "male", 34.77, 2, "no", "northwest"}, {
        44, "male", 25.365, 1, "no", "northwest"}, {
        51, "male", 24.795, 2, "yes", "northwest"}, {
        19, "male", 30.59, 0, "no", "northwest"}, {
        28, "female", 25.935, 1, "no", "northwest"}, {
        28, "male", 26.98, 2, "no", "northeast"}, {
        29, "male", 34.4, 0, "yes", "southwest"}, {
        28, "female", 26.315, 3, "no", "northwest"}, {
        49, "male", 25.84, 2, "yes", "northwest"}, {
        54, "male", 34.21, 2, "yes", "southeast"}, {
        19, "male", 20.615, 2, "no", "northwest"}, {
        49, "female", 41.47, 4, "no", "southeast"}, {
        55, "male", 38.28, 0, "no", "southeast"}, {
        47, "female", 32., 1, "no", "southwest"}, {
        19, "male", 26.03, 1, "yes", "northwest"}, {
        23, "male", 32.56, 0, "no", "southeast"}, {
        40, "female", 33., 3, "no", "southeast"}, {
        35, "female", 38.095, 2, "no", "northeast"}, {
        45, "female", 25.7, 3, "no", "southwest"}, {
        53, "male", 34.105, 0, "yes", "northeast"}, {
        32, "male", 30.03, 1, "no", "southeast"}, {
        62, "female", 32.965, 3, "no", "northwest"}, {
        56, "male", 32.11, 1, "no", "northeast"}, {
        50, "male", 36.2, 0, "no", "southwest"}, {
        57, "male", 28.975, 0, "yes", "northeast"}, {
        35, "male", 34.32, 3, "no", "southeast"}, {
        23, "male", 31.73, 3, "yes", "northeast"}, {
        39, "female", 32.5, 1, "no", "southwest"}, {
        56, "male", 39.6, 0, "no", "southwest"}, {
        36, "male", 41.895, 3, "yes", "northeast"}, {
        41, "female", 37.1, 2, "no", "southwest"}, {
        44, "female", 25.8, 1, "no", "southwest"}, {
        43, "female", 34.4, 3, "no", "southwest"}, {
        23, "male", 24.51, 0, "no", "northeast"}, {
        34, "male", 27.835, 1, "yes", "northwest"}, {
        23, "male", 27.36, 1, "no", "northwest"}, {
        55, "male", 32.775, 0, "no", "northwest"}, {
        38, "female", 19.95, 2, "no", "northeast"}, {
        36, "female", 29.92, 0, "no", "southeast"}, {
        18, "female", 38.28, 0, "no", "southeast"}, {
        63, "female", 26.22, 0, "no", "northwest"}, {
        55, "male", 28.975, 0, "no", "northeast"}, {
        62, "male", 37.4, 0, "no", "southwest"}, {
        19, "male", 21.755, 0, "no", "northwest"}, {
        54, "female", 47.41, 0, "yes", "southeast"}, {
        35, "male", 28.9, 3, "no", "southwest"}, {
        25, "female", 28.595, 0, "no", "northeast"}, {
        19, "male", 20.425, 0, "no", "northwest"}, {
        46, "male", 39.425, 1, "no", "northeast"}, {
        44, "male", 30.2, 2, "yes", "southwest"}, {
        39, "female", 32.8, 0, "no", "southwest"}, {
        50, "female", 46.09, 1, "no", "southeast"}, {
        32, "female", 24.6, 0, "yes", "southwest"}, {
        36, "female", 22.135, 3, "no", "northeast"}, {
        37, "female", 47.6, 2, "yes", "southwest"}, {
        24, "female", 27.72, 0, "no", "southeast"}, {
        42, "male", 26.9, 0, "no", "southwest"}, {
        32, "male", 28.93, 1, "yes", "southeast"}, {
        39, "male", 21.85, 1, "no", "northwest"}, {
        44, "female", 32.34, 1, "no", "southeast"}, {
        31, "female", 31.065, 0, "no", "northeast"}, {
        42, "female", 24.985, 2, "no", "northwest"}, {
        22, "female", 24.3, 0, "no", "southwest"}, {
        25, "male", 35.625, 0, "no", "northwest"}, {
        22, "female", 39.805, 0, "no", "northeast"}, {
        18, "male", 23.75, 0, "no", "northeast"}, {
        18, "male", 28.31, 1, "no", "northeast"}, {
        45, "male", 23.56, 2, "no", "northeast"}, {
        24, "male", 33.63, 4, "no", "northeast"}, {
        64, "male", 39.16, 1, "no", "southeast"}, {
        19, "male", 22.61, 0, "no", "northwest"}, {
        43, "female", 35.72, 2, "no", "northeast"}, {
        27, "female", 34.8, 1, "no", "southwest"}, {
        28, "female", 34.77, 0, "no", "northwest"}, {
        57, "female", 29.81, 0, "yes", "southeast"}, {
        35, "female", 34.105, 3, "yes", "northwest"}, {
        46, "female", 33.44, 1, "no", "southeast"}, {
        43, "male", 23.2, 0, "no", "southwest"}, {
        19, "female", 28.6, 5, "no", "southwest"}, {
        62, "male", 27.55, 1, "no", "northwest"}, {
        28, "male", 33., 3, "no", "southeast"}, {
        28, "male", 23.8, 2, "no", "southwest"}, {
        55, "female", 40.81, 3, "no", "southeast"}, {
        64, "male", 40.48, 0, "no", "southeast"}, {
        25, "female", 23.465, 0, "no", "northeast"}, {
        28, "male", 35.435, 0, "no", "northeast"}, {
        63, "female", 27.74, 0, "yes", "northeast"}, {
        52, "male", 36.765, 2, "no", "northwest"}, {
        54, "male", 31.6, 0, "no", "southwest"}, {
        47, "male", 36.08, 1, "yes", "southeast"}, {
        46, "female", 33.725, 1, "no", "northeast"}, {
        47, "female", 29.37, 1, "no", "southeast"}, {
        18, "female", 40.185, 0, "no", "northeast"}, {
        59, "male", 24.7, 0, "no", "northeast"}, {
        60, "female", 36.005, 0, "no", "northeast"}, {
        27, "male", 18.905, 3, "no", "northeast"}, {
        42, "male", 35.97, 2, "no", "southeast"}, {
        42, "female", 26.18, 1, "no", "southeast"}, {
        55, "female", 29.7, 2, "no", "southwest"}, {
        26, "female", 28.785, 0, "no", "northeast"}, {
        44, "female", 38.95, 0, "yes", "northwest"}, {
        40, "female", 25.46, 1, "no", "northeast"}, {
        29, "female", 20.235, 2, "no", "northwest"}, {
        62, "male", 30.02, 0, "no", "northwest"}, {
        41, "female", 28.05, 1, "no", "southeast"}, {
        34, "female", 33.25, 1, "no", "northeast"}, {
        20, "female", 24.42, 0, "yes", "southeast"}, {
        44, "female", 27.645, 0, "no", "northwest"}, {
        60, "female", 35.1, 0, "no", "southwest"}, {
        38, "female", 27.265, 1, "no", "northeast"}, {
        29, "male", 35.5, 2, "yes", "southwest"}, {
        33, "male", 24.795, 0, "yes", "northeast"}, {
        53, "male", 28.88, 0, "no", "northwest"}, {
        26, "female", 22.61, 0, "no", "northwest"}, {
        28, "female", 23.845, 2, "no", "northwest"}, {
        31, "male", 38.39, 2, "no", "southeast"}, {
        39, "female", 23.87, 5, "no", "southeast"}, {
        38, "male", 21.12, 3, "no", "southeast"}, {
        30, "male", 37.43, 3, "no", "northeast"}, {
        27, "female", 31.255, 1, "no", "northwest"}, {
        31, "female", 32.775, 2, "no", "northwest"}, {
        33, "male", 30.25, 0, "no", "southeast"}, {
        45, "female", 38.285, 0, "no", "northeast"}, {
        25, "female", 34.485, 0, "no", "northwest"}, {
        56, "female", 27.2, 0, "no", "southwest"}, {
        63, "female", 25.08, 0, "no", "northwest"}, {
        49, "male", 36.85, 0, "no", "southeast"}, {
        21, "male", 26.03, 0, "no", "northeast"}, {
        43, "male", 34.96, 1, "yes", "northeast"}, {
        36, "male", 31.5, 0, "no", "southwest"}, {
        34, "female", 33.7, 1, "no", "southwest"}, {
        35, "male", 38.6, 1, "no", "southwest"}, {
        39, "female", 31.92, 2, "no", "northwest"}, {
        51, "female", 40.66, 0, "no", "northeast"}, {
        47, "female", 27.645, 2, "yes", "northwest"}, {
        32, "female", 44.22, 0, "no", "southeast"}, {
        34, "male", 42.9, 1, "no", "southwest"}, {
        26, "male", 46.53, 1, "no", "southeast"}, {
        47, "male", 25.46, 2, "no", "northeast"}, {
        28, "male", 33.82, 0, "no", "northwest"}, {
        48, "male", 28., 1, "yes", "southwest"}, {
        26, "female", 29.64, 4, "no", "northeast"}, {
        22, "male", 25.175, 0, "no", "northwest"}, {
        25, "female", 33.99, 1, "no", "southeast"}, {
        18, "male", 25.46, 0, "no", "northeast"}, {
        46, "male", 27.6, 0, "no", "southwest"}, {
        53, "female", 26.7, 2, "no", "southwest"}, {
        61, "male", 35.86, 0, "yes", "southeast"}, {
        28, "female", 24.32, 1, "no", "northeast"}, {
        34, "female", 29.26, 3, "no", "southeast"}, {
        64, "male", 33.88, 0, "yes", "southeast"}, {
        42, "female", 29., 1, "no", "southwest"}, {
        50, "male", 30.97, 3, "no", "northwest"}, {
        64, "male", 24.7, 1, "no", "northwest"}, {
        53, "female", 38.06, 3, "no", "southeast"}, {
        53, "female", 37.43, 1, "no", "northwest"}, {
        39, "female", 18.3, 5, "yes", "southwest"}, {
        18, "male", 37.29, 0, "no", "southeast"}, {
        53, "female", 39.6, 1, "no", "southeast"}, {
        34, "male", 25.27, 1, "no", "northwest"}, {
        46, "male", 38.17, 2, "no", "southeast"}, {
        33, "female", 36.29, 3, "no", "northeast"}, {
        42, "male", 28.31, 3, "yes", "northwest"}, {
        20, "female", 37., 5, "no", "southwest"}, {
        23, "male", 17.385, 1, "no", "northwest"}, {
        33, "male", 29.4, 4, "no", "southwest"}, {
        35, "male", 27.61, 1, "no", "southeast"}, {
        33, "male", 42.4, 5, "no", "southwest"}, {
        26, "male", 32.49, 1, "no", "northeast"}, {
        45, "female", 35.3, 0, "no", "southwest"}, {
        29, "male", 37.29, 2, "no", "southeast"}, {
        62, "female", 26.29, 0, "yes", "southeast"}, {
        23, "male", 26.51, 0, "no", "southeast"}, {
        52, "female", 25.3, 2, "yes", "southeast"}, {
        51, "female", 36.67, 2, "no", "northwest"}, {
        18, "female", 24.09, 1, "no", "southeast"}, {
        45, "male", 24.31, 5, "no", "southeast"}, {
        41, "female", 28.31, 1, "no", "northwest"}, {
        36, "female", 29.92, 1, "no", "southeast"}, {
        39, "female", 41.8, 0, "no", "southeast"}, {
        31, "male", 28.595, 1, "no", "northwest"}, {
        28, "female", 37.62, 1, "no", "southeast"}, {
        51, "male", 39.7, 1, "no", "southwest"}, {
        48, "male", 36.67, 1, "no", "northwest"}, {
        47, "male", 38.94, 2, "yes", "southeast"}, {
        64, "female", 31.3, 2, "yes", "southwest"}, {
        44, "male", 39.52, 0, "no", "northwest"}, {
        30, "female", 33.33, 1, "no", "southeast"}, {
        51, "female", 37.05, 3, "yes", "northeast"}, {
        34, "male", 35.815, 0, "no", "northwest"}, {
        45, "male", 30.2, 1, "no", "southwest"}, {
        59, "female", 34.8, 2, "no", "southwest"}, {
        30, "male", 38.83, 1, "no", "southeast"}, {
        46, "male", 42.35, 3, "yes", "southeast"}, {
        51, "female", 36.385, 3, "no", "northwest"}, {
        64, "male", 34.5, 0, "no", "southwest"}, {
        19, "female", 35.15, 0, "no", "northwest"}, {
        52, "female", 24.86, 0, "no", "southeast"}, {
        58, "female", 32.965, 0, "no", "northeast"}, {
        26, "male", 31.065, 0, "no", "northwest"}, {
        45, "female", 25.175, 2, "no", "northeast"}, {
        18, "female", 26.73, 0, "no", "southeast"}, {
        22, "male", 37.07, 2, "yes", "southeast"}, {
        19, "male", 30.59, 0, "no", "northwest"}, {
        27, "female", 32.395, 1, "no", "northeast"}, {
        51, "male", 35.97, 1, "no", "southeast"}, {
        44, "male", 38.06, 1, "no", "southeast"}, {
        24, "female", 27.6, 0, "no", "southwest"}, {
        52, "male", 32.775, 3, "no", "northwest"}, {
        35, "female", 23.465, 2, "no", "northeast"}, {
        54, "female", 24.605, 3, "no", "northwest"}, {
        46, "female", 30.2, 2, "no", "southwest"}, {
        55, "male", 29.9, 0, "no", "southwest"}, {
        51, "female", 21.56, 1, "no", "southeast"}, {
        37, "male", 46.53, 3, "no", "southeast"}, {
        19, "female", 21.7, 0, "yes", "southwest"}, {
        47, "female", 33.915, 3, "no", "northwest"}, {
        49, "male", 28.7, 1, "no", "southwest"}, {
        28, "male", 24.3, 5, "no", "southwest"}, {
        18, "female", 30.305, 0, "no", "northeast"}, {
        24, "female", 26.6, 0, "no", "northeast"}, {
        49, "female", 36.63, 3, "no", "southeast"}, {
        39, "female", 26.315, 2, "no", "northwest"}, {
        50, "male", 27.455, 1, "no", "northeast"}, {
        19, "male", 35.53, 0, "no", "northwest"}, {
        31, "male", 39.49, 1, "no", "southeast"}, {
        59, "female", 27.83, 3, "no", "southeast"}, {
        26, "female", 22.23, 0, "no", "northwest"}, {
        18, "female", 31.35, 4, "no", "northeast"}, {
        18, "male", 43.01, 0, "no", "southeast"}, {
        19, "female", 24.51, 1, "no", "northwest"}, {
        31, "male", 25.935, 1, "no", "northwest"}, {
        23, "male", 50.38, 1, "no", "southeast"}, {
        54, "female", 30.8, 3, "no", "southwest"}, {
        32, "male", 33.63, 1, "yes", "northeast"}, {
        56, "male", 31.79, 2, "yes", "southeast"}, {
        19, "male", 20.7, 0, "no", "southwest"}, {
        23, "female", 34.96, 3, "no", "northwest"}, {
        55, "female", 26.98, 0, "no", "northwest"}, {
        18, "female", 33.88, 0, "no", "southeast"}, {
        19, "male", 34.8, 0, "yes", "southwest"}, {
        42, "male", 31.255, 0, "no", "northwest"}, {
        19, "female", 31.825, 1, "no", "northwest"}, {
        32, "female", 23.65, 1, "no", "southeast"}, {
        53, "male", 24.32, 0, "no", "northwest"}, {
        49, "male", 30.3, 0, "no", "southwest"}, {
        29, "male", 33.345, 2, "no", "northwest"}, {
        43, "female", 32.56, 3, "yes", "southeast"}, {
        34, "male", 27., 2, "no", "southwest"}, {
        22, "male", 26.84, 0, "no", "southeast"}, {
        21, "male", 22.3, 1, "no", "southwest"}, {
        34, "male", 25.3, 2, "yes", "southeast"}, {
        33, "male", 35.75, 1, "yes", "southeast"}, {
        39, "male", 32.34, 2, "no", "southeast"}, {
        25, "female", 20.8, 1, "no", "southwest"}, {
        19, "male", 19.8, 0, "no", "southwest"}, {
        61, "male", 43.4, 0, "no", "southwest"}, {
        36, "male", 34.43, 2, "no", "southeast"}, {
        45, "female", 33.1, 0, "no", "southwest"}, {
        20, "female", 31.46, 0, "no", "southeast"}, {
        50, "female", 33.7, 4, "no", "southwest"}, {
        19, "female", 18.6, 0, "no", "southwest"}, {
        19, "male", 24.6, 1, "no", "southwest"}, {
        29, "female", 27.94, 1, "yes", "southeast"}, {
        57, "female", 25.74, 2, "no", "southeast"}, {
        64, "female", 31.825, 2, "no", "northeast"}, {
        44, "female", 23.98, 2, "no", "southeast"}, {
        61, "male", 33.915, 0, "no", "northeast"}, {
        35, "male", 27.1, 1, "no", "southwest"}, {
        42, "female", 41.325, 1, "no", "northeast"}, {
        20, "female", 28.785, 0, "no", "northeast"}, {
        19, "male", 27.7, 0, "yes", "southwest"}, {
        40, "male", 24.97, 2, "no", "southeast"}, {
        19, "female", 24.7, 0, "no", "southwest"}, {
        31, "female", 25.8, 2, "no", "southwest"}, {
        18, "male", 21.78, 2, "no", "southeast"}, {
        27, "female", 36.08, 0, "yes", "southeast"}, {
        18, "male", 34.1, 0, "no", "southeast"}, {
        47, "male", 36.19, 0, "yes", "southeast"}, {
        26, "male", 17.67, 0, "no", "northwest"}, {
        45, "male", 30.36, 0, "yes", "southeast"}, {
        26, "female", 29.92, 2, "no", "southeast"}, {
        63, "female", 35.2, 1, "no", "southeast"}, {
        18, "male", 38.17, 0, "yes", "southeast"}, {
        56, "female", 35.8, 1, "no", "southwest"}, {
        26, "male", 20.8, 0, "no", "southwest"}, {
        26, "male", 29.45, 0, "no", "northeast"}, {
        40, "male", 32.3, 2, "no", "northwest"}, {
        21, "female", 33.63, 2, "no", "northwest"}, {
        59, "female", 36.52, 1, "no", "southeast"}, {
        49, "male", 22.515, 0, "no", "northeast"}, {
        32, "female", 29.8, 2, "no", "southwest"}, {
        19, "male", 33.1, 0, "no", "southwest"}, {
        40, "female", 29.6, 0, "no", "southwest"}, {
        45, "male", 20.35, 3, "no", "southeast"}, {
        48, "female", 25.85, 3, "yes", "southeast"}, {
        19, "female", 30.495, 0, "no", "northwest"}, {
        19, "male", 25.175, 0, "no", "northwest"}, {
        24, "male", 31.065, 0, "yes", "northeast"}, {
        51, "female", 34.1, 0, "no", "southeast"}, {
        29, "female", 32.11, 2, "no", "northwest"}, {
        57, "female", 23.18, 0, "no", "northwest"}, {
        27, "male", 33.155, 2, "no", "northwest"}, {
        29, "female", 31.16, 0, "no", "northeast"}, {
        26, "male", 33.915, 1, "no", "northwest"}, {
        37, "male", 34.1, 4, "yes", "southwest"}, {
        21, "male", 25.7, 4, "yes", "southwest"}, {
        22, "female", 30.4, 0, "yes", "northwest"}, {
        51, "male", 33.33, 3, "no", "southeast"}, {
        60, "male", 24.32, 0, "no", "northwest"}, {
        23, "male", 35.2, 1, "no", "southwest"}, {
        55, "male", 33.88, 3, "no", "southeast"}, {
        49, "male", 25.84, 1, "no", "northeast"}, {
        26, "male", 35.42, 0, "no", "southeast"}, {
        42, "male", 24.64, 0, "yes", "southeast"}, {
        62, "male", 39.93, 0, "no", "southeast"}, {
        59, "male", 37.1, 1, "no", "southwest"}, {
        38, "female", 40.565, 1, "no", "northwest"}, {
        30, "female", 27.7, 0, "no", "southwest"}, {
        46, "female", 34.6, 1, "yes", "southwest"}, {
        18, "male", 23.21, 0, "no", "southeast"}, {
        57, "female", 38., 2, "no", "southwest"}, {
        59, "male", 31.79, 2, "no", "southeast"}, {
        62, "female", 29.92, 0, "no", "southeast"}, {
        48, "female", 32.23, 1, "no", "southeast"}, {
        49, "male", 29.83, 1, "no", "northeast"}, {
        21, "female", 21.85, 1, "yes", "northeast"}, {
        23, "female", 42.75, 1, "yes", "northeast"}, {
        35, "male", 24.42, 3, "yes", "southeast"}, {
        47, "male", 19.57, 1, "no", "northwest"}, {
        48, "male", 37.29, 2, "no", "southeast"}, {
        31, "male", 26.885, 1, "no", "northeast"}, {
        50, "female", 28.16, 3, "no", "southeast"}, {
        54, "female", 35.815, 3, "no", "northwest"}, {
        57, "male", 18.335, 0, "no", "northeast"}, {
        34, "male", 34.21, 0, "no", "southeast"}, {
        34, "female", 23.56, 0, "no", "northeast"}, {
        52, "male", 32.205, 3, "no", "northeast"}, {
        63, "male", 41.325, 3, "no", "northwest"}, {
        29, "female", 29.59, 1, "no", "southeast"}, {
        31, "female", 32.68, 1, "no", "northwest"}, {
        27, "male", 28.5, 0, "yes", "northwest"}, {
        56, "male", 26.695, 1, "yes", "northwest"}, {
        50, "male", 37.07, 1, "no", "southeast"}, {
        34, "male", 42.13, 2, "no", "southeast"}, {
        25, "male", 30.59, 0, "no", "northeast"}, {
        18, "male", 39.14, 0, "no", "northeast"}, {
        52, "male", 33.25, 0, "no", "northeast"}, {
        52, "female", 31.73, 2, "no", "northwest"}, {
        18, "female", 35.625, 0, "no", "northeast"}, {
        28, "female", 26.51, 2, "no", "southeast"}, {
        44, "male", 29.735, 2, "no", "northeast"}, {
        37, "female", 25.555, 1, "yes", "northeast"}, {
        39, "male", 42.655, 0, "no", "northeast"}, {
        49, "female", 27.1, 1, "no", "southwest"}, {
        22, "female", 36., 0, "no", "southwest"}, {
        18, "male", 17.29, 2, "yes", "northeast"}, {
        40, "male", 35.3, 3, "no", "southwest"}, {
        40, "female", 32.775, 2, "yes", "northwest"}, {
        58, "male", 32.01, 1, "no", "southeast"}, {
        18, "male", 23.32, 1, "no", "southeast"}, {
        40, "male", 19.8, 1, "yes", "southeast"}, {
        43, "male", 27.36, 3, "no", "northeast"}, {
        20, "female", 31.92, 0, "no", "northwest"}, {
        22, "female", 27.1, 0, "no", "southwest"}, {
        54, "female", 27.645, 1, "no", "northwest"}, {
        63, "male", 33.66, 3, "no", "southeast"}, {
        37, "male", 36.19, 0, "no", "southeast"}, {
        30, "female", 28.38, 1, "yes", "southeast"}, {
        64, "female", 35.97, 0, "no", "southeast"}, {
        62, "male", 32.11, 0, "no", "northeast"}, {
        51, "female", 37.73, 1, "no", "southeast"}, {
        22, "female", 20.235, 0, "no", "northwest"}, {
        29, "male", 32.11, 2, "no", "northwest"}, {
        33, "male", 33.44, 5, "no", "southeast"}, {
        37, "male", 28.025, 2, "no", "northwest"}, {
        49, "female", 42.68, 2, "no", "southeast"}, {
        42, "male", 34.1, 0, "no", "southwest"}, {
        28, "female", 33., 2, "no", "southeast"}, {
        31, "female", 25.74, 0, "no", "southeast"}, {
        50, "female", 25.6, 0, "no", "southwest"}, {
        48, "male", 35.625, 4, "no", "northeast"}, {
        44, "male", 22.135, 2, "no", "northeast"}, {
        34, "male", 22.42, 2, "no", "northeast"}, {
        19, "male", 28.4, 1, "no", "southwest"}, {
        56, "female", 25.65, 0, "no", "northwest"}, {
        58, "male", 28.595, 0, "no", "northwest"}, {
        51, "male", 30.03, 1, "no", "southeast"}, {
        19, "female", 32.11, 0, "no", "northwest"}, {
        49, "male", 32.3, 3, "no", "northwest"}, {
        52, "female", 30.78, 1, "no", "northeast"}, {
        19, "female", 28.88, 0, "yes", "northwest"}, {
        30, "male", 24.13, 1, "no", "northwest"}, {
        38, "male", 27.835, 2, "no", "northwest"}, {
        61, "female", 36.385, 1, "yes", "northeast"}, {
        62, "female", 36.86, 1, "no", "northeast"}, {
        63, "male", 36.765, 0, "no", "northeast"}, {
        24, "female", 30.21, 3, "no", "northwest"}, {
        24, "male", 35.86, 0, "no", "southeast"}, {
        36, "female", 27.74, 0, "no", "northeast"}, {
        45, "male", 24.035, 2, "no", "northeast"}, {
        64, "female", 22.99, 0, "yes", "southeast"}, {
        42, "female", 29.48, 2, "no", "southeast"}, {
        54, "male", 32.775, 0, "no", "northeast"}, {
        63, "female", 37.7, 0, "yes", "southwest"}, {
        26, "female", 19.8, 1, "no", "southwest"}, {
        40, "female", 23.37, 3, "no", "northeast"}, {
        20, "female", 28.975, 0, "no", "northwest"}, {
        27, "female", 20.045, 3, "yes", "northwest"}, {
        47, "female", 26.6, 2, "no", "northeast"}, {
        23, "female", 39.27, 2, "no", "southeast"}, {
        61, "female", 39.1, 2, "no", "southwest"}, {
        64, "female", 30.115, 3, "no", "northwest"}, {
        21, "male", 36.86, 0, "no", "northwest"}, {
        52, "female", 23.18, 0, "no", "northeast"}, {
        43, "male", 20.13, 2, "yes", "southeast"}, {
        41, "male", 34.21, 1, "no", "southeast"}, {
        24, "male", 32.7, 0, "yes", "southwest"}, {
        24, "female", 24.225, 0, "no", "northwest"}, {
        22, "female", 28.82, 0, "no", "southeast"}, {
        35, "female", 35.86, 2, "no", "southeast"}, {
        18, "female", 40.28, 0, "no", "northeast"}, {
        58, "female", 22.77, 0, "no", "southeast"}, {
        52, "female", 38.38, 2, "no", "northeast"}, {
        63, "male", 21.66, 1, "no", "northwest"}, {
        30, "female", 19.95, 3, "no", "northwest"}, {
        21, "male", 31.02, 0, "no", "southeast"}, {
        63, "female", 36.85, 0, "no", "southeast"}, {
        36, "female", 19.855, 0, "no", "northeast"}, {
        18, "male", 28.5, 0, "no", "northeast"}, {
        35, "male", 27.74, 2, "yes", "northeast"}, {
        18, "male", 29.37, 1, "no", "southeast"}, {
        37, "male", 30.875, 3, "no", "northwest"}, {
        50, "female", 44.745, 0, "no", "northeast"}, {
        45, "female", 28.6, 2, "no", "southeast"}, {
        55, "female", 37.1, 0, "no", "southwest"}, {
        63, "female", 21.66, 0, "no", "northeast"}, {
        57, "female", 30.495, 0, "no", "northwest"}, {
        46, "male", 33.345, 1, "no", "northeast"}, {
        60, "female", 28.7, 1, "no", "southwest"}, {
        60, "female", 32.45, 0, "yes", "southeast"}, {
        40, "male", 29.9, 2, "no", "southwest"}, {
        53, "male", 30.495, 0, "no", "northeast"}, {
        56, "female", 28.595, 0, "no", "northeast"}, {
        40, "female", 27.4, 1, "no", "southwest"}, {
        57, "female", 31.16, 0, "yes", "northwest"}, {
        19, "female", 30.02, 0, "yes", "northwest"}, {
        53, "female", 36.86, 3, "yes", "northwest"}, {
        51, "male", 32.3, 1, "no", "northeast"}, {
        36, "female", 29.04, 4, "no", "southeast"}, {
        18, "male", 21.565, 0, "yes", "northeast"}, {
        28, "male", 36.4, 1, "yes", "southwest"}, {
        22, "female", 21.28, 3, "no", "northwest"}, {
        59, "female", 26.695, 3, "no", "northwest"}, {
        23, "female", 23.18, 2, "no", "northwest"}, {
        61, "male", 31.57, 0, "no", "southeast"}, {
        53, "female", 35.9, 2, "no", "southwest"}, {
        48, "male", 40.565, 2, "yes", "northwest"}, {
        25, "male", 33.66, 4, "no", "southeast"}, {
        37, "female", 30.8, 2, "no", "southeast"}, {
        29, "male", 28.975, 1, "no", "northeast"}, {
        24, "male", 28.5, 2, "no", "northwest"}, {
        40, "male", 30.875, 4, "no", "northwest"}, {
        32, "female", 28.93, 0, "no", "southeast"}, {
        45, "female", 35.815, 0, "no", "northwest"}, {
        60, "female", 30.5, 0, "no", "southwest"}, {
        48, "female", 28.9, 0, "no", "southwest"}, {
        47, "male", 29.8, 3, "yes", "southwest"}, {
        24, "male", 25.8, 0, "no", "southwest"}, {
        34, "male", 21.375, 0, "no", "northeast"}, {
        37, "female", 34.105, 1, "no", "northwest"}, {
        36, "male", 29.7, 0, "no", "southeast"}, {
        38, "male", 19.3, 0, "yes", "southwest"}, {
        53, "male", 20.9, 0, "yes", "southeast"}, {
        37, "female", 26.4, 0, "yes", "southeast"}, {
        19, "male", 28.7, 0, "no", "southwest"}, {
        29, "male", 29.64, 1, "no", "northeast"}, {
        18, "female", 38.28, 0, "no", "southeast"}, {
        33, "female", 39.82, 1, "no", "southeast"}, {
        34, "male", 32.8, 1, "no", "southwest"}, {
        29, "female", 26.03, 0, "no", "northwest"}, {
        39, "male", 29.925, 1, "yes", "northeast"}, {
        18, "male", 53.13, 0, "no", "southeast"}, {
        20, "male", 27.93, 0, "no", "northeast"}, {
        47, "male", 47.52, 1, "no", "southeast"}, {
        42, "male", 24.605, 2, "yes", "northeast"}, {
        47, "female", 27.83, 0, "yes", "southeast"}, {
        33, "female", 42.94, 3, "no", "northwest"}, {
        58, "male", 34.865, 0, "no", "northeast"}, {
        41, "female", 32.965, 0, "no", "northwest"}, {
        23, "male", 23.845, 0, "no", "northeast"}, {
        25, "female", 30.3, 0, "no", "southwest"}, {
        18, "male", 30.4, 3, "no", "northeast"}, {
        45, "female", 31.79, 0, "no", "southeast"}, {
        36, "male", 30.875, 1, "no", "northwest"}, {
        20, "female", 26.84, 1, "yes", "southeast"}, {
        44, "male", 37.1, 2, "no", "southwest"}, {
        61, "male", 33.535, 0, "no", "northeast"}, {
        49, "male", 35.86, 0, "no", "southeast"}, {
        19, "female", 28.31, 0, "yes", "northwest"}, {
        32, "female", 29.735, 0, "no", "northwest"}, {
        55, "female", 32.395, 1, "no", "northeast"}, {
        23, "female", 33.4, 0, "no", "southwest"}, {
        38, "female", 27.835, 2, "no", "northeast"}, {
        59, "male", 27.5, 1, "no", "southwest"}, {
        20, "male", 29.735, 0, "no", "northwest"}, {
        39, "female", 22.8, 3, "no", "northeast"}, {
        33, "male", 22.705, 0, "no", "northwest"}, {
        43, "female", 26.885, 0, "yes", "northwest"}, {
        43, "female", 24.7, 2, "yes", "northwest"}, {
        49, "female", 22.61, 1, "no", "northwest"}, {
        62, "male", 31.46, 1, "no", "southeast"}, {
        42, "female", 33.155, 1, "no", "northeast"}, {
        24, "male", 29.3, 0, "no", "southwest"}, {
        18, "male", 22.99, 0, "no", "northeast"}, {
        35, "female", 43.34, 2, "no", "southeast"}, {
        53, "male", 28.6, 3, "no", "southwest"}, {
        27, "male", 29.15, 0, "yes", "southeast"}, {
        22, "male", 31.73, 0, "no", "northeast"}, {
        34, "female", 27.72, 0, "no", "southeast"}, {
        37, "male", 29.83, 2, "no", "northeast"}, {
        40, "female", 41.42, 1, "no", "northwest"}, {
        20, "male", 28.025, 1, "yes", "northwest"}, {
        20, "male", 35.31, 1, "no", "southeast"}, {
        46, "male", 30.495, 3, "yes", "northwest"}, {
        31, "male", 28.5, 5, "no", "northeast"}, {
        61, "male", 23.655, 0, "no", "northeast"}, {
        18, "male", 31.68, 2, "yes", "southeast"}, {
        45, "male", 39.805, 0, "no", "northeast"}, {
        35, "female", 28.025, 0, "yes", "northwest"}, {
        19, "male", 20.3, 0, "no", "southwest"}, {
        18, "male", 34.43, 0, "no", "southeast"}, {
        48, "female", 28.88, 1, "no", "northwest"}, {
        37, "female", 30.78, 0, "yes", "northeast"}, {
        42, "male", 26.07, 1, "yes", "southeast"}, {
        40, "female", 29.81, 1, "no", "southeast"}, {
        30, "female", 21.945, 1, "no", "northeast"}, {
        37, "male", 22.705, 3, "no", "northeast"}, {
        33, "female", 32.9, 2, "no", "southwest"}, {
        53, "male", 31.35, 0, "no", "southeast"}, {
        26, "male", 30., 1, "no", "southwest"}, {
        43, "male", 25.52, 5, "no", "southeast"}, {
        45, "male", 22.895, 0, "yes", "northeast"}, {
        31, "female", 21.755, 0, "no", "northwest"}, {
        18, "female", 31.35, 0, "no", "southeast"}, {
        56, "male", 34.43, 0, "no", "southeast"}, {
        33, "female", 35.53, 0, "yes", "northwest"}, {
        20, "female", 21.8, 0, "yes", "southwest"}, {
        54, "male", 30.21, 0, "no", "northwest"}, {
        38, "male", 19.95, 1, "no", "northwest"}, {
        26, "female", 42.4, 1, "no", "southwest"}, {
        20, "female", 30.59, 0, "no", "northeast"}, {
        21, "female", 26.4, 1, "no", "southwest"}, {
        40, "male", 41.23, 1, "no", "northeast"}, {
        39, "female", 34.32, 5, "no", "southeast"}, {
        34, "female", 27.5, 1, "no", "southwest"}, {
        44, "male", 30.69, 2, "no", "southeast"}, {
        64, "male", 36.96, 2, "yes", "southeast"}, {
        38, "male", 28.025, 1, "no", "northeast"}, {
        55, "female", 30.5, 0, "no", "southwest"}, {
        33, "male", 27.455, 2, "no", "northwest"}, {
        53, "female", 24.795, 1, "no", "northwest"}, {
        40, "female", 36.19, 0, "no", "southeast"}, {
        51, "male", 25.4, 0, "no", "southwest"}, {
        36, "male", 35.2, 1, "yes", "southeast"}, {
        48, "male", 24.42, 0, "yes", "southeast"}, {
        58, "female", 28.215, 0, "no", "northwest"}, {
        31, "male", 31.065, 3, "no", "northwest"}, {
        59, "male", 25.46, 1, "no", "northeast"}, {
        18, "male", 27.36, 1, "yes", "northeast"}, {
        22, "male", 31.35, 1, "no", "northwest"}, {
        19, "female", 22.515, 0, "no", "northwest"}, {
        27, "male", 30.5, 0, "no", "southwest"}, {
        26, "male", 32.9, 2, "yes", "southwest"}, {
        25, "female", 30.2, 0, "yes", "southwest"}, {
        38, "male", 37.05, 1, "no", "northeast"}, {
        48, "male", 30.78, 3, "no", "northeast"}, {
        54, "male", 24.035, 0, "no", "northeast"}, {
        63, "female", 31.8, 0, "no", "southwest"}, {
        60, "male", 32.8, 0, "yes", "southwest"}, {
        28, "female", 33.11, 0, "no", "southeast"}, {
        18, "female", 39.16, 0, "no", "southeast"}, {
        54, "female", 32.68, 0, "no", "northeast"}, {
        29, "male", 27.94, 0, "no", "southeast"}, {
        58, "male", 35.7, 0, "no", "southwest"}, {
        30, "male", 35.3, 0, "yes", "southwest"}, {
        42, "female", 36.195, 1, "no", "northwest"}, {
        32, "female", 17.765, 2, "yes", "northwest"}, {
        52, "male", 30.2, 1, "no", "southwest"}, {
        52, "female", 18.335, 0, "no", "northwest"}, {
        32, "male", 37.335, 1, "no", "northeast"}, {
        32, "female", 41.1, 0, "no", "southwest"}, {
        53, "male", 41.47, 0, "no", "southeast"}, {
        32, "male", 31.5, 1, "no", "southwest"}, {
        30, "male", 44.22, 2, "no", "southeast"}, {
        52, "male", 36.7, 0, "no", "southwest"}, {
        55, "female", 25.365, 3, "no", "northeast"}, {
        51, "male", 23.21, 1, "yes", "southeast"}, {
        43, "male", 38.06, 2, "yes", "southeast"}, {
        30, "male", 22.99, 2, "yes", "northwest"}, {
        19, "male", 34.9, 0, "yes", "southwest"}, {
        26, "female", 29.355, 2, "no", "northeast"}, {
        31, "male", 36.3, 2, "yes", "southwest"}, {
        30, "female", 32.4, 1, "no", "southwest"}, {
        39, "male", 35.3, 2, "yes", "southwest"}, {
        37, "female", 27.74, 3, "no", "northwest"}, {
        39, "male", 45.43, 2, "no", "southeast"}, {
        24, "female", 39.49, 0, "no", "southeast"}, {
        27, "male", 33.66, 0, "no", "southeast"}, {
        22, "male", 28.31, 1, "no", "northwest"}, {
        41, "male", 35.75, 1, "yes", "southeast"}, {
        26, "female", 29.92, 1, "no", "southeast"}, {
        44, "female", 25., 1, "no", "southwest"}, {
        18, "male", 33.77, 1, "no", "southeast"}, {
        61, "female", 44., 0, "no", "southwest"}, {
        36, "male", 33.4, 2, "yes", "southwest"}, {
        29, "male", 29.735, 2, "no", "northwest"}, {
        34, "female", 19., 3, "no", "northeast"}, {
        26, "female", 29.48, 1, "no", "southeast"}, {
        38, "female", 28., 3, "no", "southwest"}, {
        55, "male", 33., 0, "no", "southeast"}, {
        19, "male", 20.9, 1, "no", "southwest"}, {
        55, "male", 35.245, 1, "no", "northeast"}, {
        42, "female", 23.37, 0, "yes", "northeast"}, {
        54, "female", 32.3, 1, "no", "northeast"}, {
        19, "male", 34.1, 0, "no", "southwest"}, {
        62, "female", 39.2, 0, "no", "southwest"}, {
        30, "female", 22.895, 1, "no", "northeast"}, {
        59, "female", 35.2, 0, "no", "southeast"}, {
        49, "female", 30.78, 1, "no", "northeast"}, {
        18, "male", 30.03, 1, "no", "southeast"}, {
        54, "male", 30.8, 1, "yes", "southeast"}, {
        36, "male", 28.88, 3, "no", "northeast"}, {
        43, "male", 30.1, 1, "no", "southwest"}, {
        41, "male", 21.78, 1, "no", "southeast"}, {
        39, "male", 34.1, 2, "no", "southeast"}, {
        30, "female", 28.405, 1, "no", "northwest"}, {
        19, "female", 40.5, 0, "no", "southwest"}, {
        21, "male", 28.975, 0, "no", "northwest"}, {
        23, "female", 31.4, 0, "yes", "southwest"}, {
        62, "female", 32.68, 0, "no", "northwest"}, {
        40, "male", 25.08, 0, "no", "southeast"}, {
        29, "female", 35.53, 0, "no", "southeast"}, {
        20, "male", 32.395, 1, "no", "northwest"}, {
        37, "female", 29.5, 2, "no", "southwest"}, {
        44, "male", 34.32, 1, "no", "southeast"}}, "Output" -> CompressedData["
1:eJw9WXdcjf3/NvNkZ5UdMjKLzMhlZJQQmSFFoicjM0TZZCahoT206zRPnep0
dntrotNEUVY9ZHw/vc/v9eufXq+678+83td43xMsjm+x7N6tWzf7nt26JY27
0TxBNwtKQ4YtTxstxtzGyMnl7VJocH/d0hJL0FAwserHXAnYn+tdDDJxtKkz
5PzcdIQEbMQB4xiMzWxYfvCVEB1KZs9NZkug964ifOKOdLTdyDR5Pycby+fv
S9Z0lOKWfJKFhVsLsoQrI7ZxcjDLtPmujkUFNt9/dkwwTYJtGS8DNsb6oNf2
gbPm+rrgtYbSFVeLCCzrW+bvaC4AG2a9PVcKzovW4KDcOFwcPnIsz4OH/wQH
Q00iiqHsNP7Avvhk3J/2ccBNy0T4P17SfdbzOGhtCOrb/3gDZpa4Ny5pqkFF
XsfWScIgnHFR6yWZLEPUE8vbsfMCcGfF/obBX8qg/U/4GPfx2Uhe37+HS2Y5
Pu1eqafVLoaaa4nyNP00tD977RJtWYdFVquPrB2bg9FzXmvcvBEHT79JXB0Z
F6EDuSP/7qih+fWDY9HN+XLnybdSyC8Mi5SaeSNyrfzCaRM5OpecyDu9QoTL
YxdZHVzBQUHp9pa175vwUmK40NZPhH9ntD/b+zgOFWZnN33i8WF3IXBmol0t
Fo7im/o8lYNNq9R9nj+2sAssDopBru7GwtiJxUjLUJ2iK0/EN5vtl6ZrV8P5
o/3y+Efe4J12UbtXkEn7bj+XDKcH9V92pCXhV8jnooeb61B/zSs3uSEbF4dF
rtWOF+HkvGpH0/ES/Ot+zjMvWoqzm8aNWHIpDvcMPvSqFkmw9emEB2fWl+P0
mifthzZlYR3b4D79ILjUbXx/QlMOdo2c10NjaR7dC6/x/NiQa1gaTONMN0qg
cffz6nCNn+V7Ywof0wb1iw+Ma4KN8g+fczbxSK0bNpa7k0f4CtCW4DDbSHoI
Dwd132766BSNYcsl1fHzI5EZ7bTQuqMUa3va9fM5JUDC198ldlb+0MweLP0S
KsP4G83Gj6zzMW6EtZHDyhIk/6v8o+bzM0w+08N9dUY2fNMsN/aaIafzEQXz
cT4Hlry8LMJJ87cMPKz/Mn6LZhIeCr5PW+qUhDjZ2TSHGyl4vOfPqiW9AnF+
58v5Z/7EIymqZ9NmhxwIbgbvuNDJg20XcPU42Hfg2cvBkgrs6Rrgjzv65I00
npLTQOPZT24iPDwZJ0WPGbdGaNqnQZM9qDmyiXBYOTUK62f/nfBipgRsexpb
ZpTSuch9+TR+rDkPz1+73JocEIuqH5etbeLy8Y1tPypIDkNZn2WDGgvxu/1M
TXV2Ie2nZwAf+mtP/rCJksP+S/TmbbZVVH8csRzmc7dpLSgvoTpr4QipXmY9
z8In++Xz/2Slgi2vYvPNRrrXH9ENhNtkpzKkf4632rK+CvtlH7YHvGnC1oKP
kzVdXhOOlWUvofHs76MToibc/W3ZEb5XhlPsIqs/Seh+LmQlY6KN3QXN9Fzs
Zhfr/UKI1T8/NvsYVoLXe8iwtxtCwGiq2wzDWmhYGGjYXi6ncfL+1FA9rd3/
gvCsNzwFRd3e9FD5XYT+LiFXt30TQG3K1t5T9YWK59q8MIsRR1UPOdK03Kbj
lBgzLUfW8r9JwbY5VlochmUe27zDXH1RdNysj93WIvwpsXsfNDWG7vNLogBD
Kk/OPvIhD8LiGZbv015iy1SfO9GmEXD2kCvN7luMg3ur14i712NMc+0CWd9a
lDZZzzDYlIs7RW9qTEPEVIf63SSIMB5UqDGwAq2ZwpXiCj66yig+Twz22ijH
X7FwYMRw1kaA0KvG63U768GuZ8iqE/HYWOi85+k1MaoPdzvuWivD/i5irgyH
47r0S9e2FRNfNQ9PRSGj66Dz+XBLefqoo1WC6tk6ZfptZYTv0wl8TIg+efiz
XiadS9l6Cdqn7Xm40jCL8LP6uQxnazxVXBs49Jzz3FCqz9BRdRjRmf1J+wkX
+R1b60oj+MQTmQt4OMR+gor5yPbVTzj1SILVd22aDOdkwKQu0OPRqToF7gy4
qJM+Txlol4FZE8Z/y/FzB4P37utD0rHkwq83Xo7VGMImGp75VlHvKwPB6CAo
ZImE3j9g4E51H6idhpX5h0qtisrA/n1+x7BwWPi+0nmbkoPJTC6El9Opfoa3
ZtB5dKrF0/nvYHzdhfO5++Xwzg3Nd60Kwckfg96XLebSelb3k+BcmveounP1
xK+P/eXYsv6F43bleOKlUdaZVDeudjVo//SwIzKyknjN4bWM6ne1txiL2QOF
LnHIWDzJoG5DDOxXb7izc30x5rcu0k85xiedUo/3hOGHXjrmM33p3P2OppF+
zNaso/1KjBuJv9uD69FxpsbTuTkRO1rmpOSHiulcm0fVIkxvh2l38wTid6V9
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
/xqchK5Yer45Bf8DqQ4IyQ==
       "]], "Predictions" -> CompressedData["
1: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
LiSNoRX5+Cp7PeBYWC1cz7v5latzcSPmz1bRZBp8zhx/lWnUgo/USsrOXzSw
B4fFX9LIoCcOufS1FcOh9zvHz6cIR8voY+EydUh35Xvzu68IFg10E+F1Begr
7OLXiGNg/jQrUFOQhVmJZb7Ruu2YPvM55qT6IAp+3DYZucRB3/fDlaHbuWAd
3FC/u64WSXD3GpMawGyD/aHeM1kIuPNDbl3uACaUP5Zt9KuCRIXxtKRzFTQL
PWU1lmTh0vT8lbfrSGjcusNti2AIhC5UxrRfG0CdF2mUSSpH9Cyf6nwGFeu/
1fap7krHikgRPbInG/1xgTLODf2QWxC/qhtDg3B45365rRXYPVDbLXCyHNdS
7veqBObhVa1yiap7EzpPX9j7RecD5Ccmq+5W1MF8be76+eEWDM/Ibq/f1wC7
y+auNJtc1Jifou82Z+G8uK+a68U8WOkd1G4dq8XEQgit+UsN1ppvejsYF4pA
pw83bmYP4RR/L9u/qxrsazNjySw67M6JO/yzyEGB8fLJg6xiCD5m/2XYk6B/
qemDkmYGmoj+iq76ZZh5uWj54Nt+TGxdd+rFs3rIPVK6p/ijFKs+3bOqelSE
xkpbge2GkXillfHp8/JSiC7xNu5MYeJ/CDTzag==
     "], "Distributions" -> {
      NormalDistribution[15372.743581817165`, 1642.140758294793], 
      NormalDistribution[14004.468104541975`, 1642.140758294793], 
      NormalDistribution[15551.037816950857`, 1642.140758294793], 
      NormalDistribution[13107.601338014994`, 1642.140758294793], 
      NormalDistribution[12942.167513747401`, 1642.140758294793], 
      NormalDistribution[19192.220152950587`, 1642.140758294793], 
      NormalDistribution[7290.210074244195, 1642.140758294793], 
      NormalDistribution[7188.13328485141, 1642.140758294793], 
      NormalDistribution[11422.196594332998`, 1642.140758294793], 
      NormalDistribution[11555.620526543142`, 1642.140758294793], 
      NormalDistribution[10305.13279349112, 1642.140758294793], 
      NormalDistribution[19427.59195487559, 1642.140758294793], 
      NormalDistribution[11829.175662500526`, 1642.140758294793], 
      NormalDistribution[39460.82093053813, 1642.140758294793], 
      NormalDistribution[12723.826829831083`, 1642.140758294793], 
      NormalDistribution[11915.38348669946, 1642.140758294793], 
      NormalDistribution[11318.364604000684`, 1642.140758294793], 
      NormalDistribution[6173.977996133248, 1642.140758294793], 
      NormalDistribution[6189.574057005144, 1642.140758294793], 
      NormalDistribution[6167.879475484334, 1642.140758294793], 
      NormalDistribution[12806.716933413305`, 1642.140758294793], 
      NormalDistribution[13884.273481507145`, 1642.140758294793], 
      NormalDistribution[3602.989023733875, 1642.140758294793], 
      NormalDistribution[2982.5246433263765`, 1642.140758294793], 
      NormalDistribution[19730.891213839077`, 1642.140758294793], 
      NormalDistribution[11246.621885125407`, 1642.140758294793], 
      NormalDistribution[11222.469928846116`, 1642.140758294793], 
      NormalDistribution[6381.385649042378, 1642.140758294793], 
      NormalDistribution[40834.575851559006`, 1642.140758294793], 
      NormalDistribution[35576.106660418045`, 1642.140758294793], 
      NormalDistribution[10613.208595867778`, 1642.140758294793], 
      NormalDistribution[17167.57268670826, 1642.140758294793], 
      NormalDistribution[7533.24058212946, 1642.140758294793], 
      NormalDistribution[25606.14187164653, 1642.140758294793], 
      NormalDistribution[15343.906293316635`, 1642.140758294793], 
      NormalDistribution[26640.54354790372, 1642.140758294793], 
      NormalDistribution[12283.78293320377, 1642.140758294793], 
      NormalDistribution[10082.705442000144`, 1642.140758294793], 
      NormalDistribution[42412.68863937562, 1642.140758294793], 
      NormalDistribution[14654.120284903189`, 1642.140758294793], 
      NormalDistribution[6442.001898306544, 1642.140758294793], 
      NormalDistribution[6562.214532438148, 1642.140758294793], 
      NormalDistribution[11298.17893600601, 1642.140758294793], 
      NormalDistribution[5562.922367153752, 1642.140758294793], 
      NormalDistribution[10685.295977094103`, 1642.140758294793], 
      NormalDistribution[8820.861162664294, 1642.140758294793], 
      NormalDistribution[35202.50468384469, 1642.140758294793], 
      NormalDistribution[13437.76376658077, 1642.140758294793], 
      NormalDistribution[5135.880961892806, 1642.140758294793], 
      NormalDistribution[47622.44983049672, 1642.140758294793], 
      NormalDistribution[13769.302509842373`, 1642.140758294793], 
      NormalDistribution[7625.885644316841, 1642.140758294793], 
      NormalDistribution[11333.053786522716`, 1642.140758294793], 
      NormalDistribution[20821.113545946362`, 1642.140758294793], 
      NormalDistribution[38084.49625328355, 1642.140758294793], 
      NormalDistribution[4391.8316221007735`, 1642.140758294793], 
      NormalDistribution[6953.687732916132, 1642.140758294793], 
      NormalDistribution[22488.255152930833`, 1642.140758294793], 
      NormalDistribution[7421.030514780764, 1642.140758294793], 
      NormalDistribution[27148.546080339307`, 1642.140758294793], 
      NormalDistribution[1598.93855787368, 1642.140758294793], 
      NormalDistribution[14314.410995742604`, 1642.140758294793], 
      NormalDistribution[6685.26133023928, 1642.140758294793], 
      NormalDistribution[9678.868503896236, 1642.140758294793], 
      NormalDistribution[41100.41975781095, 1642.140758294793], 
      NormalDistribution[15968.914433422291`, 1642.140758294793], 
      NormalDistribution[15539.26780224063, 1642.140758294793], 
      NormalDistribution[5697.475428523483, 1642.140758294793], 
      NormalDistribution[12077.124165750245`, 1642.140758294793], 
      NormalDistribution[4867.220800308055, 1642.140758294793], 
      NormalDistribution[14507.481357307848`, 1642.140758294793], 
      NormalDistribution[26886.78763902688, 1642.140758294793], 
      NormalDistribution[12366.728422398599`, 1642.140758294793], 
      NormalDistribution[5696.319629020106, 1642.140758294793], 
      NormalDistribution[17224.067997578026`, 1642.140758294793], 
      NormalDistribution[6860.939135866367, 1642.140758294793], 
      NormalDistribution[29647.817318942347`, 1642.140758294793], 
      NormalDistribution[3231.650933647714, 1642.140758294793], 
      NormalDistribution[5834.836612453, 1642.140758294793], 
      NormalDistribution[38120.662953844076`, 1642.140758294793], 
      NormalDistribution[7188.866460007794, 1642.140758294793], 
      NormalDistribution[48925.61634006975, 1642.140758294793], 
      NormalDistribution[4914.068739948945, 1642.140758294793], 
      NormalDistribution[6929.511113881925, 1642.140758294793], 
      NormalDistribution[17079.02521069355, 1642.140758294793], 
      NormalDistribution[9307.73744722629, 1642.140758294793], 
      NormalDistribution[7950.712056821477, 1642.140758294793], 
      NormalDistribution[4540.218277582158, 1642.140758294793], 
      NormalDistribution[9128.655778601373, 1642.140758294793], 
      NormalDistribution[11832.947077308367`, 1642.140758294793], 
      NormalDistribution[3747.5090996937706`, 1642.140758294793], 
      NormalDistribution[15757.64399523531, 1642.140758294793], 
      NormalDistribution[16921.983438809355`, 1642.140758294793], 
      NormalDistribution[20602.811765615446`, 1642.140758294793], 
      NormalDistribution[2417.0156842725555`, 1642.140758294793], 
      NormalDistribution[15684.399092247142`, 1642.140758294793], 
      NormalDistribution[13660.419150504504`, 1642.140758294793], 
      NormalDistribution[8016.601233640705, 1642.140758294793], 
      NormalDistribution[5046.943234030159, 1642.140758294793], 
      NormalDistribution[10876.043416522509`, 1642.140758294793], 
      NormalDistribution[6773.650613662695, 1642.140758294793], 
      NormalDistribution[9192.94644472041, 1642.140758294793], 
      NormalDistribution[11389.990265818387`, 1642.140758294793], 
      NormalDistribution[11146.017052976338`, 1642.140758294793], 
      NormalDistribution[7058.193192074585, 1642.140758294793], 
      NormalDistribution[19008.52867389168, 1642.140758294793], 
      NormalDistribution[10115.754526592425`, 1642.140758294793], 
      NormalDistribution[3782.1208502250447`, 1642.140758294793], 
      NormalDistribution[9509.979002615062, 1642.140758294793], 
      NormalDistribution[1126.3428328862847`, 1642.140758294793], 
      NormalDistribution[46849.49864731214, 1642.140758294793], 
      NormalDistribution[47969.84513341621, 1642.140758294793], 
      NormalDistribution[11324.22774179035, 1642.140758294793], 
      NormalDistribution[7694.526909324787, 1642.140758294793], 
      NormalDistribution[40811.76884795033, 1642.140758294793], 
      NormalDistribution[5970.622657085928, 1642.140758294793], 
      NormalDistribution[16165.259925673265`, 1642.140758294793], 
      NormalDistribution[23476.84248953742, 1642.140758294793], 
      NormalDistribution[11096.065586455343`, 1642.140758294793], 
      NormalDistribution[8847.598115863075, 1642.140758294793], 
      NormalDistribution[9092.037195166897, 1642.140758294793], 
      NormalDistribution[16499.230083421513`, 1642.140758294793], 
      NormalDistribution[37601.210361422505`, 1642.140758294793], 
      NormalDistribution[17930.72537219635, 1642.140758294793], 
      NormalDistribution[17955.887348801956`, 1642.140758294793], 
      NormalDistribution[8949.85282777706, 1642.140758294793], 
      NormalDistribution[35066.44899649384, 1642.140758294793], 
      NormalDistribution[24594.233860993496`, 1642.140758294793], 
      NormalDistribution[35532.07827710535, 1642.140758294793], 
      NormalDistribution[1267.9361162385467`, 1642.140758294793], 
      NormalDistribution[15735.612743355196`, 1642.140758294793], 
      NormalDistribution[15349.257877183056`, 1642.140758294793], 
      NormalDistribution[11981.459962894596`, 1642.140758294793], 
      NormalDistribution[49688.6091590053, 1642.140758294793], 
      NormalDistribution[46755.128888164014`, 1642.140758294793], 
      NormalDistribution[22692.310794879097`, 1642.140758294793], 
      NormalDistribution[21191.50144089558, 1642.140758294793], 
      NormalDistribution[41029.12395473127, 1642.140758294793], 
      NormalDistribution[11672.82337082864, 1642.140758294793], 
      NormalDistribution[6214.215900250801, 1642.140758294793], 
      NormalDistribution[47174.725042356535`, 1642.140758294793], 
      NormalDistribution[16548.619324352756`, 1642.140758294793], 
      NormalDistribution[13137.67255756893, 1642.140758294793], 
      NormalDistribution[5155.713572725282, 1642.140758294793], 
      NormalDistribution[16528.78784216818, 1642.140758294793], 
      NormalDistribution[12316.364790448662`, 1642.140758294793], 
      NormalDistribution[23210.76473977179, 1642.140758294793], 
      NormalDistribution[5795.465499989185, 1642.140758294793], 
      NormalDistribution[41691.19117224884, 1642.140758294793], 
      NormalDistribution[6092.536467087536, 1642.140758294793], 
      NormalDistribution[36592.839201030605`, 1642.140758294793], 
      NormalDistribution[1979.1764408409672`, 1642.140758294793], 
      NormalDistribution[7064.200154545129, 1642.140758294793], 
      NormalDistribution[19403.228107369912`, 1642.140758294793], 
      NormalDistribution[11667.205363374185`, 1642.140758294793], 
      NormalDistribution[14040.07664983839, 1642.140758294793], 
      NormalDistribution[1627.1508926236293`, 1642.140758294793], 
      NormalDistribution[37159.5458360215, 1642.140758294793], 
      NormalDistribution[16226.906225595538`, 1642.140758294793], 
      NormalDistribution[15332.495976808208`, 1642.140758294793], 
      NormalDistribution[4597.1158046526725`, 1642.140758294793], 
      NormalDistribution[1515.538289341579, 1642.140758294793], 
      NormalDistribution[15162.10724131269, 1642.140758294793], 
      NormalDistribution[9205.443825903836, 1642.140758294793], 
      NormalDistribution[10886.683729357126`, 1642.140758294793], 
      NormalDistribution[5862.2977815018, 1642.140758294793], 
      NormalDistribution[1538.032313235777, 1642.140758294793], 
      NormalDistribution[2935.5916714554587`, 1642.140758294793], 
      NormalDistribution[9932.071912300637, 1642.140758294793], 
      NormalDistribution[41036.56708072183, 1642.140758294793], 
      NormalDistribution[38261.08334938144, 1642.140758294793], 
      NormalDistribution[14809.970811574345`, 1642.140758294793], 
      NormalDistribution[14468.770142492693`, 1642.140758294793], 
      NormalDistribution[12319.465157799714`, 1642.140758294793], 
      NormalDistribution[11124.766707611505`, 1642.140758294793], 
      NormalDistribution[9050.650312073125, 1642.140758294793], 
      NormalDistribution[15973.640490137044`, 1642.140758294793], 
      NormalDistribution[5215.805575829697, 1642.140758294793], 
      NormalDistribution[13488.869460376352`, 1642.140758294793], 
      NormalDistribution[45908.629843094495`, 1642.140758294793], 
      NormalDistribution[6799.018041864791, 1642.140758294793], 
      NormalDistribution[12616.736418967563`, 1642.140758294793], 
      NormalDistribution[16943.18946616167, 1642.140758294793], 
      NormalDistribution[8109.341913713562, 1642.140758294793], 
      NormalDistribution[19543.564356126364`, 1642.140758294793], 
      NormalDistribution[9701.504156489013, 1642.140758294793], 
      NormalDistribution[16734.21800701951, 1642.140758294793], 
      NormalDistribution[14256.638832658547`, 1642.140758294793], 
      NormalDistribution[15389.746561725988`, 1642.140758294793], 
      NormalDistribution[9416.877048001214, 1642.140758294793], 
      NormalDistribution[13527.612109148758`, 1642.140758294793], 
      NormalDistribution[13473.848241288277`, 1642.140758294793], 
      NormalDistribution[12919.989831534032`, 1642.140758294793], 
      NormalDistribution[15501.707007782685`, 1642.140758294793], 
      NormalDistribution[4599.528446933093, 1642.140758294793], 
      NormalDistribution[4027.6201659521284`, 1642.140758294793], 
      NormalDistribution[39301.57460479293, 1642.140758294793], 
      NormalDistribution[8542.600558996095, 1642.140758294793], 
      NormalDistribution[11424.272708062985`, 1642.140758294793], 
      NormalDistribution[9669.370807477977, 1642.140758294793], 
      NormalDistribution[10824.251076294304`, 1642.140758294793], 
      NormalDistribution[11695.54096634176, 1642.140758294793], 
      NormalDistribution[9916.297966928762, 1642.140758294793], 
      NormalDistribution[39244.90592161704, 1642.140758294793], 
      NormalDistribution[5626.983929052693, 1642.140758294793], 
      NormalDistribution[10464.583499730543`, 1642.140758294793], 
      NormalDistribution[1076.4958072287955`, 1642.140758294793], 
      NormalDistribution[5808.538030894052, 1642.140758294793], 
      NormalDistribution[12705.817084006776`, 1642.140758294793], 
      NormalDistribution[34725.04643713655, 1642.140758294793], 
      NormalDistribution[6011.481855668623, 1642.140758294793], 
      NormalDistribution[17943.54676164552, 1642.140758294793], 
      NormalDistribution[1949.7445641851045`, 1642.140758294793], 
      NormalDistribution[6572.102319028533, 1642.140758294793], 
      NormalDistribution[25455.875156282396`, 1642.140758294793], 
      NormalDistribution[6589.475038166331, 1642.140758294793], 
      NormalDistribution[16598.661474564084`, 1642.140758294793], 
      NormalDistribution[12250.59852526968, 1642.140758294793], 
      NormalDistribution[10363.86343006188, 1642.140758294793], 
      NormalDistribution[7186.909865123682, 1642.140758294793], 
      NormalDistribution[36871.817689159514`, 1642.140758294793], 
      NormalDistribution[37098.863678857975`, 1642.140758294793], 
      NormalDistribution[4608.499695043696, 1642.140758294793], 
      NormalDistribution[8368.263988523491, 1642.140758294793], 
      NormalDistribution[13310.11839104689, 1642.140758294793], 
      NormalDistribution[44426.49107283841, 1642.140758294793], 
      NormalDistribution[37362.46730603191, 1642.140758294793], 
      NormalDistribution[7075.968237366385, 1642.140758294793], 
      NormalDistribution[20339.992703899694`, 1642.140758294793], 
      NormalDistribution[33607.440711980715`, 1642.140758294793], 
      NormalDistribution[13383.412493835094`, 1642.140758294793], 
      NormalDistribution[15867.183865593071`, 1642.140758294793], 
      NormalDistribution[10431.436460489214`, 1642.140758294793], 
      NormalDistribution[5394.946785341177, 1642.140758294793], 
      NormalDistribution[5017.060367485192, 1642.140758294793], 
      NormalDistribution[9551.03219196569, 1642.140758294793], 
      NormalDistribution[8397.163107404533, 1642.140758294793], 
      NormalDistribution[8729.125768419644, 1642.140758294793], 
      NormalDistribution[5110.617641269116, 1642.140758294793], 
      NormalDistribution[8946.325724306818, 1642.140758294793], 
      NormalDistribution[37739.42922972492, 1642.140758294793], 
      NormalDistribution[43850.92464226127, 1642.140758294793], 
      NormalDistribution[44969.92889061529, 1642.140758294793], 
      NormalDistribution[5198.873986754051, 1642.140758294793], 
      NormalDistribution[14702.153345943112`, 1642.140758294793], 
      NormalDistribution[35955.68049457312, 1642.140758294793], 
      NormalDistribution[8441.07190404972, 1642.140758294793], 
      NormalDistribution[8035.640445760959, 1642.140758294793], 
      NormalDistribution[24898.64552937111, 1642.140758294793], 
      NormalDistribution[5028.652448713146, 1642.140758294793], 
      NormalDistribution[7067.57821483654, 1642.140758294793], 
      NormalDistribution[5607.401725284078, 1642.140758294793], 
      NormalDistribution[36194.805597791674`, 1642.140758294793], 
      NormalDistribution[16486.11756618284, 1642.140758294793], 
      NormalDistribution[24912.460581116517`, 1642.140758294793], 
      NormalDistribution[46523.92372305595, 1642.140758294793], 
      NormalDistribution[7495.36927556841, 1642.140758294793], 
      NormalDistribution[12197.956516637669`, 1642.140758294793], 
      NormalDistribution[16334.283704883992`, 1642.140758294793], 
      NormalDistribution[12444.927799884474`, 1642.140758294793], 
      NormalDistribution[18042.133077073522`, 1642.140758294793], 
      NormalDistribution[8801.083437002977, 1642.140758294793], 
      NormalDistribution[6636.775765654694, 1642.140758294793], 
      NormalDistribution[7702.425492183888, 1642.140758294793], 
      NormalDistribution[10237.915627288061`, 1642.140758294793], 
      NormalDistribution[46236.510370308424`, 1642.140758294793], 
      NormalDistribution[4449.712949927907, 1642.140758294793], 
      NormalDistribution[19927.656821379118`, 1642.140758294793], 
      NormalDistribution[15384.563210792967`, 1642.140758294793], 
      NormalDistribution[11529.600011628609`, 1642.140758294793], 
      NormalDistribution[25520.208038970894`, 1642.140758294793], 
      NormalDistribution[7095.505660017183, 1642.140758294793], 
      NormalDistribution[38301.95227214782, 1642.140758294793], 
      NormalDistribution[9587.767712228479, 1642.140758294793], 
      NormalDistribution[13387.981426663091`, 1642.140758294793], 
      NormalDistribution[42458.28425083107, 1642.140758294793], 
      NormalDistribution[5289.487007284906, 1642.140758294793], 
      NormalDistribution[8124.828501562226, 1642.140758294793], 
      NormalDistribution[8876.56754454155, 1642.140758294793], 
      NormalDistribution[7384.0959298012285`, 1642.140758294793], 
      NormalDistribution[18246.037567206695`, 1642.140758294793], 
      NormalDistribution[7251.218465611991, 1642.140758294793], 
      NormalDistribution[16498.71482225814, 1642.140758294793], 
      NormalDistribution[6485.55946178045, 1642.140758294793], 
      NormalDistribution[4988.497168815079, 1642.140758294793], 
      NormalDistribution[609.7453641019674, 1642.140758294793], 
      NormalDistribution[13843.150910282347`, 1642.140758294793], 
      NormalDistribution[15235.694109200553`, 1642.140758294793], 
      NormalDistribution[18343.921498500174`, 1642.140758294793], 
      NormalDistribution[3253.4325618380954`, 1642.140758294793], 
      NormalDistribution[46847.43853332219, 1642.140758294793], 
      NormalDistribution[5716.888566659746, 1642.140758294793], 
      NormalDistribution[9559.495813984755, 1642.140758294793], 
      NormalDistribution[3061.924304114362, 1642.140758294793], 
      NormalDistribution[10829.51788414576, 1642.140758294793], 
      NormalDistribution[26222.40882729803, 1642.140758294793], 
      NormalDistribution[8567.617988175127, 1642.140758294793], 
      NormalDistribution[11324.405340959918`, 1642.140758294793], 
      NormalDistribution[17782.595055089, 1642.140758294793], 
      NormalDistribution[7374.506818383605, 1642.140758294793], 
      NormalDistribution[38097.86838454418, 1642.140758294793], 
      NormalDistribution[6725.719994803273, 1642.140758294793], 
      NormalDistribution[5267.397122917087, 1642.140758294793], 
      NormalDistribution[17504.28856563243, 1642.140758294793], 
      NormalDistribution[4062.9418469735792`, 1642.140758294793], 
      NormalDistribution[7722.475348726505, 1642.140758294793], 
      NormalDistribution[8420.919322393926, 1642.140758294793], 
      NormalDistribution[10555.919836275898`, 1642.140758294793], 
      NormalDistribution[1644.4426871931955`, 1642.140758294793], 
      NormalDistribution[8274.321121004767, 1642.140758294793], 
      NormalDistribution[3149.198925965855, 1642.140758294793], 
      NormalDistribution[3479.048768045617, 1642.140758294793], 
      NormalDistribution[877.6918605537321, 1642.140758294793], 
      NormalDistribution[9353.510405746649, 1642.140758294793], 
      NormalDistribution[7429.596143962779, 1642.140758294793], 
      NormalDistribution[13434.424471833758`, 1642.140758294793], 
      NormalDistribution[3702.8177927914276`, 1642.140758294793], 
      NormalDistribution[8970.023198910454, 1642.140758294793], 
      NormalDistribution[5568.430832050674, 1642.140758294793], 
      NormalDistribution[3273.807355254794, 1642.140758294793], 
      NormalDistribution[27097.380826475288`, 1642.140758294793], 
      NormalDistribution[39330.86346274925, 1642.140758294793], 
      NormalDistribution[10802.977548261832`, 1642.140758294793], 
      NormalDistribution[6059.978585817882, 1642.140758294793], 
      NormalDistribution[6983.121633945012, 1642.140758294793], 
      NormalDistribution[14638.729033719992`, 1642.140758294793], 
      NormalDistribution[4757.610747917857, 1642.140758294793], 
      NormalDistribution[1845.2708702137988`, 1642.140758294793], 
      NormalDistribution[18385.523637184422`, 1642.140758294793], 
      NormalDistribution[14532.32551831095, 1642.140758294793], 
      NormalDistribution[4463.782393429443, 1642.140758294793], 
      NormalDistribution[3823.1511901931335`, 1642.140758294793], 
      NormalDistribution[25035.075200968662`, 1642.140758294793], 
      NormalDistribution[11098.834643411381`, 1642.140758294793], 
      NormalDistribution[11741.363382589883`, 1642.140758294793], 
      NormalDistribution[44379.76879606688, 1642.140758294793], 
      NormalDistribution[10884.805123871638`, 1642.140758294793], 
      NormalDistribution[9209.898224776061, 1642.140758294793], 
      NormalDistribution[2365.5390849214127`, 1642.140758294793], 
      NormalDistribution[15607.823140321034`, 1642.140758294793], 
      NormalDistribution[18477.453564085008`, 1642.140758294793], 
      NormalDistribution[6255.385784601086, 1642.140758294793], 
      NormalDistribution[6828.28770081814, 1642.140758294793], 
      NormalDistribution[7363.51171311205, 1642.140758294793], 
      NormalDistribution[13650.293898451157`, 1642.140758294793], 
      NormalDistribution[5285.786030724565, 1642.140758294793], 
      NormalDistribution[42814.671313452534`, 1642.140758294793], 
      NormalDistribution[8050.227894804312, 1642.140758294793], 
      NormalDistribution[10093.110524745458`, 1642.140758294793], 
      NormalDistribution[12035.029962271605`, 1642.140758294793], 
      NormalDistribution[6187.393412667873, 1642.140758294793], 
      NormalDistribution[6976.287612679746, 1642.140758294793], 
      NormalDistribution[16498.806373928375`, 1642.140758294793], 
      NormalDistribution[5972.4113043670495`, 1642.140758294793], 
      NormalDistribution[15941.325548700834`, 1642.140758294793], 
      NormalDistribution[7353.339990565638, 1642.140758294793], 
      NormalDistribution[38979.62472392709, 1642.140758294793], 
      NormalDistribution[17813.408528649878`, 1642.140758294793], 
      NormalDistribution[14911.673103947767`, 1642.140758294793], 
      NormalDistribution[3830.3764665869767`, 1642.140758294793], 
      NormalDistribution[11102.79288284369, 1642.140758294793], 
      NormalDistribution[4689.0772299068085`, 1642.140758294793], 
      NormalDistribution[5998.23121487673, 1642.140758294793], 
      NormalDistribution[4771.339980633778, 1642.140758294793], 
      NormalDistribution[12076.650455613735`, 1642.140758294793], 
      NormalDistribution[6820.922558060606, 1642.140758294793], 
      NormalDistribution[9595.757514157778, 1642.140758294793], 
      NormalDistribution[4960.886636318619, 1642.140758294793], 
      NormalDistribution[12914.710273215373`, 1642.140758294793], 
      NormalDistribution[9259.692471158385, 1642.140758294793], 
      NormalDistribution[11127.486090701135`, 1642.140758294793], 
      NormalDistribution[14550.470289472918`, 1642.140758294793], 
      NormalDistribution[10054.291236498972`, 1642.140758294793], 
      NormalDistribution[2536.5642075933865`, 1642.140758294793], 
      NormalDistribution[42845.02132958978, 1642.140758294793], 
      NormalDistribution[6674.25260343782, 1642.140758294793], 
      NormalDistribution[5822.876207344516, 1642.140758294793], 
      NormalDistribution[6043.645951172163, 1642.140758294793], 
      NormalDistribution[6359.80816465556, 1642.140758294793], 
      NormalDistribution[11504.39092296468, 1642.140758294793], 
      NormalDistribution[25199.433799204264`, 1642.140758294793], 
      NormalDistribution[5515.952730153892, 1642.140758294793], 
      NormalDistribution[5854.287388855894, 1642.140758294793], 
      NormalDistribution[3395.8608079457135`, 1642.140758294793], 
      NormalDistribution[11035.429403796368`, 1642.140758294793], 
      NormalDistribution[3607.2704997039436`, 1642.140758294793], 
      NormalDistribution[23133.55606612027, 1642.140758294793], 
      NormalDistribution[10972.132525683364`, 1642.140758294793], 
      NormalDistribution[1906.8971942671087`, 1642.140758294793], 
      NormalDistribution[8624.431602072578, 1642.140758294793], 
      NormalDistribution[-26.878908906785, 1642.140758294793], 
      NormalDistribution[8157.0029093794765`, 1642.140758294793], 
      NormalDistribution[9460.288302056193, 1642.140758294793], 
      NormalDistribution[47323.50988926998, 1642.140758294793], 
      NormalDistribution[5984.48218646447, 1642.140758294793], 
      NormalDistribution[6216.973042863922, 1642.140758294793], 
      NormalDistribution[45719.07884545494, 1642.140758294793], 
      NormalDistribution[8858.487584829192, 1642.140758294793], 
      NormalDistribution[10916.756617391766`, 1642.140758294793], 
      NormalDistribution[18464.724367528794`, 1642.140758294793], 
      NormalDistribution[14439.600681097781`, 1642.140758294793], 
      NormalDistribution[10505.181044846799`, 1642.140758294793], 
      NormalDistribution[20104.22033575784, 1642.140758294793], 
      NormalDistribution[1207.376174344652, 1642.140758294793], 
      NormalDistribution[10098.150483274883`, 1642.140758294793], 
      NormalDistribution[6329.044421479118, 1642.140758294793], 
      NormalDistribution[8965.194217042956, 1642.140758294793], 
      NormalDistribution[8869.988115414513, 1642.140758294793], 
      NormalDistribution[22225.768057219222`, 1642.140758294793], 
      NormalDistribution[12710.836767292956`, 1642.140758294793], 
      NormalDistribution[6073.321631530971, 1642.140758294793], 
      NormalDistribution[5244.467929728795, 1642.140758294793], 
      NormalDistribution[5467.097956924731, 1642.140758294793], 
      NormalDistribution[5440.566591308239, 1642.140758294793], 
      NormalDistribution[7317.051116524572, 1642.140758294793], 
      NormalDistribution[9662.237154686403, 1642.140758294793], 
      NormalDistribution[4659.362358234457, 1642.140758294793], 
      NormalDistribution[24218.183253514446`, 1642.140758294793], 
      NormalDistribution[6549.4115216242035`, 1642.140758294793], 
      NormalDistribution[23725.73341515378, 1642.140758294793], 
      NormalDistribution[12435.301602706762`, 1642.140758294793], 
      NormalDistribution[2336.9181806592605`, 1642.140758294793], 
      NormalDistribution[8721.319934727911, 1642.140758294793], 
      NormalDistribution[8778.171176273452, 1642.140758294793], 
      NormalDistribution[4972.1972444064495`, 1642.140758294793], 
      NormalDistribution[6627.150561481614, 1642.140758294793], 
      NormalDistribution[2493.6721490416203`, 1642.140758294793], 
      NormalDistribution[4177.430343411976, 1642.140758294793], 
      NormalDistribution[9655.040367831798, 1642.140758294793], 
      NormalDistribution[9331.676254153628, 1642.140758294793], 
      NormalDistribution[42082.948784461885`, 1642.140758294793], 
      NormalDistribution[43658.669244975215`, 1642.140758294793], 
      NormalDistribution[7629.521405238039, 1642.140758294793], 
      NormalDistribution[4031.350767550277, 1642.140758294793], 
      NormalDistribution[48048.66885460049, 1642.140758294793], 
      NormalDistribution[8766.093838447057, 1642.140758294793], 
      NormalDistribution[11810.795299191337`, 1642.140758294793], 
      NormalDistribution[16013.912761668784`, 1642.140758294793], 
      NormalDistribution[2761.365117264226, 1642.140758294793], 
      NormalDistribution[46731.68952009237, 1642.140758294793], 
      NormalDistribution[12832.39083182314, 1642.140758294793], 
      NormalDistribution[13995.041035792243`, 1642.140758294793], 
      NormalDistribution[3747.8436785434915`, 1642.140758294793], 
      NormalDistribution[10690.12008950529, 1642.140758294793], 
      NormalDistribution[13702.961480977208`, 1642.140758294793], 
      NormalDistribution[2723.2096459347667`, 1642.140758294793], 
      NormalDistribution[10425.271869922593`, 1642.140758294793], 
      NormalDistribution[2082.8024551579983`, 1642.140758294793], 
      NormalDistribution[35248.02352703345, 1642.140758294793], 
      NormalDistribution[4938.4462178904005`, 1642.140758294793], 
      NormalDistribution[5028.9694336719, 1642.140758294793], 
      NormalDistribution[10889.263982872635`, 1642.140758294793], 
      NormalDistribution[6983.959100277759, 1642.140758294793], 
      NormalDistribution[6526.640075391114, 1642.140758294793], 
      NormalDistribution[15509.336630250611`, 1642.140758294793], 
      NormalDistribution[6882.165349060683, 1642.140758294793], 
      NormalDistribution[13543.484268125012`, 1642.140758294793], 
      NormalDistribution[8243.007559829734, 1642.140758294793], 
      NormalDistribution[11985.221646325552`, 1642.140758294793], 
      NormalDistribution[7729.685273796241, 1642.140758294793], 
      NormalDistribution[6094.830528036286, 1642.140758294793], 
      NormalDistribution[16852.44429688953, 1642.140758294793], 
      NormalDistribution[12212.017616023015`, 1642.140758294793], 
      NormalDistribution[10013.406704138224`, 1642.140758294793], 
      NormalDistribution[4478.5188572213465`, 1642.140758294793], 
      NormalDistribution[1299.24716047738, 1642.140758294793], 
      NormalDistribution[6733.720592703594, 1642.140758294793], 
      NormalDistribution[10129.68251677254, 1642.140758294793], 
      NormalDistribution[12833.512502315649`, 1642.140758294793], 
      NormalDistribution[11396.258099066312`, 1642.140758294793], 
      NormalDistribution[2901.2246080210407`, 1642.140758294793], 
      NormalDistribution[3845.538117904094, 1642.140758294793], 
      NormalDistribution[14229.748728619137`, 1642.140758294793], 
      NormalDistribution[5059.459923142213, 1642.140758294793], 
      NormalDistribution[7208.725406528824, 1642.140758294793], 
      NormalDistribution[2385.1917807152877`, 1642.140758294793], 
      NormalDistribution[7137.480497762425, 1642.140758294793], 
      NormalDistribution[6821.628261002263, 1642.140758294793], 
      NormalDistribution[4847.796087279579, 1642.140758294793], 
      NormalDistribution[11727.215852410207`, 1642.140758294793], 
      NormalDistribution[37700.19426473853, 1642.140758294793], 
      NormalDistribution[43563.533504181694`, 1642.140758294793], 
      NormalDistribution[1710.1510981205975`, 1642.140758294793], 
      NormalDistribution[13160.069542748675`, 1642.140758294793], 
      NormalDistribution[12195.712367958646`, 1642.140758294793], 
      NormalDistribution[1117.6182743234076`, 1642.140758294793], 
      NormalDistribution[37476.56052120291, 1642.140758294793], 
      NormalDistribution[5559.4553841367615`, 1642.140758294793], 
      NormalDistribution[9722.325573520218, 1642.140758294793], 
      NormalDistribution[5035.75032490769, 1642.140758294793], 
      NormalDistribution[9871.559198241388, 1642.140758294793], 
      NormalDistribution[11682.173073248196`, 1642.140758294793], 
      NormalDistribution[8632.534255433071, 1642.140758294793], 
      NormalDistribution[41339.361837499346`, 1642.140758294793], 
      NormalDistribution[5731.691590534803, 1642.140758294793], 
      NormalDistribution[641.6639093242193, 1642.140758294793], 
      NormalDistribution[3310.247470854729, 1642.140758294793], 
      NormalDistribution[19083.587118468535`, 1642.140758294793], 
      NormalDistribution[37828.77699622598, 1642.140758294793], 
      NormalDistribution[5487.857402109089, 1642.140758294793], 
      NormalDistribution[7655.731678919048, 1642.140758294793], 
      NormalDistribution[1134.4459099607266`, 1642.140758294793], 
      NormalDistribution[15619.023143312399`, 1642.140758294793], 
      NormalDistribution[5461.365370985147, 1642.140758294793], 
      NormalDistribution[10074.137036241536`, 1642.140758294793], 
      NormalDistribution[4135.22958632317, 1642.140758294793], 
      NormalDistribution[10835.846361238133`, 1642.140758294793], 
      NormalDistribution[2246.600334951274, 1642.140758294793], 
      NormalDistribution[3890.7978358662294`, 1642.140758294793], 
      NormalDistribution[16736.924063158047`, 1642.140758294793], 
      NormalDistribution[13544.503787590498`, 1642.140758294793], 
      NormalDistribution[14394.377316216567`, 1642.140758294793], 
      NormalDistribution[6761.011057782285, 1642.140758294793], 
      NormalDistribution[16541.106721948785`, 1642.140758294793], 
      NormalDistribution[6471.342519241123, 1642.140758294793], 
      NormalDistribution[8013.024461784592, 1642.140758294793], 
      NormalDistribution[5453.08976868995, 1642.140758294793], 
      NormalDistribution[17565.835610305934`, 1642.140758294793], 
      NormalDistribution[5942.988077709795, 1642.140758294793], 
      NormalDistribution[2596.9872604248176`, 1642.140758294793], 
      NormalDistribution[5247.577212199389, 1642.140758294793], 
      NormalDistribution[1386.331519010544, 1642.140758294793], 
      NormalDistribution[38064.497314346496`, 1642.140758294793], 
      NormalDistribution[1798.0352158706428`, 1642.140758294793], 
      NormalDistribution[43077.122176655015`, 1642.140758294793], 
      NormalDistribution[4142.244176180964, 1642.140758294793], 
      NormalDistribution[39569.40259801066, 1642.140758294793], 
      NormalDistribution[6699.746749512472, 1642.140758294793], 
      NormalDistribution[12578.981806721104`, 1642.140758294793], 
      NormalDistribution[35800.00122951662, 1642.140758294793], 
      NormalDistribution[13344.453649560273`, 1642.140758294793], 
      NormalDistribution[5385.127041661488, 1642.140758294793], 
      NormalDistribution[4552.846640837748, 1642.140758294793], 
      NormalDistribution[7454.043848466027, 1642.140758294793], 
      NormalDistribution[11766.178311783642`, 1642.140758294793], 
      NormalDistribution[12813.229573302277`, 1642.140758294793], 
      NormalDistribution[9509.438818371309, 1642.140758294793], 
      NormalDistribution[4408.711706125892, 1642.140758294793], 
      NormalDistribution[4017.9482494573276`, 1642.140758294793], 
      NormalDistribution[6535.724788752954, 1642.140758294793], 
      NormalDistribution[9110.994353385951, 1642.140758294793], 
      NormalDistribution[24020.95679797102, 1642.140758294793], 
      NormalDistribution[3354.532945772642, 1642.140758294793], 
      NormalDistribution[4150.235246169301, 1642.140758294793], 
      NormalDistribution[36364.0370471884, 1642.140758294793], 
      NormalDistribution[7819.222558605251, 1642.140758294793], 
      NormalDistribution[10228.06885737227, 1642.140758294793], 
      NormalDistribution[11784.842736758654`, 1642.140758294793], 
      NormalDistribution[6853.019018610854, 1642.140758294793], 
      NormalDistribution[4439.966814643309, 1642.140758294793], 
      NormalDistribution[6729.093816242555, 1642.140758294793], 
      NormalDistribution[38632.34984037406, 1642.140758294793], 
      NormalDistribution[17457.6810132653, 1642.140758294793], 
      NormalDistribution[36286.463414362974`, 1642.140758294793], 
      NormalDistribution[13693.29262399168, 1642.140758294793], 
      NormalDistribution[18087.934280564194`, 1642.140758294793], 
      NormalDistribution[4266.852432490481, 1642.140758294793], 
      NormalDistribution[18142.578055343798`, 1642.140758294793], 
      NormalDistribution[9778.371357118951, 1642.140758294793], 
      NormalDistribution[4549.89732288427, 1642.140758294793], 
      NormalDistribution[18610.605457897902`, 1642.140758294793], 
      NormalDistribution[17341.594668586513`, 1642.140758294793], 
      NormalDistribution[14755.568013568665`, 1642.140758294793], 
      NormalDistribution[8818.177418815758, 1642.140758294793], 
      NormalDistribution[5632.287804167428, 1642.140758294793], 
      NormalDistribution[44598.885313919796`, 1642.140758294793], 
      NormalDistribution[2919.517527664324, 1642.140758294793], 
      NormalDistribution[13613.878026345126`, 1642.140758294793], 
      NormalDistribution[14967.710662974503`, 1642.140758294793], 
      NormalDistribution[14868.277306032149`, 1642.140758294793], 
      NormalDistribution[8864.20980125197, 1642.140758294793], 
      NormalDistribution[14671.304684600302`, 1642.140758294793], 
      NormalDistribution[15481.838103127588`, 1642.140758294793], 
      NormalDistribution[42404.60735736559, 1642.140758294793], 
      NormalDistribution[18771.788440679476`, 1642.140758294793], 
      NormalDistribution[10394.390107169427`, 1642.140758294793], 
      NormalDistribution[9952.29561624334, 1642.140758294793], 
      NormalDistribution[6348.015326252808, 1642.140758294793], 
      NormalDistribution[11170.099548941287`, 1642.140758294793], 
      NormalDistribution[17182.80824545222, 1642.140758294793], 
      NormalDistribution[12360.23739500368, 1642.140758294793], 
      NormalDistribution[4473.326987137516, 1642.140758294793], 
      NormalDistribution[6579.364168409806, 1642.140758294793], 
      NormalDistribution[16068.206024310133`, 1642.140758294793], 
      NormalDistribution[18401.58360522644, 1642.140758294793], 
      NormalDistribution[5485.360273939583, 1642.140758294793], 
      NormalDistribution[6798.30801649283, 1642.140758294793], 
      NormalDistribution[19352.196440887896`, 1642.140758294793], 
      NormalDistribution[24152.916385744604`, 1642.140758294793], 
      NormalDistribution[11001.004243596648`, 1642.140758294793], 
      NormalDistribution[5118.026796499282, 1642.140758294793], 
      NormalDistribution[5380.086602900088, 1642.140758294793], 
      NormalDistribution[1975.6763934072442`, 1642.140758294793], 
      NormalDistribution[13136.989830062143`, 1642.140758294793], 
      NormalDistribution[12660.725526018407`, 1642.140758294793], 
      NormalDistribution[3824.827258357196, 1642.140758294793], 
      NormalDistribution[7095.354490390349, 1642.140758294793], 
      NormalDistribution[12783.56780425672, 1642.140758294793], 
      NormalDistribution[19178.901778898286`, 1642.140758294793], 
      NormalDistribution[9053.913732223376, 1642.140758294793], 
      NormalDistribution[11337.079206023822`, 1642.140758294793], 
      NormalDistribution[3830.960369409613, 1642.140758294793], 
      NormalDistribution[16035.40259070399, 1642.140758294793], 
      NormalDistribution[5163.762536356553, 1642.140758294793], 
      NormalDistribution[39985.44291359717, 1642.140758294793], 
      NormalDistribution[13174.225655105327`, 1642.140758294793], 
      NormalDistribution[1548.9672983966138`, 1642.140758294793], 
      NormalDistribution[20130.8516896448, 1642.140758294793], 
      NormalDistribution[8851.669331751309, 1642.140758294793], 
      NormalDistribution[4571.007530941408, 1642.140758294793], 
      NormalDistribution[3277.384480605484, 1642.140758294793], 
      NormalDistribution[11521.94947132458, 1642.140758294793], 
      NormalDistribution[16771.80638981104, 1642.140758294793], 
      NormalDistribution[7215.437475932727, 1642.140758294793], 
      NormalDistribution[18571.90335961199, 1642.140758294793], 
      NormalDistribution[18113.175730423573`, 1642.140758294793], 
      NormalDistribution[17346.828987477526`, 1642.140758294793], 
      NormalDistribution[11344.78058035524, 1642.140758294793], 
      NormalDistribution[5016.914609202676, 1642.140758294793], 
      NormalDistribution[7322.384080612178, 1642.140758294793], 
      NormalDistribution[5817.659263465562, 1642.140758294793], 
      NormalDistribution[9051.661220588821, 1642.140758294793], 
      NormalDistribution[10745.69813812198, 1642.140758294793], 
      NormalDistribution[6084.504999725183, 1642.140758294793], 
      NormalDistribution[8442.4734819617, 1642.140758294793], 
      NormalDistribution[3119.6913631066564`, 1642.140758294793], 
      NormalDistribution[9981.065598965277, 1642.140758294793], 
      NormalDistribution[14401.346739263816`, 1642.140758294793], 
      NormalDistribution[12002.961711753254`, 1642.140758294793], 
      NormalDistribution[5431.199777284894, 1642.140758294793], 
      NormalDistribution[1204.258730328227, 1642.140758294793], 
      NormalDistribution[15719.195612886919`, 1642.140758294793], 
      NormalDistribution[14720.077829697411`, 1642.140758294793], 
      NormalDistribution[11012.505039302901`, 1642.140758294793], 
      NormalDistribution[8920.28828035885, 1642.140758294793], 
      NormalDistribution[11298.764868339666`, 1642.140758294793], 
      NormalDistribution[10644.990653819368`, 1642.140758294793], 
      NormalDistribution[19554.27978895643, 1642.140758294793], 
      NormalDistribution[6158.438165904118, 1642.140758294793], 
      NormalDistribution[8587.684036961607, 1642.140758294793], 
      NormalDistribution[47107.66729775499, 1642.140758294793], 
      NormalDistribution[15765.494327112185`, 1642.140758294793], 
      NormalDistribution[17211.537042973076`, 1642.140758294793], 
      NormalDistribution[12260.267101377736`, 1642.140758294793], 
      NormalDistribution[6166.772141389157, 1642.140758294793], 
      NormalDistribution[5198.053178168201, 1642.140758294793], 
      NormalDistribution[10026.6834692755, 1642.140758294793], 
      NormalDistribution[23553.03978163447, 1642.140758294793], 
      NormalDistribution[5952.101063787164, 1642.140758294793], 
      NormalDistribution[14959.396630817746`, 1642.140758294793], 
      NormalDistribution[46156.32432144147, 1642.140758294793], 
      NormalDistribution[5933.997165093185, 1642.140758294793], 
      NormalDistribution[8711.771310428081, 1642.140758294793], 
      NormalDistribution[5839.916589514385, 1642.140758294793], 
      NormalDistribution[16327.220362232387`, 1642.140758294793], 
      NormalDistribution[12610.463508002955`, 1642.140758294793], 
      NormalDistribution[5288.399438058053, 1642.140758294793], 
      NormalDistribution[13996.357184477862`, 1642.140758294793], 
      NormalDistribution[16341.7250760754, 1642.140758294793], 
      NormalDistribution[3006.844878781092, 1642.140758294793], 
      NormalDistribution[13006.749885852501`, 1642.140758294793], 
      NormalDistribution[19803.948881505105`, 1642.140758294793], 
      NormalDistribution[4890.313808090062, 1642.140758294793], 
      NormalDistribution[33849.79453841809, 1642.140758294793], 
      NormalDistribution[11324.67739271598, 1642.140758294793], 
      NormalDistribution[2559.208471135953, 1642.140758294793], 
      NormalDistribution[4007.6179287599534`, 1642.140758294793], 
      NormalDistribution[2409.526559800104, 1642.140758294793], 
      NormalDistribution[11500.634194623413`, 1642.140758294793], 
      NormalDistribution[15079.835623763402`, 1642.140758294793], 
      NormalDistribution[15197.5112958191, 1642.140758294793], 
      NormalDistribution[5366.283634709145, 1642.140758294793], 
      NormalDistribution[1060.1734780461175`, 1642.140758294793], 
      NormalDistribution[13600.07071414427, 1642.140758294793], 
      NormalDistribution[6913.431667329594, 1642.140758294793], 
      NormalDistribution[1819.7514612655305`, 1642.140758294793], 
      NormalDistribution[20143.88568724299, 1642.140758294793], 
      NormalDistribution[473.01723484043214`, 1642.140758294793], 
      NormalDistribution[9479.171912851121, 1642.140758294793], 
      NormalDistribution[12872.488358859544`, 1642.140758294793], 
      NormalDistribution[10249.278883118192`, 1642.140758294793], 
      NormalDistribution[12098.824860466526`, 1642.140758294793], 
      NormalDistribution[14496.885186423526`, 1642.140758294793], 
      NormalDistribution[11852.54199215283, 1642.140758294793], 
      NormalDistribution[11802.964133776753`, 1642.140758294793], 
      NormalDistribution[15533.758066886938`, 1642.140758294793], 
      NormalDistribution[45762.30054215314, 1642.140758294793], 
      NormalDistribution[5985.765956827966, 1642.140758294793], 
      NormalDistribution[15808.329386718531`, 1642.140758294793], 
      NormalDistribution[12626.413837578059`, 1642.140758294793], 
      NormalDistribution[6591.512478150901, 1642.140758294793], 
      NormalDistribution[44462.4260148867, 1642.140758294793], 
      NormalDistribution[23206.32690444975, 1642.140758294793], 
      NormalDistribution[48884.08116017765, 1642.140758294793], 
      NormalDistribution[12504.964797931005`, 1642.140758294793], 
      NormalDistribution[8015.447037536666, 1642.140758294793], 
      NormalDistribution[17364.141406331983`, 1642.140758294793], 
      NormalDistribution[39770.752150937165`, 1642.140758294793], 
      NormalDistribution[13612.867603199407`, 1642.140758294793], 
      NormalDistribution[15690.254051021768`, 1642.140758294793], 
      NormalDistribution[11618.57637281772, 1642.140758294793], 
      NormalDistribution[13992.981574328616`, 1642.140758294793], 
      NormalDistribution[9604.67843519058, 1642.140758294793], 
      NormalDistribution[44981.75469033219, 1642.140758294793], 
      NormalDistribution[7863.539602438615, 1642.140758294793], 
      NormalDistribution[8877.295426185145, 1642.140758294793], 
      NormalDistribution[2911.9499787756977`, 1642.140758294793], 
      NormalDistribution[7430.53628334361, 1642.140758294793], 
      NormalDistribution[7155.78804495652, 1642.140758294793], 
      NormalDistribution[4294.0404064063805`, 1642.140758294793], 
      NormalDistribution[11451.097371076205`, 1642.140758294793], 
      NormalDistribution[13692.659555622358`, 1642.140758294793], 
      NormalDistribution[11169.289565441804`, 1642.140758294793], 
      NormalDistribution[26052.184311955894`, 1642.140758294793], 
      NormalDistribution[5192.743009000307, 1642.140758294793], 
      NormalDistribution[4609.862125828953, 1642.140758294793], 
      NormalDistribution[5612.428941909639, 1642.140758294793], 
      NormalDistribution[5728.65880298915, 1642.140758294793], 
      NormalDistribution[17910.3713907729, 1642.140758294793], 
      NormalDistribution[23646.813236876937`, 1642.140758294793], 
      NormalDistribution[18889.901549943606`, 1642.140758294793], 
      NormalDistribution[2213.5891969057793`, 1642.140758294793], 
      NormalDistribution[5282.918650553427, 1642.140758294793], 
      NormalDistribution[2728.2489142591803`, 1642.140758294793], 
      NormalDistribution[5896.559660432474, 1642.140758294793], 
      NormalDistribution[8361.999763866046, 1642.140758294793], 
      NormalDistribution[6082.077848068011, 1642.140758294793], 
      NormalDistribution[26093.403835576704`, 1642.140758294793], 
      NormalDistribution[1890.6886146384768`, 1642.140758294793], 
      NormalDistribution[1484.108490449118, 1642.140758294793], 
      NormalDistribution[8864.248323597578, 1642.140758294793], 
      NormalDistribution[20507.194466215213`, 1642.140758294793], 
      NormalDistribution[22780.08283840647, 1642.140758294793], 
      NormalDistribution[9541.037758253493, 1642.140758294793], 
      NormalDistribution[16963.243121058327`, 1642.140758294793], 
      NormalDistribution[8821.49385424676, 1642.140758294793], 
      NormalDistribution[6426.094714594304, 1642.140758294793], 
      NormalDistribution[6675.605242902828, 1642.140758294793], 
      NormalDistribution[4127.9045045717485`, 1642.140758294793], 
      NormalDistribution[7966.169863977424, 1642.140758294793], 
      NormalDistribution[3531.472858231682, 1642.140758294793], 
      NormalDistribution[17379.41205694849, 1642.140758294793], 
      NormalDistribution[7894.058636253525, 1642.140758294793], 
      NormalDistribution[16901.19350266249, 1642.140758294793], 
      NormalDistribution[11034.103258955463`, 1642.140758294793], 
      NormalDistribution[20771.175375890976`, 1642.140758294793], 
      NormalDistribution[8734.175135659394, 1642.140758294793], 
      NormalDistribution[14786.749960012148`, 1642.140758294793], 
      NormalDistribution[3913.2154018291058`, 1642.140758294793], 
      NormalDistribution[6895.838306947016, 1642.140758294793], 
      NormalDistribution[11908.72320904663, 1642.140758294793], 
      NormalDistribution[4570.712048180918, 1642.140758294793], 
      NormalDistribution[8761.320193209878, 1642.140758294793], 
      NormalDistribution[2413.3036760781415`, 1642.140758294793], 
      NormalDistribution[24627.91674731933, 1642.140758294793], 
      NormalDistribution[22388.050254681762`, 1642.140758294793], 
      NormalDistribution[10959.282147281103`, 1642.140758294793], 
      NormalDistribution[16044.154317654378`, 1642.140758294793], 
      NormalDistribution[8713.919361332188, 1642.140758294793], 
      NormalDistribution[7792.290096872574, 1642.140758294793], 
      NormalDistribution[4260.6213589107465`, 1642.140758294793], 
      NormalDistribution[9125.845402856188, 1642.140758294793], 
      NormalDistribution[11734.785965847188`, 1642.140758294793], 
      NormalDistribution[17926.626165497662`, 1642.140758294793], 
      NormalDistribution[1278.2272713123893`, 1642.140758294793], 
      NormalDistribution[6452.098663560921, 1642.140758294793], 
      NormalDistribution[8726.881075797417, 1642.140758294793], 
      NormalDistribution[7757.951127693728, 1642.140758294793], 
      NormalDistribution[19807.43272744656, 1642.140758294793], 
      NormalDistribution[1238.1335118020106`, 1642.140758294793], 
      NormalDistribution[42348.04616154621, 1642.140758294793], 
      NormalDistribution[8436.186865203945, 1642.140758294793], 
      NormalDistribution[15592.6279279136, 1642.140758294793], 
      NormalDistribution[35358.16987522705, 1642.140758294793], 
      NormalDistribution[10718.390972479701`, 1642.140758294793], 
      NormalDistribution[19682.61767715175, 1642.140758294793], 
      NormalDistribution[4295.8103842413275`, 1642.140758294793], 
      NormalDistribution[1704.510843114971, 1642.140758294793], 
      NormalDistribution[10227.296827612778`, 1642.140758294793], 
      NormalDistribution[37544.13697114223, 1642.140758294793], 
      NormalDistribution[20140.58551838562, 1642.140758294793], 
      NormalDistribution[6108.278877112245, 1642.140758294793], 
      NormalDistribution[2840.3981072383776`, 1642.140758294793], 
      NormalDistribution[7654.407477955786, 1642.140758294793], 
      NormalDistribution[8141.60882338899, 1642.140758294793], 
      NormalDistribution[11238.286666928812`, 1642.140758294793], 
      NormalDistribution[4606.7651447641365`, 1642.140758294793], 
      NormalDistribution[9049.30654080057, 1642.140758294793], 
      NormalDistribution[22122.23496813178, 1642.140758294793], 
      NormalDistribution[6665.508139225348, 1642.140758294793], 
      NormalDistribution[3251.0631274191037`, 1642.140758294793], 
      NormalDistribution[15366.801867183913`, 1642.140758294793], 
      NormalDistribution[40669.497637355824`, 1642.140758294793], 
      NormalDistribution[17141.935727796703`, 1642.140758294793], 
      NormalDistribution[11589.295584608248`, 1642.140758294793], 
      NormalDistribution[4345.597682331496, 1642.140758294793], 
      NormalDistribution[8143.983422528176, 1642.140758294793], 
      NormalDistribution[1878.4224247317943`, 1642.140758294793], 
      NormalDistribution[3048.38169666841, 1642.140758294793], 
      NormalDistribution[10828.63767648222, 1642.140758294793], 
      NormalDistribution[6830.555605223357, 1642.140758294793], 
      NormalDistribution[6504.247746269308, 1642.140758294793], 
      NormalDistribution[12483.997819231514`, 1642.140758294793], 
      NormalDistribution[46798.295738739886`, 1642.140758294793], 
      NormalDistribution[8165.147079856017, 1642.140758294793], 
      NormalDistribution[12415.223012055983`, 1642.140758294793], 
      NormalDistribution[5951.211640944731, 1642.140758294793], 
      NormalDistribution[11014.009567715104`, 1642.140758294793], 
      NormalDistribution[5554.714423789193, 1642.140758294793], 
      NormalDistribution[9359.501514738968, 1642.140758294793], 
      NormalDistribution[38589.85702962768, 1642.140758294793], 
      NormalDistribution[22424.059659403712`, 1642.140758294793], 
      NormalDistribution[14804.148068760962`, 1642.140758294793], 
      NormalDistribution[6679.088238333591, 1642.140758294793], 
      NormalDistribution[12262.56764751334, 1642.140758294793], 
      NormalDistribution[15944.695634812238`, 1642.140758294793], 
      NormalDistribution[1623.8489730775145`, 1642.140758294793], 
      NormalDistribution[2993.0130411812534`, 1642.140758294793], 
      NormalDistribution[5032.737743070982, 1642.140758294793], 
      NormalDistribution[37009.13888504255, 1642.140758294793], 
      NormalDistribution[21444.779594563777`, 1642.140758294793], 
      NormalDistribution[7346.769777645093, 1642.140758294793], 
      NormalDistribution[13823.358564605956`, 1642.140758294793], 
      NormalDistribution[14707.896389773148`, 1642.140758294793], 
      NormalDistribution[12681.418706726028`, 1642.140758294793], 
      NormalDistribution[44640.80903573258, 1642.140758294793], 
      NormalDistribution[4296.823361316863, 1642.140758294793], 
      NormalDistribution[804.0163487625614, 1642.140758294793], 
      NormalDistribution[12392.8046394267, 1642.140758294793], 
      NormalDistribution[4363.8953053023415`, 1642.140758294793], 
      NormalDistribution[13096.551037921996`, 1642.140758294793], 
      NormalDistribution[37253.89116876283, 1642.140758294793], 
      NormalDistribution[10570.110625697027`, 1642.140758294793], 
      NormalDistribution[19778.680436922707`, 1642.140758294793], 
      NormalDistribution[10734.388725133547`, 1642.140758294793], 
      NormalDistribution[8585.086453305932, 1642.140758294793], 
      NormalDistribution[5845.876737930758, 1642.140758294793], 
      NormalDistribution[5505.518797866627, 1642.140758294793], 
      NormalDistribution[13365.171257702294`, 1642.140758294793], 
      NormalDistribution[5600.9748688011105`, 1642.140758294793], 
      NormalDistribution[4635.0481380106285`, 1642.140758294793], 
      NormalDistribution[11580.390681469755`, 1642.140758294793], 
      NormalDistribution[14352.410577333525`, 1642.140758294793], 
      NormalDistribution[22770.414186255977`, 1642.140758294793], 
      NormalDistribution[41346.33152738019, 1642.140758294793], 
      NormalDistribution[16061.807203166976`, 1642.140758294793], 
      NormalDistribution[37236.61697527743, 1642.140758294793], 
      NormalDistribution[13204.428073555137`, 1642.140758294793], 
      NormalDistribution[39103.3589426291, 1642.140758294793], 
      NormalDistribution[3623.434092694657, 1642.140758294793], 
      NormalDistribution[40312.84777138295, 1642.140758294793], 
      NormalDistribution[8068.123960266341, 1642.140758294793], 
      NormalDistribution[8048.085774525317, 1642.140758294793], 
      NormalDistribution[3586.5978888183836`, 1642.140758294793], 
      NormalDistribution[6683.591369447617, 1642.140758294793], 
      NormalDistribution[1154.037552582613, 1642.140758294793], 
      NormalDistribution[39750.706511667064`, 1642.140758294793], 
      NormalDistribution[7354.78091016337, 1642.140758294793], 
      NormalDistribution[10069.970062371623`, 1642.140758294793], 
      NormalDistribution[3225.585699377245, 1642.140758294793], 
      NormalDistribution[15607.502076815834`, 1642.140758294793], 
      NormalDistribution[36459.5032413581, 1642.140758294793], 
      NormalDistribution[10550.471895336697`, 1642.140758294793], 
      NormalDistribution[7464.125943695439, 1642.140758294793], 
      NormalDistribution[7242.018963449451, 1642.140758294793], 
      NormalDistribution[4237.167457142474, 1642.140758294793], 
      NormalDistribution[17876.68305439646, 1642.140758294793], 
      NormalDistribution[2077.9535549671673`, 1642.140758294793], 
      NormalDistribution[13690.9277329371, 1642.140758294793], 
      NormalDistribution[20379.939250730295`, 1642.140758294793], 
      NormalDistribution[14963.587344999843`, 1642.140758294793], 
      NormalDistribution[4016.3836848551164`, 1642.140758294793], 
      NormalDistribution[14510.427895944464`, 1642.140758294793], 
      NormalDistribution[4189.44599163913, 1642.140758294793], 
      NormalDistribution[13271.658027561549`, 1642.140758294793], 
      NormalDistribution[12753.646623969049`, 1642.140758294793], 
      NormalDistribution[1255.723232766095, 1642.140758294793], 
      NormalDistribution[44395.35676595485, 1642.140758294793], 
      NormalDistribution[9651.053188086158, 1642.140758294793], 
      NormalDistribution[11161.296263505148`, 1642.140758294793], 
      NormalDistribution[3884.4968724351365`, 1642.140758294793], 
      NormalDistribution[5836.24980225081, 1642.140758294793], 
      NormalDistribution[6757.777310281999, 1642.140758294793], 
      NormalDistribution[3354.077398817786, 1642.140758294793], 
      NormalDistribution[6984.445869846692, 1642.140758294793], 
      NormalDistribution[36031.1262219175, 1642.140758294793], 
      NormalDistribution[14095.080417056073`, 1642.140758294793], 
      NormalDistribution[6385.142443150078, 1642.140758294793], 
      NormalDistribution[5503.747504703019, 1642.140758294793], 
      NormalDistribution[1555.7949386052096`, 1642.140758294793], 
      NormalDistribution[6154.87447608764, 1642.140758294793], 
      NormalDistribution[12109.689986946552`, 1642.140758294793]}, 
    "Modes" -> CompressedData["
1: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
LiSNoRX5+Cp7PeBYWC1cz7v5latzcSPmz1bRZBp8zhx/lWnUgo/USsrOXzSw
B4fFX9LIoCcOufS1FcOh9zvHz6cIR8voY+EydUh35Xvzu68IFg10E+F1Begr
7OLXiGNg/jQrUFOQhVmJZb7Ruu2YPvM55qT6IAp+3DYZucRB3/fDlaHbuWAd
3FC/u64WSXD3GpMawGyD/aHeM1kIuPNDbl3uACaUP5Zt9KuCRIXxtKRzFTQL
PWU1lmTh0vT8lbfrSGjcusNti2AIhC5UxrRfG0CdF2mUSSpH9Cyf6nwGFeu/
1fap7krHikgRPbInG/1xgTLODf2QWxC/qhtDg3B45365rRXYPVDbLXCyHNdS
7veqBObhVa1yiap7EzpPX9j7RecD5Ccmq+5W1MF8be76+eEWDM/Ibq/f1wC7
y+auNJtc1Jifou82Z+G8uK+a68U8WOkd1G4dq8XEQgit+UsN1ppvejsYF4pA
pw83bmYP4RR/L9u/qxrsazNjySw67M6JO/yzyEGB8fLJg6xiCD5m/2XYk6B/
qemDkmYGmoj+iq76ZZh5uWj54Nt+TGxdd+rFs3rIPVK6p/ijFKs+3bOqelSE
xkpbge2GkXillfHp8/JSiC7xNu5MYeJ/CDTzag==
     "], "Weights" -> 
    SparseArray[Automatic, {892}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0005477346412556054, "SingleEvaluationTime" -> 
    0.0068822428571428578`2., "Version" -> {12.1, 1}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.815320898689535*^9, 3.8153209075939875`*^9}, 
   3.8153218370749493`*^9, 3.8153219882132835`*^9, 3.815322672299011*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"38675cd0-7c98-471b-a94d-b17306cf2a14"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 14", "Subsection",
 CellChangeTimes->{{3.7802073890101776`*^9, 3.7802073948762665`*^9}, {
  3.8144381516001315`*^9, 
  3.814438152512693*^9}},ExpressionUUID->"087856fa-a650-44e9-a0c9-\
1b006a209105"],

Cell[TextData[{
 "Look at the properties of the ",
 StyleBox["insurancepm", "CodeText"],
 "."
}], "Text",
 CellChangeTimes->{{3.780207400044887*^9, 3.780207404692844*^9}, {
  3.780207451008587*^9, 
  3.7802074542983537`*^9}},ExpressionUUID->"d53b6bf2-d303-4fe8-994d-\
b8468b351848"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"insuranceperformance", "[", "prop", "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"prop", ",", " ", 
     RowBox[{"insuranceperformance", "[", "\"\<Properties\>\"", "]"}]}], 
    "}"}], ",", " ", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.815321019277747*^9, 3.8153210692062426`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"b5722b1f-029f-4631-b90f-9325fb225716"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`prop$$ = "BatchEvaluationTime", 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`prop$$], {
      "BatchEvaluationTime", "BestPredictedExamples", "ComparisonPlot", 
       "EvaluationTime", "Examples", "FractionVarianceUnexplained", 
       "GeometricMeanProbabilityDensity", "LeastCertainExamples", 
       "Likelihood", "LogLikelihood", "MeanCrossEntropy", "MeanDeviation", 
       "MeanSquare", "MostCertainExamples", "Perplexity", "PredictorFunction",
        "ProbabilityDensities", "ProbabilityDensityHistogram", "Properties", 
       "RejectionRate", "Report", "ResidualHistogram", "ResidualPlot", 
       "Residuals", "RSquared", "StandardDeviation", 
       "StandardDeviationBaseline", "TotalSquare", 
       "WorstPredictedExamples"}}}, Typeset`size$$ = {77., {0., 8.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`prop$$ = "BatchEvaluationTime"}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> $CellContext`insuranceperformance[$CellContext`prop$$], 
      "Specifications" :> {{$CellContext`prop$$, {
         "BatchEvaluationTime", "BestPredictedExamples", "ComparisonPlot", 
          "EvaluationTime", "Examples", "FractionVarianceUnexplained", 
          "GeometricMeanProbabilityDensity", "LeastCertainExamples", 
          "Likelihood", "LogLikelihood", "MeanCrossEntropy", "MeanDeviation", 
          "MeanSquare", "MostCertainExamples", "Perplexity", 
          "PredictorFunction", "ProbabilityDensities", 
          "ProbabilityDensityHistogram", "Properties", "RejectionRate", 
          "Report", "ResidualHistogram", "ResidualPlot", "Residuals", 
          "RSquared", "StandardDeviation", "StandardDeviationBaseline", 
          "TotalSquare", "WorstPredictedExamples"}}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{279., {53., 59.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`insuranceperformance = 
       PredictorMeasurementsObject[
         Association["Model" -> PredictorFunction[
            Association[
            "ExampleNumber" -> 446, "Input" -> 
             Association[
              "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
                 Association[
                 "Input" -> 
                  Association[
                   "f1" -> Association["Type" -> "Numerical"], "f2" -> 
                    Association["Type" -> "Nominal"], "f3" -> 
                    Association["Type" -> "Numerical"], "f4" -> 
                    Association["Type" -> "Numerical"], "f5" -> 
                    Association["Type" -> "Nominal"], "f6" -> 
                    Association["Type" -> "Nominal"]], "Output" -> 
                  Association[
                   "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                    "f2" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                    "f3" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f4" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Nominal", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Nominal", "Weight" -> 1]], 
                  "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["Transpose", 
                    Association["FeatureNumber" -> 6]], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {
                    "Numerical", "Nominal", "Numerical", "Numerical", 
                    "Nominal", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> F\
alse]]}]], "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                  "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
               "Processor" -> MachineLearning`MLProcessor["Sequence", 
                 Association[
                 "Input" -> 
                  Association[
                   "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                    "f3" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f4" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f2" -> 
                    Association["Type" -> "Nominal", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Nominal", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Nominal", "Weight" -> 1]], 
                  "Output" -> 
                  Association[
                   "(f1f3f4)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 3], 
                    "(f2f5f6)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]], 
                  "Processors" -> {
                    MachineLearning`MLProcessor["Threads", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f3" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
                    Association["Type" -> "Nominal", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Nominal", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Nominal", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f1f3f4)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 3], 
                    "(f2f5f6)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["ToVector", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f3" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f1f3f4)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 3]], 
                    "Version" -> {12.1, 1}, "ID" -> 6665390927393525173]], 
                    MachineLearning`MLProcessor["ToVector", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f2" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                    "f5" -> Association["Type" -> "Nominal", "Weight" -> 1], 
                    "f6" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f2f5f6)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]], 
                    "Version" -> {12.1, 1}, "ID" -> 8299490119381043207]]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"]], 
                    MachineLearning`MLProcessor["Threads", 
                    Association[
                    "Input" -> 
                    Association[
                    "(f1f3f4)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 3], 
                    "(f2f5f6)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]], 
                    "Output" -> 
                    Association[
                    "(f1f3f4)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 3], 
                    "(f2f5f6)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "(f1f3f4)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 3]], 
                    "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 446, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association["f1" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {39.09865470852018, 30.31580717488789, 
                    1.0695067264573992`}, "Method" -> "Naive", "VectorLength" -> 
                    3, "Output" -> Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association["f1" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {39.09865470852018, 30.31580717488789, 
                    1.0695067264573992`}, 
                    "StandardDeviation" -> {14.48779130319385, 
                    6.072527963964648, 1.208012572581632}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, "Output" -> 
                    Association["f1" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Type" -> "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 3]], "Output" -> 
                    Association["f1" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association["f1" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Output" -> Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 3]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "Model" -> 
                    Association[
                    "Matrix" -> {{0.6891620607724147, 0.263971115478849, 
                    0.6748147184114843}, {
                    0.7132286098481526, -0.08272486481563138, \
-0.6960327196585713}, {-0.12790857706186157`, 
                    0.9609765069626247, -0.2452825900465056}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association["f1" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {39.09865470852018, 30.31580717488789, 
                    1.0695067264573992`}, 
                    "StandardDeviation" -> {14.48779130319385, 
                    6.072527963964648, 1.208012572581632}, "Output" -> 
                    Association["f1" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 
                    1]]]], "FinalDimension" -> 3, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.0093254, "MaxTrainingMemory" -> 
                    119520, "DataMemory" -> 11376, "FunctionMemory" -> 22328, 
                    "LanguageVersion" -> {12.1, 1}, "Date" -> 
                    DateObject[{2020, 11, 25, 19, 39, 
                    44.3700966`9.399665243386982}, "Instant", "Gregorian", 
                    0.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64", 
                    "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                    "DimensionReduction", "VectorLength" -> 3, "Output" -> 
                    Association[
                    "(f1f3f4)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 3]], 
                    "Type" -> "NumericalVector", "Version" -> {12.1, 1}, "ID" -> 
                    5772811868333326886]], 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "(f2f5f6)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]], 
                    "VectorLength" -> 3, "Output" -> 
                    Association[
                    "(f2f5f6)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]], 
                    "Type" -> "NominalVector", "Version" -> {12.1, 1}, "ID" -> 
                    5894247373463295989]]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Imputed"]], 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "(f1f3f4)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 3]], 
                    "Mean" -> {39.09865470852018, 30.31580717488789, 
                    1.0695067264573992`}, 
                    "StandardDeviation" -> {14.48779130319385, 
                    6.072527963964648, 1.208012572581632}, "Output" -> 
                    Association[
                    "(f1f3f4)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 3]], 
                    "Version" -> {12.1, 1}, "ID" -> 8404960534059901568]], 
                    MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "(f2f5f6)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]], 
                    "Index" -> {
                    Association["female" -> 1, "male" -> 2], 
                    Association["no" -> 1, "yes" -> 2], 
                    Association[
                    "northeast" -> 1, "northwest" -> 2, "southeast" -> 3, 
                    "southwest" -> 4]}, "MissingCode" -> 0, 
                    "Version" -> {12.1, 1}, "ID" -> 5366059775514875614, 
                    "Output" -> 
                    Association[
                    "(f2f5f6)" -> 
                    Association["Type" -> "NominalVector", "Weight" -> 3]]]]},
                   "Invertibility" -> "Perfect", "StructurePreserving" -> 
                  True, "Missing" -> "Imputed"]]], "Output" -> 
             Association[
              "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
                 Association[
                 "Input" -> 
                  Association["f1" -> Association["Type" -> "Numerical"]], 
                  "Output" -> 
                  Association[
                   "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                  "Perfect", "StructurePreserving" -> False, "Missing" -> 
                  "Allowed"]], "Processor" -> 
               MachineLearning`MLProcessor["Sequence", 
                 Association[
                 "Input" -> 
                  Association[
                   "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                   "Output" -> 
                  Association[
                   "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                   "Processors" -> {
                    MachineLearning`MLProcessor["ToVector", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.1, 1}, "ID" -> 3452868332436575388]], 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {12944.402552062782`}, 
                    "StandardDeviation" -> {11769.36162488307}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {12.1, 1}, "ID" -> 3166526630455491285]], 
                    MachineLearning`MLProcessor["FromVector", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1]], 
                    "Version" -> {12.1, 1}, "ID" -> 3415339320084619631]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "Key" -> "f1", 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                  "Perfect", "StructurePreserving" -> False, "Missing" -> 
                  "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
               "InverseProcessorFunction" -> (12944.402552062782` + 
                11769.36162488307 #& ), 
               "ProcessorFunction" -> (-1.0998389687249828` + 
                0.00008496637556668969 #& ), "Name" -> "value", 
               "Quantiles" -> {-1.0036989539931946`, 3.999961758198159}], 
             "Prior" -> Automatic, "Utility" -> (DiracDelta[#2 - #]& ), 
             "Threshold" -> 0, "PerformanceGoal" -> Automatic, 
             "BatchProcessing" -> Automatic, "Model" -> Association["Trees" -> {
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{6, 2, 1, 1, 1, 3, 1, 1, 4, 7, 7, 10, 
                    8, 8, 1, 8, 8, 2, 7, 1, 5, 1}], 
                   "NumericalThresholds" -> {
                    9.999999682655224*^-21, -0.01803874969482422, 
                    0.26489558815956116`, 1.0303997993469238`, 
                    0.2721875458955765, -0.05069320276379585, \
-0.04177169036120176, -1.1171952486038208`, -0.013168849982321262`, 
                    0.8957435786724091, 
                    0.8957435190677643, -0.024029985070228577`, \
-0.24784784018993378`, -0.22396079450845718`, -0.42877623438835144`, \
-0.32355694472789764`, -0.22395991533994675`, -0.03172740899026394, 
                    0.8957429826259613, 
                    0.6182591021060944, -0.16732413321733475`, \
-1.3870283961296082`}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.07987561076879501, -0.19267401099205017`, 
                    0.43760770559310913`, -0.004681249614804983, 
                    0.03323006629943848, 
                    0.5648544430732727, -0.06896790862083435, 
                    0.18949593603610992`, -0.16458465158939362`, \
-0.03191787004470825, 
                    0.07048641890287399, -0.09081874787807465, \
-0.09792917966842651, -0.07698044925928116, -0.019389310851693153`, \
-0.11698075383901596`, -0.13785013556480408`, -0.014179123565554619`, \
-0.06047910451889038, 
                    0.00300682638771832, -0.05680033192038536, \
-0.18656504154205322`, -0.18101784586906433`}], "Children" -> 
                   RawArray["Integer16",{{2, 3}, {7, 5}, {6, 4}, {13, 
                    10}, {-3, -6}, {8, 9}, {-1, -8}, {21, 11}, {12, -10}, {
                    14, -11}, {15, -12}, {-7, 16}, {-4, 17}, {-5, 
                    19}, {-9, -16}, {-13, -17}, {20, 
                    18}, {-18, -19}, {-15, -20}, {-14, -21}, {-2, 
                    22}, {-22, -23}}], "NominalSplits" -> {}, "RootIndex" -> 
                   1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{6, 2, 1, 1, 1, 3, 1, 1, 4, 7, 6, 6, 
                    7, 10, 7, 1, 1, 1, 1, 5, 1}], 
                   "NumericalThresholds" -> {
                    9.999999682655224*^-21, -0.01803874969482422, 
                    0.26489558815956116`, 1.0303997993469238`, 
                    0.2673739790916443, -0.05069320276379585, \
-0.21024060994386673`, -1.1171952486038208`, -0.013168849982321262`, 
                    0.8957435786724091, 0.5072334706783295, 
                    0.5072328150272369, 
                    0.8957435190677643, -0.024029985070228577`, 
                    0.8957426846027374, -0.5563377439975739, \
-0.8333925902843475, 0.7507074773311615, 
                    1.443563461303711, -0.16732413321733475`, \
-1.3870283961296082`}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.06149821728467941, -0.15412944555282593`, 
                    0.34767311811447144`, -0.04340769350528717, 
                    0.03513683006167412, 
                    0.44971081614494324`, -0.05516457185149193, 
                    0.15003234148025513`, -0.1355225294828415, \
-0.02552453987300396, 0.05639888718724251, -0.06099243462085724, 
                    0.003959041554480791, -0.07264523953199387, \
-0.1177634671330452, -0.009174245409667492, -0.09666949510574341, \
-0.08451435714960098, -0.04436897486448288, 
                    0.006727423518896103, -0.14924228191375732`, \
-0.14480452239513397`}], "Children" -> 
                   RawArray["Integer16",{{2, 3}, {7, 5}, {6, 4}, {11, 
                    10}, {-3, -6}, {8, 9}, {-1, -8}, {20, 13}, {14, -10}, {
                    15, -11}, {12, 18}, {-4, -13}, {16, -14}, {-7, 17}, {-5, 
                    19}, {-9, -17}, {-15, -18}, {-12, -19}, {-16, -20}, {-2, 
                    21}, {-21, -22}}], "NominalSplits" -> {}, "RootIndex" -> 
                   1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{6, 2, 1, 1, 1, 4, 1, 1, 6, 1, 1, 9, 
                    8, 5, 8, 3, 10, 1, 10}], 
                   "NumericalThresholds" -> {
                    9.999999682655224*^-21, -0.01803874969482422, 
                    0.26489558815956116`, 1.0303997993469238`, 
                    0.2721875458955765, -0.013168541248887777`, 
                    0.27016764879226685`, -1.1171952486038208`, 
                    0.5072334706783295, -0.9713696539402008, \
-0.4164053201675415, -0.31710507720708847`, -0.24784784018993378`, \
-0.2558038979768753, -0.22395985573530197`, -0.048535723239183426`, 
                    0.731764942407608, 0.6182591021060944, 
                    0.9275423586368561}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.05755676329135895, -0.07948650419712067, 
                    0.2797450125217438, 0.0019069453701376915`, 
                    0.02637745440006256, 
                    0.36195117235183716`, -0.018180204555392265`, 
                    0.13691943883895874`, -0.039942387491464615`, 
                    0.041705172508955, -0.0982637107372284, \
-0.06688661873340607, -0.1245068907737732, -0.05464407056570053, \
-0.019360661506652832`, -0.0026915716007351875`, -0.043973833322525024`, 
                    0.0008206742350012064, -0.03859084099531174, \
-0.11351195722818375`}], "Children" -> 
                   RawArray["Integer16",{{2, 3}, {7, 5}, {6, 4}, {13, 
                    9}, {-3, -6}, {8, -7}, {-1, -8}, {12, 10}, {14, -10}, {-9,
                     11}, {-11, -12}, {-2, 19}, {-4, 15}, {-5, 17}, {18, 
                    16}, {-16, -17}, {-15, -18}, {-14, -19}, {-13, -20}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{6, 2, 1, 3, 1, 1, 1, 5, 1, 1, 3, 6, 
                    2, 6, 7, 6, 1, 8, 1, 1, 5, 4}], 
                   "NumericalThresholds" -> {
                    9.999999682655224*^-21, -0.01803874969482422, 
                    0.26489558815956116`, -0.05069320276379585, \
-0.07084536552429199, 1.0303997993469238`, 
                    0.23577813804149628`, -0.2558036595582962, \
-0.7315489649772644, -1.1171952486038208`, -0.8780049085617065, 
                    0.5072334110736847, 0.5411784052848816, 
                    0.5072334706783295, 0.895742803812027, 
                    0.5072329938411713, -0.4865659177303314, \
-0.22396039962768555`, -0.699399471282959, 
                    0.7461511492729187, -0.25580330193042755`, \
-0.0131692448630929}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.044741686433553696`, -0.10144240409135818`, 
                    0.2187511920928955, 
                    0.021560896188020706`, -0.08173293620347977, 
                    0.2856377959251404, -0.01926327683031559, 
                    0.10784893482923508`, 
                    0.01580326072871685, -0.06672263890504837, \
-0.04247099906206131, 0.010254159569740295`, 0.06043555215001106, 
                    0.02274627424776554, -0.042137984186410904`, \
-0.03876863792538643, -0.09589771181344986, -0.05195484310388565, \
-0.006122948601841927, -0.06163106486201286, -0.03235655277967453, \
-0.09296468645334244, -0.09791195392608643}], "Children" -> 
                   RawArray["Integer16",{{2, 3}, {7, 5}, {4, 6}, {10, 
                    8}, {-3, -6}, {14, 11}, {-1, -8}, {19, 9}, {-9, -10}, {21,
                     16}, {13, 12}, {-12, -13}, {-7, -14}, {15, 20}, {-4, 
                    18}, {-11, 
                    17}, {-17, -18}, {-16, -19}, {-5, -20}, {-15, -21}, {-2, 
                    22}, {-22, -23}}], "NominalSplits" -> {}, "RootIndex" -> 
                   1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{6, 2, 1, 2, 4, 1, 1, 1, 1, 6, 1, 9, 
                    7, 9, 3, 1, 9, 4, 3}], 
                   "NumericalThresholds" -> {
                    9.999999682655224*^-21, -0.07255399599671364, 
                    0.2067645713686943, 
                    0.5728307664394379, -0.013168614357709885`, 
                    1.3750149607658386`, 
                    1.5729206800460815`, -0.5607797801494598, \
-1.1171952486038208`, 0.5072326958179474, 
                    0.2721875458955765, -0.22569946199655533`, 
                    0.8957426249980927, -0.4085095077753067, \
-0.876563549041748, -0.4164053201675415, -0.31710507720708847`, \
-0.6856109201908112, -0.061055079102516174`}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.018741855397820473`, -0.04840491712093353, 
                    0.15110614895820618`, 0.007795355748385191, 
                    0.19722695648670197`, -0.012853390537202358`, 
                    0.05874458700418472, -0.0026652533560991287`, 
                    0.07021795213222504, -0.01561401505023241, \
-0.06699663400650024, 0.24747775495052338`, 0.03676944226026535, 
                    0.012909968383610249`, -0.04415615275502205, \
-0.02735402248799801, -0.040928807109594345`, -0.0782836377620697, \
-0.026659328490495682`, -0.08687148988246918}], "Children" -> 
                   RawArray["Integer16",{{2, 3}, {8, 4}, {5, 6}, {-3, 11}, {
                    9, -6}, {12, 7}, {-7, -8}, {-1, -9}, {17, 10}, {-10, 
                    16}, {-5, -12}, {14, 13}, {-13, 15}, {-4, 
                    18}, {-14, -16}, {-11, -17}, {-2, 
                    19}, {-15, -19}, {-18, -20}}], "NominalSplits" -> {}, 
                   "RootIndex" -> 1, "NominalDimension" -> 0, 
                   "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{6, 2, 1, 3, 1, 10, 8, 1, 1, 7, 1, 4, 
                    4, 5, 1, 2, 1, 8, 9, 9, 2}], 
                   "NumericalThresholds" -> {
                    9.999999682655224*^-21, -0.01803874969482422, 
                    0.34320709109306335`, -0.04882701486349106, 
                    0.6863076388835907, -0.024030077271163464`, \
-0.2478480115532875, 1.0303997993469238`, 0.27016764879226685`, 
                    0.8957435786724091, -1.1171952486038208`, \
-0.6856111586093903, -0.013169885613024235`, -0.16732359677553177`, \
-0.8333925902843475, -0.2026987001299858, -0.150310218334198, 
                    0.5165561139583588, -0.22569969296455383`, \
-0.2257009744644165, -0.236492320895195}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.02774053066968918, -0.06962932646274567, 
                    0.1433180272579193, -0.03654768690466881, 
                    0.008545530028641224, 
                    0.1969725340604782, -0.007272247690707445, \
-0.06356553733348846, -0.024050956591963768`, 0.07284366339445114, 
                    0.0367773212492466, -0.01911817118525505, 
                    0.045734114944934845`, -0.008826252073049545, 
                    0.010056744329631329`, -0.058941908180713654`, \
-0.021181490272283554`, -0.032327041029930115`, -0.037331026047468185`, 
                    0.0028536138124763966`, -0.05908742919564247, \
-0.06548543274402618}], "Children" -> 
                   RawArray["Integer16",{{2, 3}, {9, 5}, {4, 8}, {11, 
                    6}, {-3, -6}, {-5, 7}, {-7, 18}, {14, 10}, {-1, -10}, {
                    12, -11}, {20, 15}, {-9, 13}, {-13, -14}, {16, -15}, {-12,
                     17}, {-4, 19}, {-16, -18}, {-8, -19}, {-17, -20}, {-2, 
                    21}, {-21, -22}}], "NominalSplits" -> {}, "RootIndex" -> 
                   1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{6, 2, 1, 2, 4, 3, 2, 10, 9, 9, 1, 8, 
                    10, 3}], 
                   "NumericalThresholds" -> {
                    9.999999682655224*^-21, -0.07255399599671364, 
                    0.2067645713686943, 
                    0.6834334433078766, -0.013168541248887777`, 
                    0.7721121609210968, -0.7375942468643188, 
                    0.9275425970554352, -0.40850959718227386`, \
-0.40850968658924103`, -1.0094558000564575`, -0.32355697453022003`, 
                    0.7773063480854034, -0.050010841339826584`}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.013734836131334305`, -0.018938379362225533`, 
                    0.09829606860876083, 0.011357657611370087`, 
                    0.14997351169586182`, 0.004559863358736038, 
                    0.02264360710978508, 0.0501280203461647, 
                    0.011730018071830273`, -0.013425227254629135`, \
-0.05073489621281624, -0.006566036958247423, -0.03997158631682396, \
-0.03798893839120865, -0.0684155747294426}], "Children" -> 
                   RawArray["Integer16",{{2, 3}, {7, 4}, {5, 6}, {-3, -5}, {
                    10, -6}, {8, -7}, {-1, -8}, {9, -9}, {-4, 13}, {-2, 11}, {
                    14, 12}, {-12, -13}, {-10, -14}, {-11, -15}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{6, 2, 1, 1, 3, 10, 8, 6, 8, 9, 9, 5, 
                    2, 8, 5, 9, 2}], 
                   "NumericalThresholds" -> {-0.5651198923587799, \
-0.2026987001299858, 0.8548800349235535, 
                    0.7507074773311615, -0.04898814111948013, \
-0.024030462838709354`, 0.5165567100048065, 
                    0.5072326958179474, -0.32355713844299316`, 
                    0.4278861731290817, -0.40850941836833954`, \
-0.16732390969991684`, 
                    0.9093018770217896, -0.22396069020032883`, \
-0.16732335835695267`, 0.4750324785709381, 0.4368094950914383}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.006669031456112862, -0.009602893143892288, 
                    0.06675805151462555, 0.03390520066022873, 
                    0.1412975937128067, 0.025300975888967514`, 
                    0.008251756429672241, 
                    0.008878865279257298, -0.043088920414447784`, \
-0.021202458068728447`, 0.04990702494978905, -0.023201005533337593`, 
                    0.006852658465504646, 0.1060139611363411, 
                    0.03925831615924835, -0.04778081923723221, \
-0.01952638290822506, 0.0006940861931070685}], "Children" -> 
                   RawArray["Integer16",{{2, 3}, {14, 4}, {5, 10}, {13, -5}, {
                    7, 6}, {-6, 9}, {8, -8}, {-2, 16}, {-7, 15}, {11, 
                    12}, {-4, 
                    17}, {-11, -13}, {-3, -14}, {-1, -15}, {-10, -16}, {-9, \
-17}, {-12, -18}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{6, 2, 1, 1, 3, 5, 1, 3, 1, 7, 7, 7, 
                    6, 10, 4, 4, 3}], 
                   "NumericalThresholds" -> {9.999999682655224*^-21, 
                    0.5241711437702179, 
                    0.4796958863735199, -0.3863624930381775, \
-0.05069320276379585, -0.2558036595582962, -0.7315489649772644, 
                    0.7721121609210968, 0.0015616032178513706`, 
                    0.8957423865795135, 0.8957426846027374, 
                    0.8957438170909882, -0.565120667219162, 
                    0.9275429546833038, -0.6856114566326141, \
-0.013168823439627886`, 0.7761906087398529}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.010463702492415905`, -0.017449507489800453`, 
                    0.11080113798379898`, -0.026059752330183983`, 
                    0.047002147883176804`, -0.02733837626874447, 
                    0.036072321236133575`, -0.036300573498010635`, 
                    0.02647692710161209, 0.005430775694549084, 
                    0.043703678995370865`, -0.012435819022357464`, 
                    0.013778235763311386`, 
                    0.07950684428215027, -0.014505619183182716`, \
-0.0338444858789444, -0.046731408685445786`, -0.038548607379198074`}], 
                   "Children" -> 
                   RawArray["Integer16",{{2, 3}, {4, 13}, {5, 8}, {-1, -5}, {
                    14, 6}, {17, 7}, {-7, 9}, {10, -9}, {-8, -10}, {-4, 
                    11}, {-11, 12}, {-12, -13}, {-3, -14}, {15, -15}, {-2, 
                    16}, {-16, -17}, {-6, -18}}], "NominalSplits" -> {}, 
                   "RootIndex" -> 1, "NominalDimension" -> 0, 
                   "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{7, 2, 1, 3, 3, 2, 1, 4, 6, 5, 4, 7, 
                    3, 1, 5, 2, 4, 3}], 
                   "NumericalThresholds" -> {
                    0.8957421481609344, -0.2026987001299858, 
                    0.8847680687904358, -0.47144321724772453`, \
-0.05763893947005272, -1.0171347260475159`, -0.7315489649772644, \
-0.013170139398425817`, 
                    0.5072334110736847, -0.1673235222697258, \
-0.013168869074434042`, 
                    0.8957435190677643, -0.8803202509880066, \
-0.484792023897171, -0.2558038979768753, 
                    0.7420374155044556, -0.6856112778186798, \
-0.8767273426055908}, "LeafValues" -> 
                   RawArray[
                    "Real32",{-0.004652636591345072, -0.039834678173065186`, 
                    0.04090263694524765, 0.008797677233815193, 
                    0.0829245075583458, -0.04119489714503288, \
-0.016397951170802116`, -0.006621142849326134, 0.0529567189514637, 
                    0.039954621344804764`, -0.008999797515571117, \
-0.0398699976503849, 0.0040398878045380116`, -0.0352109894156456, 
                    0.02228582091629505, -0.009536894038319588, \
-0.016670016571879387`, -0.028970105573534966`, -0.017154144123196602`}], 
                   "Children" -> 
                   RawArray["Integer16",{{2, 3}, {14, 4}, {5, 9}, {-3, -5}, {
                    12, 6}, {-6, 7}, {8, 11}, {-7, -9}, {15, 
                    10}, {-10, -11}, {-8, -12}, {16, 
                    13}, {-13, -14}, {-1, -15}, {-4, 18}, {
                    17, -17}, {-2, -18}, {-16, -19}}], "NominalSplits" -> {}, 
                   "RootIndex" -> 1, "NominalDimension" -> 0, 
                   "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{7, 1, 4, 2, 1, 2, 10, 5, 1, 4, 3, 3, 
                    3, 3, 2}], 
                   "NumericalThresholds" -> {0.8957421481609344, 
                    0.8894558250904083, -0.013168348465114832`, \
-0.01803874969482422, 1.0234560370445251`, 
                    0.4948282092809677, -0.024030694738030434`, \
-0.1673237755894661, -1.0429463982582092`, -0.6856119334697723, \
-0.06728046014904976, -0.882777065038681, -0.05961124785244465, \
-0.050010841339826584`, -0.7772271037101746}, "LeafValues" -> 
                   RawArray[
                    "Real32",{-0.006444093771278858, -0.02143092453479767, 
                    0.07498437166213989, 0.031628452241420746`, 
                    0.024733107537031174`, -0.023089034482836723`, 
                    0.021114850416779518`, -0.023845870047807693`, 
                    0.03128751739859581, 
                    0.016522468999028206`, -0.01476372592151165, 
                    0.0544002465903759, 
                    0.030691111460328102`, -0.021594813093543053`, \
-0.048314712941646576`, 0.010877624154090881`}], "Children" -> 
                   RawArray["Integer16",{{2, 3}, {4, -3}, {5, -4}, {15, 11}, {
                    7, 6}, {12, -7}, {8, 9}, {-2, -9}, {14, 
                    10}, {-10, -11}, {-5, -12}, {-6, 
                    13}, {-13, -14}, {-8, -15}, {-1, -16}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{6, 1, 2, 4, 1, 3, 10, 1, 5, 2, 2, 5, 
                    10, 7}], 
                   "NumericalThresholds" -> {-0.5651198923587799, 
                    0.8227382898330688, -0.01803874969482422, \
-0.013168348465114832`, 0.34320709109306335`, 
                    0.7721121609210968, -0.024031134322285652`, 
                    0.5512655973434448, -0.2558038979768753, \
-0.918034166097641, 0.052003927528858185`, -0.25580327212810516`, 
                    0.7317648828029633, 0.06503189355134964}, "LeafValues" -> 
                   RawArray["Real32",{0.009300559759140015, 
                    0.010312175378203392`, 0.06629718840122223, 
                    0.021958906203508377`, 0.025302758440375328`, 
                    0.017289096489548683`, 
                    0.019964341074228287`, -0.03661130741238594, 
                    0.004382014740258455, -0.013281827792525291`, \
-0.004323337227106094, -0.018312476575374603`, 
                    0.049144353717565536`, -0.02008073404431343, \
-0.006282841321080923}], "Children" -> 
                   RawArray["Integer16",{{2, 4}, {3, -3}, {14, 12}, {5, -5}, {
                    7, 6}, {8, -7}, {-2, 10}, {-6, 9}, {-9, -10}, {13, 
                    11}, {-11, -12}, {-4, -13}, {-8, -14}, {-1, -15}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{6, 2, 1, 4, 9, 1, 2, 3, 4, 9, 7, 3}],
                    "NumericalThresholds" -> {
                    9.999999682655224*^-21, -0.5751381814479828, 
                    0.8227382898330688, -0.013168348465114832`, 
                    0.4750327914953232, 0.2067645713686943, 
                    0.29540368914604187`, 
                    0.7660782039165497, -0.013169035781174898`, \
-0.4085102528333664, 0.8957436978816986, -0.05740798078477383}, "LeafValues" -> 
                   RawArray["Real32",{-0.0022044465877115726`, 
                    0.00643167644739151, 0.010154354386031628`, 
                    0.06558182090520859, 0.020242206752300262`, 
                    0.016799675300717354`, -0.014195471070706844`, \
-0.004678233992308378, 0.04797185957431793, 
                    0.015451667830348015`, -0.011923409067094326`, \
-0.03159075230360031, 0.03408235311508179}], "Children" -> 
                   RawArray["Integer16",{{2, 4}, {-1, 3}, {12, -4}, {5, -5}, {
                    6, -6}, {10, 7}, {9, 8}, {-8, -9}, {-7, -10}, {-2, 
                    11}, {-11, -12}, {-3, -13}}], "NominalSplits" -> {}, 
                   "RootIndex" -> 1, "NominalDimension" -> 0, 
                   "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{7, 2, 3, 3, 1, 10, 1, 10, 1, 9, 3, 
                    7}], "NumericalThresholds" -> {
                    0.8957421481609344, -0.01803874969482422, \
-0.8880764245986938, -0.8853868842124939, 
                    1.440644919872284, -0.024031310342252254`, \
-0.35156308114528656`, -0.024030779488384724`, 
                    1.2403336763381958`, -0.22570053488016129`, \
-0.0587638895958662, 0.8957435190677643}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.015518234111368656`, -0.018651898950338364`, 
                    0.011818422935903072`, 0.02171269804239273, 
                    0.022465959191322327`, 
                    0.020485268905758858`, -0.030702773481607437`, 
                    0.042262833565473557`, -0.006401758641004562, \
-0.002143391640856862, -0.008831036277115345, 
                    0.0068839904852211475`, -0.03228215128183365}], 
                   "Children" -> 
                   RawArray["Integer16",{{2, 3}, {10, 7}, {9, 4}, {-4, 5}, {
                    6, -6}, {-5, 8}, {-3, -8}, {-7, -9}, {12, -10}, {-1, 
                    11}, {-11, -12}, {-2, -13}}], "NominalSplits" -> {}, 
                   "RootIndex" -> 1, "NominalDimension" -> 0, 
                   "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{7, 9, 2, 3, 4, 9, 7, 7, 3, 1, 1, 2, 
                    1, 1}], 
                   "NumericalThresholds" -> {
                    0.8957421481609344, -0.4085095673799515, 
                    1.3328883647918701`, -0.8880764245986938, \
-0.013168418779969215`, 0.4750327318906784, 0.8957435190677643, 
                    0.8957436978816986, 
                    0.7644379734992981, -0.830431342124939, 
                    1.2403336763381958`, 
                    0.25242850184440613`, -1.24230295419693, 
                    0.05792777054011822}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.037924669682979584`, -0.011426937766373158`, \
-0.01043984480202198, 0.030432172119617462`, -0.013817180879414082`, 
                    0.021307464689016342`, 0.02278171107172966, 
                    0.03456522151827812, -0.011691151186823845`, 
                    0.004157515242695808, 
                    0.009047463536262512, -0.0017147129401564598`, 
                    0.01899532973766327, -0.02443312667310238, \
-0.0005846999119967222}], "Children" -> 
                   RawArray["Integer16",{{2, 4}, {-1, 3}, {10, -4}, {11, 5}, {
                    6, -6}, {7, -7}, {9, 8}, {-8, -9}, {-5, -10}, {-3, 12}, {
                    13, -12}, {14, -13}, {-2, -14}, {-11, -15}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{7, 2, 4, 5, 4, 10, 4, 9, 5, 1, 1, 5, 
                    3, 4, 3}], 
                   "NumericalThresholds" -> {0.06503302231431007, 
                    0.6834334433078766, -0.6856105029582977, \
-0.1673242375254631, -0.013169939164072275`, 
                    0.7317634522914886, -0.013168992474675179`, 
                    0.4278862625360489, -0.2558034211397171, 
                    1.170843780040741, 
                    0.6223829984664917, -0.25580377876758575`, \
-0.05545971170067787, -0.6856108009815216, -0.06060711853206158}, 
                   "LeafValues" -> 
                   RawArray[
                    "Real32",{-0.008645798079669476, -0.013459533452987671`, 
                    0.02992510423064232, 0.038773465901613235`, 
                    0.02239944413304329, -0.011218927800655365`, \
-0.01944776251912117, 
                    0.02444855310022831, -0.0018788125598803163`, \
-0.012665413320064545`, -0.020279178395867348`, 0.021569188684225082`, 
                    0.018123310059309006`, 0.014853250235319138`, 
                    0.006650220137089491, -0.02844846062362194}], "Children" -> 
                   RawArray["Integer16",{{2, 3}, {13, -3}, {9, 4}, {-4, 
                    5}, {-5, 6}, {7, 8}, {-6, -8}, {-7, -9}, {10, 15}, {
                    11, -11}, {12, -12}, {-2, -13}, {
                    14, -14}, {-1, -15}, {-10, -16}}], "NominalSplits" -> {}, 
                   "RootIndex" -> 1, "NominalDimension" -> 0, 
                   "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{1, 1, 2, 9, 9, 8, 7, 8, 3, 3, 5, 10, 
                    6}], "NumericalThresholds" -> {1.3750149607658386`, 
                    1.5105779767036438`, 
                    1.8030426502227783`, -0.40850959718227386`, \
-0.4085100144147873, -0.22396060079336166`, 0.8957429826259613, 
                    0.5165568292140961, 0.7717768549919128, 
                    1.5912532806396484`, -0.16732359677553177`, \
-0.024030394852161407`, 0.5072340667247772}, "LeafValues" -> 
                   RawArray["Real32",{0.017054220661520958`, 
                    0.04688534885644913, -0.003840085119009018, 
                    0.02322174794971943, -0.009694655425846577, 
                    0.039101120084524155`, -0.021791810169816017`, \
-0.012929962016642094`, 0.020033009350299835`, 0.03668917343020439, 
                    0.002828933298587799, 
                    0.005429661367088556, -0.0018887144979089499`, \
-0.02673257887363434}], "Children" -> 
                   RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {5, 7}, {
                    6, -6}, {-1, 12}, {9, 8}, {13, -9}, {11, 
                    10}, {-10, -11}, {-5, -12}, {-7, -13}, {-8, -14}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{2, 7, 3, 2, 7, 7, 10, 9, 6, 3, 6, 5, 
                    1, 1}], 
                   "NumericalThresholds" -> {-1.0642696619033813`, 
                    0.895742267370224, 1.593241810798645, -0.8790672421455383,
                     0.8957425653934479, 0.8957426846027374, 
                    0.7773054540157318, 
                    0.4278860241174698, -0.5651197731494904, \
-0.8823472857475281, -0.5651204884052277, -0.25580333173274994`, 
                    0.2673739790916443, -0.13735754787921906`}, "LeafValues" -> 
                   RawArray[
                    "Real32",{-0.001302710035815835, -0.0030816998332738876`, 
                    0.021868374198675156`, 
                    0.03767254203557968, -0.010944901034235954`, 
                    0.024907264858484268`, 
                    0.003702561603859067, -0.008912966586649418, 
                    0.006775940768420696, -0.017954975366592407`, \
-0.023076709359884262`, 0.026010217145085335`, 
                    0.017106283456087112`, -0.02572115883231163, \
-0.009198061190545559}], "Children" -> 
                   RawArray["Integer16",{{10, 2}, {3, 4}, {8, -4}, {-3, 5}, {
                    13, 6}, {-6, 7}, {-7, -8}, {9, 11}, {12, -10}, {-1, 
                    14}, {-9, -12}, {-2, -13}, {-5, -14}, {-11, -15}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{1, 3, 6, 2, 6, 8, 6, 4, 3, 3, 2, 8, 
                    7, 1, 2, 5, 3, 8}], 
                   "NumericalThresholds" -> {0.8847680687904358, 
                    0.7769983410835266, 
                    0.5072329938411713, -0.39844968914985657`, 
                    0.507234126329422, -0.24784809350967407`, 
                    0.5072328150272369, -0.685611754655838, \
-0.06512349098920822, -0.8791777789592743, 
                    0.08151080459356308, -0.22395941615104675`, 
                    0.8957421481609344, -1.039604902267456, \
-0.36348235607147217`, -0.16732341051101685`, -0.05064869858324528, \
-0.22395993024110794`}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.015886111184954643`, -0.009533851407468319, 
                    0.03821197897195816, -0.00346876191906631, 
                    0.0158943273127079, 
                    0.017608288675546646`, -0.01716000959277153, 
                    0.020586540922522545`, -0.00799968559294939, \
-0.010310258716344833`, 0.02931453101336956, 0.013232911936938763`, 
                    0.0020027966238558292`, -0.007296901661902666, \
-0.028615271672606468`, 
                    0.009981815703213215, -0.012031408958137035`, \
-0.01773736998438835, -0.01830742508172989}], "Children" -> 
                   RawArray["Integer16",{{3, 2}, {9, -3}, {7, 4}, {14, 5}, {
                    6, -6}, {-5, 12}, {8, -8}, {-1, 13}, {10, -10}, {
                    11, -11}, {-2, -12}, {-7, -13}, {15, 17}, {-4, 
                    16}, {-9, -16}, {18, -17}, {-14, -18}, {-15, -19}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{5, 3, 6, 6, 10, 2, 4, 5, 1, 1, 7, 6, 
                    7, 6, 7, 6, 1, 1}], 
                   "NumericalThresholds" -> {-0.2558036595582962, \
-0.06012612767517567, 0.5072337687015533, 0.5072329342365265, 
                    0.7317643463611603, 
                    1.533321499824524, -0.013169249054044485`, \
-0.16732367128133774`, 0.6182591021060944, 1.162319302558899, 
                    0.8957435786724091, 0.5072336494922638, 
                    0.8957425653934479, 0.5072334110736847, 
                    0.8957435786724091, 
                    0.5072334110736847, -0.702703207731247, \
-1.245964765548706}, "LeafValues" -> 
                   RawArray[
                    "Real32",{-0.004004967398941517, -0.001047051278874278, 
                    0.03520809859037399, 0.03046063892543316, 
                    0.0019608207512646914`, 0.02175559289753437, 
                    0.021430103108286858`, -0.024652082473039627`, \
-0.008772328495979309, 0.014765216037631035`, -0.007467023096978664, 
                    0.003725184127688408, -0.00828816182911396, \
-0.030092941597104073`, 
                    0.01132970117032528, -0.02089572139084339, \
-0.008623029105365276, -0.019817188382148743`, -0.01858900487422943}], 
                   "Children" -> 
                   RawArray["Integer16",{{9, 2}, {6, 3}, {4, -4}, {5, 7}, {-3,
                     8}, {12, -7}, {-5, -8}, {-6, -9}, {11, 10}, {-10, -11}, {
                    13, -12}, {14, 18}, {-1, 16}, {15, -15}, {-2, -16}, {-14, 
                    17}, {-17, -18}, {-13, -19}}], "NominalSplits" -> {}, 
                   "RootIndex" -> 1, "NominalDimension" -> 0, 
                   "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{1, 9, 9, 6, 4, 2, 2, 2, 8, 5, 4, 9, 
                    1, 3}], 
                   "NumericalThresholds" -> {
                    0.8847680687904358, -0.4085097759962082, 
                    0.42788611352443695`, 
                    0.5072329342365265, -0.6856109201908112, 
                    1.6690630316734314`, 0.4918917119503021, 
                    0.29540368914604187`, 
                    
                    0.5165567100048065, -0.16732319444417953`, \
-0.013169885613024235`, 
                    0.4278857856988907, -0.5523051619529724, \
-0.8777972161769867}, "LeafValues" -> 
                   RawArray["Real32",{-0.008567589335143566, 
                    0.029491517692804337`, 
                    0.0038063256070017815`, -0.006746876053512096, 
                    0.02741873450577259, -0.008909469470381737, 
                    0.012772553600370884`, -0.012678707018494606`, 
                    0.020407140254974365`, 0.019026532769203186`, 
                    0.007988288067281246, -0.025069478899240494`, 
                    0.0087368069216609, -0.009310314431786537, \
-0.022733038291335106`}], "Children" -> 
                   RawArray["Integer16",{{6, 2}, {-2, 3}, {5, 
                    4}, {-4, -5}, {-3, 14}, {7, -7}, {8, 11}, {9, -9}, {
                    10, -10}, {-1, -11}, {12, 
                    13}, {-8, -13}, {-12, -14}, {-6, -15}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{9, 9, 9, 9, 8, 9, 8, 9, 1, 2, 9, 7, 
                    3}], "NumericalThresholds" -> {-0.40851064026355743`, \
-0.40850959718227386`, -0.4085099846124649, -0.22569996863603592`, 
                    0.5165567100048065, -0.408510223031044, 
                    0.5165567696094513, 0.427885964512825, 1.238666594028473, 
                    0.39695580303668976`, 0.4278854578733444, 
                    0.8957422077655792, 0.7641381919384003}, "LeafValues" -> 
                   RawArray["Real32",{-0.017268585041165352`, 
                    0.013072086498141289`, 0.0008941249689087272, 
                    0.03826017677783966, -0.0030898109544068575`, 
                    0.03995589539408684, -0.014868930913507938`, \
-0.025887755677103996`, -0.0001790476671885699, 0.01670367643237114, 
                    0.006452668458223343, -0.017405297607183456`, \
-0.009719934314489365, -0.015110793523490429`}], "Children" -> 
                   RawArray["Integer16",{{-1, 2}, {3, 4}, {6, -4}, {7, 5}, {
                    8, -6}, {-2, -7}, {10, 13}, {11, 9}, {-9, -10}, {
                    12, -11}, {-5, -12}, {-3, -13}, {-8, -14}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{10, 10, 1, 1, 6, 6, 7, 10, 3}], 
                   "NumericalThresholds" -> {-0.0240315068513155, \
-0.024031134322285652`, -1.1747119426727295`, -0.9713696539402008, 
                    0.5072342455387115, 0.5072339475154877, 
                    0.8957429826259613, 
                    0.7773066461086273, -0.876563549041748}, "LeafValues" -> 
                   RawArray["Real32",{-0.013321734964847565`, 
                    0.02608454041182995, 0.009705130010843277, 
                    0.020023679360747337`, 0.0009218706982210279, 
                    0.016877431422472, -0.016794193536043167`, \
-0.007284145802259445, -0.010932844132184982`, -0.02603781409561634}], 
                   "Children" -> 
                   RawArray["Integer16",{{-1, 2}, {-2, 3}, {7, 4}, {-4, 5}, {
                    6, -6}, {-5, -7}, {8, 9}, {-3, -9}, {-8, -10}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{5, 5, 3, 3, 5, 5, 3, 8, 3, 2, 5}], 
                   "NumericalThresholds" -> {-0.16732274740934372`, \
-0.1673230603337288, -0.06209137849509716, -0.048535723239183426`, \
-0.1673235073685646, -0.16732362657785416`, 
                    0.7717768549919128, -0.22396061569452286`, \
-0.8767273426055908, -0.02937004156410694, -0.16732261329889297`}, 
                   "LeafValues" -> 
                   RawArray["Real32",{
                    0.0015797405503690243`, -0.011750387027859688`, \
-0.0005857707001268864, 
                    0.03264385461807251, -0.019263634458184242`, \
-0.0026756012812256813`, 0.029204169288277626`, 
                    0.030548738315701485`, -0.011686181649565697`, \
-0.007912532426416874, -0.021717103198170662`, 0.00590422423556447}], 
                   "Children" -> 
                   RawArray["Integer16",{{2, 4}, {5, 3}, {-3, -4}, {11, -5}, {
                    6, 10}, {7, -7}, {9, 
                    8}, {-8, -9}, {-1, -10}, {-6, -11}, {-2, -12}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{2, 5, 2, 10, 1, 2, 10, 5, 1, 6, 2, 3,
                     7, 6, 5}], 
                   "NumericalThresholds" -> {-1.0642696619033813`, \
-0.2558036595582962, -0.8790672421455383, -0.024030694738030434`, 
                    0.606634259223938, 
                    1.6420460939407349`, -0.024030531756579876`, \
-0.2558033913373947, -0.6231958866119385, 
                    0.5072327554225922, -0.013172573409974575`, 
                    0.7687416076660156, 
                    0.8957430422306061, -0.5651203691959381, \
-0.25580446422100067`}, "LeafValues" -> 
                   RawArray[
                    "Real32",{-0.008600878529250622, -0.02019483596086502, 
                    0.028880273923277855`, 0.039236340671777725`, 
                    0.0147763816639781, 0.001091844867914915, 
                    0.021370336413383484`, -0.0037316272500902414`, \
-0.004481888376176357, 0.0035927274730056524`, 
                    0.03350546211004257, -0.0012739005032926798`, \
-0.019612262025475502`, 
                    0.009854352101683617, -0.013794672675430775`, \
-0.017584366723895073`}], "Children" -> 
                   RawArray["Integer16",{{12, 2}, {7, 3}, {-3, 4}, {5, 
                    6}, {-4, -6}, {8, -7}, {-2, 9}, {-5, -9}, {15, 10}, {14, 
                    11}, {-11, -12}, {
                    13, -13}, {-1, -14}, {-10, -15}, {-8, -16}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{1, 3, 4, 5, 6, 3, 6, 4, 2, 2, 1, 7, 
                    7, 4, 6, 3, 6, 5, 6, 7}], 
                   "NumericalThresholds" -> {0.7559244632720947, 
                    0.7788235247135162, -0.685611754655838, \
-0.2558038979768753, 0.5072329938411713, 0.7723318934440613, 
                    0.5072328150272369, -0.685611754655838, \
-0.15703292936086655`, 0.052003927528858185`, -1.039604902267456, 
                    0.8957431614398956, 
                    0.8957426249980927, -0.013169641140848398`, 
                    0.5072335302829742, -0.8844845294952393, 
                    0.5072338283061981, -0.2558033913373947, \
-0.5651197135448456, 0.8957430422306061}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.01969529315829277, -0.01366112008690834, 
                    0.02768097072839737, 
                    0.020875275135040283`, -0.009927905164659023, 
                    0.002530521946027875, -0.001863299636170268, 
                    0.02523251436650753, 0.007638179697096348, 
                    0.018445216119289398`, -0.006176623981446028, \
-0.017340192571282387`, -0.005215147510170937, 
                    0.012159000150859356`, -0.003380965441465378, 
                    0.01682365871965885, -0.00419465359300375, \
-0.0229327455163002, -0.017914386466145515`, -0.014872802421450615`, \
-0.006413817871361971}], "Children" -> 
                   RawArray["Integer16",{{5, 2}, {3, -3}, {-2, 4}, {-4, 14}, {
                    6, 9}, {7, 19}, {8, -8}, {-1, 16}, {11, 10}, {-10, 
                    12}, {-6, 17}, {13, 18}, {-11, -14}, {-5, 
                    15}, {-15, -16}, {-9, -17}, {
                    20, -18}, {-13, -19}, {-7, -20}, {-12, -21}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{8, 8, 1, 1, 6, 4, 4, 10, 1, 9}], 
                   "NumericalThresholds" -> {0.5165573060512543, 
                    0.5165569484233856, 1.440644919872284, 
                    1.5729206800460815`, 
                    0.5072339475154877, -0.013169575948268175`, \
-0.013170139398425817`, 0.9275428950786591, -0.7631376087665558, 
                    0.4278864413499832}, "LeafValues" -> 
                   RawArray["Real32",{0.0006322299595922232, 
                    0.01274734828621149, -0.01411331444978714, 
                    0.02746685780584812, -0.006488133687525988, 
                    0.00022427865769714117`, -0.00687564117833972, 
                    0.01753992959856987, 
                    0.010838182643055916`, -0.00955614447593689, \
-0.022534526884555817`}], "Children" -> 
                   RawArray["Integer16",{{2, -2}, {3, -3}, {5, 4}, {-4, -5}, {
                    6, 9}, {7, 8}, {-1, -8}, {-7, -9}, {-6, 10}, {-10, -11}}],
                    "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{10, 10, 10, 9, 9, 9, 8, 8}], 
                   "NumericalThresholds" -> {-0.0240315068513155, \
-0.024031134322285652`, -0.024030779488384724`, -0.4085095673799515, \
-0.40851034224033356`, -0.22569996863603592`, 0.5165567100048065, 
                    0.5165567696094513}, "LeafValues" -> 
                   RawArray["Real32",{-0.010655404068529606`, 
                    0.020488591864705086`, -0.015097775496542454`, \
-0.010040863417088985`, -0.002974240342155099, 
                    0.03201664611697197, -0.0007593940827064216, 
                    0.029798274859786034`, -0.013530619442462921`}], 
                   "Children" -> 
                   RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {5, 
                    6}, {-4, -6}, {8, 7}, {-7, -8}, {-5, -9}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{8, 8, 5, 6, 2, 3, 9, 7, 7, 2, 10, 9, 
                    10}], "NumericalThresholds" -> {-0.3235579878091812, \
-0.32355718314647675`, -0.16732405871152878`, 
                    0.507234126329422, -0.0876147635281086, 
                    9.999999682655224*^-21, -0.40850959718227386`, 
                    0.8957435190677643, 0.8957422077655792, 
                    0.6742469966411591, 0.7317639887332916, 
                    0.42788712680339813`, 0.9275434911251068}, "LeafValues" -> 
                   RawArray["Real32",{-0.008598390966653824, 
                    0.033359263092279434`, 0.02069058082997799, 
                    0.0014500486431643367`, -0.01204739511013031, 
                    0.02471904642879963, -0.01734256185591221, \
-0.004078961908817291, 
                    0.02453671395778656, -0.011959992349147797`, \
-0.013948874548077583`, 0.005060118623077869, -0.01929308846592903, 
                    0.008836102671921253}], "Children" -> 
                   RawArray["Integer16",{{6, 2}, {3, 4}, {-2, -4}, {7, 
                    5}, {-5, -6}, {13, -7}, {8, 10}, {9, -9}, {-3, -10}, {12, 
                    11}, {-11, -12}, {-8, -13}, {-1, -14}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{3, 1, 8, 5, 1, 10, 9, 1, 1, 3, 3, 3, 
                    6, 10, 6, 7, 5}], 
                   "NumericalThresholds" -> {-0.8880764245986938, 
                    
                    0.7559244632720947, -0.22396035492420197`, \
-0.16732390969991684`, -0.145352341234684, -0.02403075620532036, \
-0.40850962698459625`, -1.1195634007453918`, -0.9713696539402008, \
-0.05763893947005272, 0.7627607882022858, -0.04787876643240452, 
                    0.5072328150272369, 0.7773067653179169, 
                    0.5072332918643951, 
                    0.8957427442073822, -0.16732414811849594`}, "LeafValues" -> 
                   RawArray["Real32",{0.0025870343670248985`, 
                    0.03039577044546604, 
                    0.02792949415743351, -0.0014174528187140822`, \
-0.00303448922932148, -0.02371426299214363, -0.002078052144497633, \
-0.017309803515672684`, 0.019252482801675797`, -0.0005073474021628499, 
                    0.023212863132357597`, -0.0036131711676716805`, \
-0.015904251486063004`, -0.018582787364721298`, -0.015401295386254787`, \
-0.005386124365031719, -0.004976212978363037, 0.005868841893970966}], 
                   "Children" -> 
                   RawArray["Integer16",{{13, 2}, {5, 3}, {4, 12}, {-3, -5}, {
                    6, 7}, {-2, 8}, {-6, 10}, {14, 9}, {-9, -10}, {16, 
                    11}, {-11, -12}, {17, -13}, {-1, 
                    15}, {-7, -15}, {-14, -16}, {-8, -17}, {-4, -18}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{5, 9, 8, 5, 3, 3, 6, 7, 2, 9, 1, 10, 
                    10, 2, 3, 7, 9}], 
                   "NumericalThresholds" -> {-0.2558036595582962, 
                    0.4750322252511978, -0.24784809350967407`, \
-0.16732356697320938`, -0.06012612767517567, -0.04891309142112732, 
                    0.5072336494922638, 
                    0.8957435786724091, -0.013172573409974575`, 
                    0.4750322550535202, 1.3050665259361267`, 
                    0.9275433123111725, -0.024030334316194057`, 
                    0.4368094950914383, -0.0506794024258852, 
                    0.8957435786724091, -0.22569940984249115`}, "LeafValues" -> 
                   RawArray["Real32",{-0.018298225477337837`, 
                    0.031709592789411545`, -0.0009763762936927378, \
-0.0037142925430089235`, 0.0010935039026662707`, 
                    0.020897891372442245`, -0.0038121575489640236`, 
                    0.015853052958846092`, 
                    0.019145751371979713`, -0.01298767700791359, 
                    0.016591902822256088`, 
                    0.008931219577789307, -0.016253575682640076`, \
-0.013813797384500504`, 
                    0.004460682161152363, -0.0018160248873755336`, \
-0.012747015804052353`, -0.003201203653588891}], "Children" -> 
                   RawArray["Integer16",{{8, 2}, {3, 12}, {4, 5}, {-2, -5}, {
                    11, 6}, {-6, 7}, {-7, -8}, {10, 9}, {-9, -10}, {
                    13, -11}, {16, -12}, {-3, -13}, {-1, 14}, {15, 
                    17}, {-14, -16}, {-4, -17}, {-15, -18}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{8, 8, 6, 3, 8, 8, 8, 9, 7, 10, 10, 
                    6}], "NumericalThresholds" -> {-0.3235579878091812, \
-0.32355718314647675`, 0.5072334706783295, 
                    1.592172920703888, -0.22396061569452286`, \
-0.22395972907543182`, -0.22395939379930496`, -0.225699745118618, 
                    0.8957437574863434, -0.024031310342252254`, 
                    0.9275435507297516, 0.5072333514690399}, "LeafValues" -> 
                   RawArray["Real32",{-0.005079645663499832, 
                    0.022167595103383064`, 
                    0.011290513910353184`, -0.006150280125439167, 
                    0.026919305324554443`, -0.005947223864495754, 
                    0.021812804043293, -0.004650692455470562, 
                    0.0215531587600708, -0.0161044392734766, \
-0.0038577476516366005`, 0.004170711152255535, -0.016176307573914528`}], 
                   "Children" -> 
                   RawArray["Integer16",{{11, 2}, {3, 4}, {-2, -4}, {6, 
                    5}, {-5, -6}, {9, 7}, {-7, 8}, {-8, -9}, {
                    10, -10}, {-3, -11}, {12, -12}, {-1, -13}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{9, 9, 9, 5, 2, 10, 3, 3, 1, 3, 2}], 
                   "NumericalThresholds" -> {0.47503285109996796`, 
                    0.4750322848558426, 
                    0.4750317484140396, -0.167323537170887, \
-0.586018979549408, -0.024030077271163464`, -0.050363270565867424`, \
-0.8852278888225555, 
                    0.4796958863735199, -0.8759350180625916, \
-1.3436325788497925`}, "LeafValues" -> 
                   RawArray["Real32",{0.00487455865368247, 
                    0.01079335156828165, -0.017790034413337708`, 
                    0.012302185408771038`, 
                    0.0008430990274064243, -0.0020702630281448364`, 
                    0.008920415304601192, 
                    0.02078918367624283, -0.003143957117572427, \
-0.012287929654121399`, 0.01649528741836548, -0.014987096190452576`}], 
                   "Children" -> 
                   RawArray["Integer16",{{2, -2}, {3, 4}, {5, -4}, {-3, -5}, {
                    9, 6}, {7, 8}, {-6, -8}, {-7, -9}, {11, 
                    10}, {-10, -11}, {-1, -12}}], "NominalSplits" -> {}, 
                   "RootIndex" -> 1, "NominalDimension" -> 0, 
                   "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{10, 10, 2, 10, 10, 6, 5}], 
                   "NumericalThresholds" -> {-0.0240315068513155, \
-0.024031134322285652`, -1.6010496020317078`, -0.024030779488384724`, \
-0.024030101485550404`, 0.5072332918643951, -0.1673230156302452}, 
                   "LeafValues" -> 
                   RawArray["Real32",{-0.008736895397305489, 
                    0.01337362639605999, -0.012707553803920746`, \
-0.013422067277133465`, 0.025138089433312416`, 
                    0.0018607655074447393`, -0.008885803632438183, \
-0.005343614611774683}], "Children" -> 
                   RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {-4, 5}, {
                    6, 7}, {-5, -7}, {-6, -8}}], "NominalSplits" -> {}, 
                   "RootIndex" -> 1, "NominalDimension" -> 0, 
                   "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{9, 1, 1, 9, 5, 3, 2}], 
                   "NumericalThresholds" -> {-0.40851064026355743`, 
                    1.5121723413467407`, 
                    1.3750149607658386`, -0.408510223031044, \
-0.25580401718616486`, 0.7761906087398529, -0.2026987001299858}, "LeafValues" -> 
                   RawArray["Real32",{-0.010930703021585941`, 
                    0.010675442405045033`, -0.008079535327851772, 
                    0.020532283931970596`, -0.009854654781520367, 
                    0.0024949696380645037`, -0.006801840849220753, \
-0.0007948887068778276}], "Children" -> 
                   RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, 5}, {
                    7, 6}, {-6, -7}, {-5, -8}}], "NominalSplits" -> {}, 
                   "RootIndex" -> 1, "NominalDimension" -> 0, 
                   "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{8, 8, 8, 1, 1, 10, 10, 7, 1}], 
                   "NumericalThresholds" -> {0.5165573060512543, 
                    0.5165569484233856, 
                    0.516556590795517, -0.9673650860786438, \
-1.1145190000534058`, -0.024030121974647045`, -0.02403075061738491, 
                    0.8957423865795135, 1.3724036812782288`}, "LeafValues" -> 
                   RawArray["Real32",{0.01577255129814148, 
                    0.010863113217055798`, -0.0088918162509799, 
                    0.011988759972155094`, 0.0030401621479541063`, 
                    0.022499006241559982`, -0.003921791911125183, \
-0.001761599793098867, -0.016293084248900414`, 0.009266974404454231}], 
                   "Children" -> 
                   RawArray["Integer16",{{2, -2}, {3, -3}, {4, -4}, {5, 7}, {
                    6, -6}, {-1, -7}, {8, 9}, {-5, -9}, {-8, -10}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{9, 9, 8, 9, 5, 7, 3, 3, 8, 10, 1}], 
                   "NumericalThresholds" -> {0.4750327914953232, 
                    0.4750322848558426, -0.323558047413826, 
                    0.4750317484140396, -0.25580351054668427`, 
                    0.8957435786724091, -0.8771851360797882, \
-0.06012612767517567, -0.24784725159406662`, -0.024030334316194057`, 
                    1.3050665259361267`}, "LeafValues" -> 
                   RawArray["Real32",{-0.015237140469253063`, 
                    0.007638079579919577, -0.0004316643171478063, \
-0.018747461959719658`, 0.010147130116820335`, -0.0038184570148587227`, 
                    0.024037852883338928`, -0.0070874993689358234`, 
                    0.01968366838991642, 
                    0.0025213828776031733`, -0.004058669321238995, 
                    0.006317452993243933}], "Children" -> 
                   RawArray["Integer16",{{2, -2}, {4, 3}, {-3, -4}, {5, -5}, {
                    6, 8}, {10, 7}, {-7, -8}, {11, 
                    9}, {-9, -10}, {-1, -11}, {-6, -12}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{3, 10, 10, 10, 4, 1, 1, 3, 7, 5, 6, 
                    6}], "NumericalThresholds" -> {-0.8882768154144287, 
                    0.9275431334972382, 0.9275438487529755, 
                    0.9275427758693695, -0.01316889701411128, \
-0.7315489649772644, 0.7474104166030884, -0.8831900358200073, 
                    0.8957431614398956, -0.2558036595582962, 
                    0.5072328150272369, 0.5072332918643951}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.002968755317851901, -0.005824492312967777, \
-0.013518834486603737`, 0.008455049246549606, 0.01689077727496624, 
                    0.013077987357974052`, -0.030878670513629913`, 
                    0.0006142547936178744, -0.004900685045868158, 
                    0.030484702438116074`, 
                    0.005254287738353014, -0.017582068219780922`, \
-0.0028941717464476824`}], "Children" -> 
                   RawArray["Integer16",{{11, 2}, {4, 3}, {-3, -4}, {5, -5}, {
                    8, 6}, {-6, 7}, {-7, -8}, {9, 
                    10}, {-2, -10}, {-9, -11}, {-1, 12}, {-12, -13}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{9, 9, 1, 1, 9, 2, 2, 3, 2, 8}], 
                   "NumericalThresholds" -> {-0.40851064026355743`, \
-0.4085095673799515, -0.24953028559684753`, 
                    0.8894558250904083, -0.40850929915905, \
-1.285254418849945, -0.8615285754203796, 
                    1.6021807789802551`, -1.0642696619033813`, \
-0.32355713844299316`}, "LeafValues" -> 
                   RawArray["Real32",{-0.009166202507913113, 
                    0.020345335826277733`, -0.010411469265818596`, \
-0.011277923360466957`, 0.015081374906003475`, -0.015106534585356712`, 
                    0.0025816869456321, -0.0012221228098496795`, 
                    0.014731071889400482`, 
                    0.022015227004885674`, -0.001069847377948463}], 
                   "Children" -> 
                   RawArray["Integer16",{{-1, 2}, {3, 5}, {-2, 
                    4}, {-4, -5}, {-3, 6}, {10, 7}, {9, 
                    8}, {-8, -9}, {-7, -10}, {-6, -11}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{1, 1, 1, 1, 4, 5, 5, 4}], 
                   "NumericalThresholds" -> {1.5105779767036438`, 
                    1.3750149607658386`, 1.1317203044891357`, 
                    1.0234560370445251`, -0.013169641140848398`, \
-0.16732274740934372`, -0.1673230603337288, -0.01316889701411128}, 
                   "LeafValues" -> 
                   RawArray[
                    "Real32",{-0.00017478354857303202`, -0.007698340807110071,
                     0.01428907085210085, -0.01521691307425499, 
                    0.01535751111805439, 
                    0.0007093793246895075, -0.002582076471298933, 
                    0.011404347606003284`, -0.013399052433669567`}], 
                   "Children" -> 
                   RawArray["Integer16",{{2, -2}, {3, -3}, {4, 5}, {
                    6, -5}, {-4, -6}, {7, 8}, {-1, -8}, {-7, -9}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{2, 2, 2, 5, 2, 2, 8, 9, 8, 7, 7}], 
                   "NumericalThresholds" -> {1.2675729393959045`, 
                    1.8030426502227783`, 
                    0.6742469966411591, -0.2558032423257828, 
                    0.4990248680114746, 
                    0.29540368914604187`, -0.2239598110318184, \
-0.4085095673799515, -0.2239602580666542, 0.8957425653934479, 
                    0.8957431614398956}, "LeafValues" -> 
                   RawArray[
                    "Real32",{-0.008746367879211903, -0.005718468222767115, 
                    0.006225572898983955, 
                    0.01867574267089367, -0.003138196188956499, \
-0.011343419551849365`, 0.026316901668906212`, 0.025773053988814354`, 
                    0.0006996314623393118, 
                    0.0019108016276732087`, -0.0009192396537400782, \
-0.014131876640021801`}], "Children" -> 
                   RawArray["Integer16",{{3, 2}, {11, -3}, {5, 4}, {-4, -5}, {
                    6, -6}, {7, 9}, {10, 
                    8}, {-8, -9}, {-7, -10}, {-1, -11}, {-2, -12}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{9, 9, 8, 8, 8, 1, 10, 6, 2, 7}], 
                   "NumericalThresholds" -> {0.4750327914953232, 
                    0.4750322848558426, -0.3235575705766678, \
-0.32355813682079315`, -0.323558047413826, -1.0766962766647339`, \
-0.024030182510614395`, 0.5072342455387115, -0.3774842321872711, 
                    0.8957439363002777}, "LeafValues" -> 
                   RawArray["Real32",{-0.00196312484331429, 
                    0.007218957878649235, 0.0002919304824899882, 
                    0.020075565204024315`, 
                    0.019005149602890015`, -0.01363865751773119, \
-0.003298694035038352, 0.011133434250950813`, 
                    0.012974237091839314`, -0.004373306408524513, 
                    0.009206494316458702}], "Children" -> 
                   RawArray["Integer16",{{2, -2}, {3, 5}, {4, 
                    6}, {-1, -5}, {-3, -6}, {7, 8}, {-4, 9}, {
                    10, -9}, {-8, -10}, {-7, -11}}], "NominalSplits" -> {}, 
                   "RootIndex" -> 1, "NominalDimension" -> 0, 
                   "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{8, 9, 10, 3, 1, 1, 5, 9, 8, 7}], 
                   "NumericalThresholds" -> {-0.3235579878091812, 
                    0.4750317484140396, 0.9275433123111725, 
                    1.5960396528244019`, 0.4667016863822937, 
                    1.443563461303711, -0.2558047026395798, \
-0.4085099548101425, -0.3235581964254379, 0.895742803812027}, "LeafValues" -> 
                   RawArray["Real32",{0.00468179676681757, 
                    0.006682266015559435, 
                    0.018942318856716156`, -0.0076043750159442425`, \
-0.00639737443998456, 
                    0.021972982212901115`, -0.00924381148070097, \
-0.01057831384241581, 
                    0.00048326505930162966`, -0.011397788301110268`, \
-0.0053016324527561665`}], "Children" -> 
                   RawArray["Integer16",{{9, 2}, {4, 3}, {-3, -4}, {6, 
                    5}, {-5, -6}, {7, -7}, {-2, 8}, {-8, -9}, {
                    10, -10}, {-1, -11}}], "NominalSplits" -> {}, "RootIndex" -> 
                   1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{10, 10, 8, 10, 3, 8, 6, 6}], 
                   "NumericalThresholds" -> {0.9275438487529755, 
                    0.9275435507297516, -0.3235579878091812, 
                    0.9275428354740143, -0.8882768154144287, \
-0.24784725159406662`, 0.5072328150272369, 0.5072333514690399}, "LeafValues" -> 
                   RawArray["Real32",{-0.002003320725634694, 
                    0.00791562907397747, -0.014656747691333294`, 
                    0.000764346681535244, 0.017087657004594803`, 
                    0.006805394776165485, -0.0005544704617932439, \
-0.010015014559030533`, -0.012261291965842247`}], "Children" -> 
                   RawArray["Integer16",{{2, -2}, {3, -3}, {8, 4}, {5, -5}, {
                    7, 6}, {-6, -7}, {-4, -8}, {-1, -9}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{10, 10, 10, 8, 5, 7, 4, 3, 8, 2}], 
                   "NumericalThresholds" -> {-0.024031310342252254`, \
-0.024030933156609535`, -0.024030678905546665`, -0.22396035492420197`, \
-0.1673230156302452, 
                    0.8957438766956329, -0.013169185258448124`, \
-0.059978581964969635`, -0.24784711748361588`, 0.09642146900296211}, 
                   "LeafValues" -> 
                   RawArray["Real32",{
                    0.014470900408923626`, -0.017542602494359016`, 
                    0.013744212687015533`, 
                    0.0015717401402071118`, -0.0023598666302859783`, \
-0.006678470876067877, 
                    0.009244301356375217, -0.0069956667721271515`, \
-0.0053598107770085335`, 0.0048622069880366325`, -0.014392375014722347`}], 
                   "Children" -> 
                   RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, 5}, {-1, -5}, {
                    6, 8}, {7, -7}, {-4, -8}, {9, 10}, {-6, -10}, {-9, -11}}],
                    "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{7, 7, 4, 3, 10, 3, 3, 10, 4, 10, 8, 
                    5}], "NumericalThresholds" -> {0.8957436382770538, 
                    0.8957435786724091, -0.013169815298169851`, 
                    0.7627607882022858, 0.7317648828029633, 
                    1.599275290966034, -0.05817006900906563, \
-0.024030678905546665`, -0.013169891200959682`, 
                    0.9275430738925934, -0.32355792820453644`, \
-0.16732261329889297`}, "LeafValues" -> 
                   RawArray["Real32",{-0.005026538856327534, 
                    0.0061576575972139835`, 0.023985059931874275`, 
                    0.0051440526731312275`, -0.01925194263458252, \
-0.013220008462667465`, -0.00926146749407053, 0.022009214386343956`, 
                    0.0068252189084887505`, -0.00521796103566885, \
-0.0028434761334210634`, 0.015527017414569855`, 0.006591601297259331}], 
                   "Children" -> 
                   RawArray["Integer16",{{2, 3}, {6, -3}, {4, -4}, {
                    5, -5}, {-2, -6}, {7, -7}, {10, 8}, {-8, 9}, {-9, -10}, {
                    12, 11}, {-11, -12}, {-1, -13}}], "NominalSplits" -> {}, 
                   "RootIndex" -> 1, "NominalDimension" -> 0, 
                   "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{3, 1, 1, 4, 9, 8, 9, 3}], 
                   "NumericalThresholds" -> {1.60764479637146, 
                    1.443563461303711, 
                    1.5762414932250977`, -0.013168363366276026`, 
                    0.4750327318906784, -0.32355786859989166`, 
                    0.4750315994024277, -0.053907860070466995`}, "LeafValues" -> 
                   RawArray["Real32",{-0.002312069060280919, 
                    0.008203975856304169, -0.01783672533929348, 
                    0.0016219893004745245`, 0.011948573403060436`, 
                    0.008099949918687344, -0.000330311362631619, \
-0.012936493381857872`, 0.017301710322499275`}], "Children" -> 
                   RawArray["Integer16",{{2, -2}, {4, 3}, {-3, -4}, {5, -5}, {
                    6, -6}, {8, 7}, {-7, -8}, {-1, -9}}], 
                   "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{8, 6, 2, 9, 6, 4, 2, 1, 3, 1}], 
                   "NumericalThresholds" -> {0.5165573060512543, 
                    0.5072339475154877, 0.11893922090530396`, 
                    0.4750327914953232, 
                    0.5072337687015533, -0.013170093763619661`, \
-0.403459832072258, 1.1030119061470032`, -0.8788267374038696, 
                    0.2624008506536484}, "LeafValues" -> 
                   RawArray["Real32",{-0.0015626151580363512`, 
                    0.007918384857475758, -0.006112162955105305, 
                    0.005383535288274288, 
                    0.012881964445114136`, -0.0012606896925717592`, 
                    0.017711514607071877`, -0.01947176642715931, 
                    0.0006743706180714071, -0.015233947895467281`, 
                    0.003891951870173216}], "Children" -> 
                   RawArray["Integer16",{{2, -2}, {4, 3}, {7, -4}, {5, -5}, {
                    8, 6}, {-6, -7}, {-3, -8}, {10, 
                    9}, {-9, -10}, {-1, -11}}], "NominalSplits" -> {}, 
                   "RootIndex" -> 1, "NominalDimension" -> 0, 
                   "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{1, 6, 2, 2, 4, 6, 6, 8, 5, 3, 4, 5, 
                    6, 6, 3, 4, 1, 4}], 
                   "NumericalThresholds" -> {1.440644919872284, 
                    0.5072329342365265, -0.12548677623271942`, 
                    0.09186898171901703, -0.013169963844120502`, 
                    0.5072329342365265, 
                    0.5072326362133026, -0.2239600196480751, \
-0.2558038681745529, 
                    0.7721121609210968, -0.6856110990047455, \
-0.2558038681745529, 0.5072334706783295, 0.5072341859340668, 
                    0.7761906087398529, -0.013170212972909212`, 
                    0.2067645713686943, -0.013169963844120502`}, "LeafValues" -> 
                   RawArray["Real32",{
                    0.007938453927636147, -0.005719490349292755, 
                    0.014415155164897442`, 
                    0.01995018683373928, -0.009154343977570534, \
-0.005824608262628317, -0.017957251518964767`, 0.014965939335525036`, 
                    0.005542339291423559, -0.006162059027701616, 
                    0.014293665066361427`, -0.012302086688578129`, 
                    0.002049546455964446, 
                    0.00405151629820466, -0.013976098969578743`, \
-0.008936171419918537, -0.0047201113775372505`, -0.017731426283717155`, \
-0.003595456015318632}], "Children" -> 
                   RawArray["Integer16",{{3, 2}, {-2, -3}, {6, 4}, {5, 
                    8}, {-4, -6}, {7, 13}, {11, -8}, {10, 9}, {-9, 17}, {
                    12, -11}, {-1, 18}, {-5, -13}, {16, 14}, {
                    15, -15}, {-14, -16}, {-7, -17}, {-10, -18}, {-12, -19}}],
                    "NominalSplits" -> {}, "RootIndex" -> 1, 
                   "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
                 MachineLearning`DecisionTree[
                  Association[
                  "FeatureIndices" -> 
                   RawArray["Integer16",{4, 2, 1, 7, 10, 1, 4, 10, 7, 9, 8}], 
                   "NumericalThresholds" -> {-0.6856121122837067, 
                    1.2675729393959045`, 1.3724036812782288`, 
                    0.8957436382770538, -0.024030694738030434`, \
-0.24953028559684753`, -0.013169657438993454`, -0.024030190892517567`, 
                    0.8957438170909882, -0.2256993055343628, \
-0.2239602953195572}, "LeafValues" -> 
                   RawArray["Real32",{-0.009741265326738358, 
                    0.0247037410736084, -0.00917932577431202, 
                    0.009653312154114246, -0.01168991532176733, \
-0.010400380939245224`, -0.001284157857298851, 0.0035255220718681812`, 
                    0.000859687221236527, 0.001426689326763153, 
                    0.0007607691804878414, -0.008021092973649502}], 
                   "Children" -> 
                   RawArray["Integer16",{{10, 2}, {3, 7}, {4, -4}, {5, 9}, {6,
                     8}, {-2, -7}, {-3, -8}, {-6, -9}, {-5, 
                    11}, {-1, -11}, {-10, -12}}], "NominalSplits" -> {}, 
                   "RootIndex" -> 1, "NominalDimension" -> 0, 
                   "NominalNodeNumber" -> 0]]}, "ClassNumber" -> 1, 
               "IterationsNumber" -> 50, "Processor" -> 
               MachineLearning`MLProcessor["Sequence", 
                 Association[
                 "Input" -> 
                  Association[
                   "(f2f5f6)" -> 
                    Association[
                    "Type" -> "NominalVector", "Weight" -> 3, 
                    "SetSize" -> {2, 2, 4}], "(f1f3f4)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 3]], 
                  "Output" -> 
                  Association[
                   "((f1f3f4)(f2f5f6))" -> 
                    Association[
                    "Type" -> "NumericalVector", "Weight" -> 
                    6.000000000000001]], "Processors" -> {
                    MachineLearning`MLProcessor["EmbedNominalVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "(f2f5f6)" -> 
                    Association[
                    "Type" -> "NominalVector", "Weight" -> 3, 
                    "SetSize" -> {2, 2, 4}]], "Index" -> {
                    Association[1 -> 1, 2 -> 2], 
                    Association[1 -> 1, 2 -> 2], 
                    Association[1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4]}, "Output" -> 
                    Association[
                    "(f2f5f6)" -> 
                    Association["Weight" -> 3, "Type" -> "NumericalVector"]], 
                    "EmbeddingVectors" -> {
                    RawArray["Real32",{{0., 
                    0.}, {-0.013169222511351109`, -0.1673232614994049}, \
{-0.685611367225647, -0.2558041214942932}}], 
                    RawArray["Real32",{{0., 0.}, {0.5072333812713623, 
                    0.8957431316375732}, {-0.5651206374168396, 
                    0.06503215432167053}}], 
                    RawArray["Real32",{{0., 0., 0.}, {-0.32355788350105286`, 
                    0.475032240152359, 
                    0.9275431036949158}, {-0.22396010160446167`, \
-0.4085097908973694, -0.024030836299061775`}, {-0.24784716963768005`, 
                    0.4278862476348877, 0.7773063778877258}, {
                    0.5165566802024841, -0.2257002592086792, 
                    0.7317641973495483}}]}, "Version" -> {12.1, 1}, "ID" -> 
                    4077317464470873943]], 
                    MachineLearning`MLProcessor["MergeVectors", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "(f1f3f4)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 3], 
                    "(f2f5f6)" -> 
                    Association["Weight" -> 3, "Type" -> "NumericalVector"]], 
                    "Spans" -> {
                    Span[1, 3], 
                    Span[4, 10]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> 
                    Association[
                    "((f1f3f4)(f2f5f6))" -> 
                    Association[
                    "Weight" -> {1., 1., 1., 0.42857142857142855`, 
                    0.42857142857142855`, 0.42857142857142855`, 
                    0.42857142857142855`, 0.42857142857142855`, 
                    0.42857142857142855`, 0.42857142857142855`}, "Type" -> 
                    "NumericalVector"]], "Version" -> {12.1, 1}, "ID" -> 
                    8053526099925594492]], 
                    MachineLearning`MLProcessor["DensifyNumericalVector", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "((f1f3f4)(f2f5f6))" -> 
                    Association[
                    "Weight" -> {1., 1., 1., 0.42857142857142855`, 
                    0.42857142857142855`, 0.42857142857142855`, 
                    0.42857142857142855`, 0.42857142857142855`, 
                    0.42857142857142855`, 0.42857142857142855`}, "Type" -> 
                    "NumericalVector"]], "Version" -> {12.1, 1}, "ID" -> 
                    2898414261657576438, "Output" -> 
                    Association[
                    "((f1f3f4)(f2f5f6))" -> 
                    Association[
                    "Type" -> "NumericalVector", "Weight" -> 
                    6.000000000000001]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 
                    6.000000000000001], "Key" -> "((f1f3f4)(f2f5f6))", 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                  "Impossible", "StructurePreserving" -> False, "Missing" -> 
                  "Allowed"]], 
               "DistributionData" -> {
                NormalDistribution, {0.13952674840264395`}}, "Method" -> 
               "GradientBoostedTrees", "PostProcessor" -> 
               MachineLearning`MLProcessor["Identity"], "Options" -> 
               Association[
                "BoostingMethod" -> 
                 Association[
                  "Value" -> "Gradient", "Options" -> Association[]], 
                 MaxTrainingRounds -> 
                 Association["Value" -> 50, "Options" -> Association[]], 
                 "LeavesNumber" -> 
                 Association["Value" -> 250, "Options" -> Association[]], 
                 "LearningRate" -> 
                 Association["Value" -> 0.2, "Options" -> Association[]], 
                 ValidationSet -> 
                 Association[
                  "Value" -> Automatic, "Options" -> Association[]], 
                 "MaxBinNumber" -> 
                 Association["Value" -> 255, "Options" -> Association[]], 
                 "ThreadNumber" -> 
                 Association["Value" -> 6, "Options" -> Association[]], 
                 "MaxDepth" -> 
                 Association["Value" -> 6, "Options" -> Association[]], 
                 "LeafSize" -> 
                 Association["Value" -> 15, "Options" -> Association[]], 
                 "FeatureFraction" -> 
                 Association["Value" -> 1, "Options" -> Association[]], 
                 "BaggingFraction" -> 
                 Association["Value" -> 1, "Options" -> Association[]], 
                 "BaggingFrequency" -> 
                 Association["Value" -> 0, "Options" -> Association[]], 
                 "MinGainToSplit" -> 
                 Association["Value" -> 0, "Options" -> Association[]], 
                 "L1Regularization" -> 
                 Association["Value" -> 0, "Options" -> Association[]], 
                 "L2Regularization" -> 
                 Association["Value" -> 0, "Options" -> Association[]], 
                 "LossFunction" -> 
                 Association[
                  "Value" -> "MeanSquaredError", "Options" -> 
                   Association[]]]], "TrainingInformation" -> 
             Association[
              "PanelCell" -> CellObject[7505], "TrainingFunction" -> Predict, 
               "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
               "ProcessorEntropyShift" -> 9.373254961305344, 
               "PreprocessingTime" -> 1.0987558`7.492446174093247, "LossName" -> 
               "StandardDeviation", "BestModelInformation" -> Dataset[
                 Association[
                 "MeanCrossEntropy" -> 
                  Around[11.838063560112257`, 1.4123764607775144`], 
                  "StandardDeviation" -> 
                  Around[4468.409861127608, 907.3482963917182], 
                  "EvaluationTime" -> 0.000056313172317671004`, "TestSize" -> 
                  89, "ModelMemory" -> 142080, 
                  "ModelUtility" -> -9.137767987150978, "TrainingSize" -> 357,
                   "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                  585904, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[11.838063560112257`, 0.9987009730040363]}, 
                  "StandardDeviationHistory" -> {
                    Around[4468.409861127608, 641.5921332766453]}, 
                  "Configuration" -> {
                   "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
                    MaxTrainingRounds -> 50, "LeavesNumber" -> 250, 
                    "LearningRate" -> 0.2, ValidationSet -> Automatic, 
                    "MaxBinNumber" -> 255, "ThreadNumber" -> 6, "MaxDepth" -> 
                    6, "LeafSize" -> 15, "FeatureFraction" -> 1, 
                    "BaggingFraction" -> 1, "BaggingFrequency" -> 0, 
                    "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
                    "L2Regularization" -> 0, "LossFunction" -> 
                    "MeanSquaredError"}, "FinalTrainingSize" -> 446], 
                 
                 TypeSystem`Struct[{
                  "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                   "TestSize", "ModelMemory", "ModelUtility", "TrainingSize", 
                   "TrainingTime", "TrainingMemory", "ExperimentCount", 
                   "MeanCrossEntropyHistory", "StandardDeviationHistory", 
                   "Configuration", "FinalTrainingSize"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Vector[TypeSystem`AnyType, 1], 
                   TypeSystem`Vector[TypeSystem`AnyType, 1], 
                   TypeSystem`Vector[TypeSystem`AnyType, 17], 
                   TypeSystem`Atom[Integer]}], 
                 Association["ID" -> 24301142759555]], "Configurations" -> 
               Dataset[
                 Association[
                 Association[
                   "Value" -> "LinearRegression", "Options" -> 
                    Association[
                    "L1Regularization" -> Association["Value" -> 0], 
                    "L2Regularization" -> Association["Value" -> 100.], 
                    "OptimizationMethod" -> Association["Value" -> Automatic],
                     MaxIterations -> Association["Value" -> 30]]] -> 
                  Association["Experiments" -> {
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[11.385272676461579`, 0.01476171125672135], 
                    "StandardDeviation" -> 
                    Around[11694.049560608197`, 762.6966561616272], 
                    "EvaluationTime" -> 0.00001790077753714996, "TestSize" -> 
                    200, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -10.072953318936927`, "TrainingSize" -> 
                    10, "TrainingTime" -> 0.012589254117941668`, 
                    "TrainingMemory" -> 446464, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[11.385272676461579`, 0.010438106131545458`]}, 
                    "StandardDeviationHistory" -> {
                    Around[11694.049560608197`, 539.3079775601911]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.38314923625471, 0.07940624551722904], 
                    "StandardDeviation" -> 
                    Around[7714.523310330052, 736.9921190214341], 
                    "EvaluationTime" -> 0.00002578769987568629, "TestSize" -> 
                    200, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.662944429904115, "TrainingSize" -> 
                    60, "TrainingTime" -> 0.012589254117941668`, 
                    "TrainingMemory" -> 88128, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.38314923625471, 0.05614869467379654]}, 
                    "StandardDeviationHistory" -> {
                    Around[7714.523310330052, 521.1321250410991]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.090921264037936`, 0.08377441422195343], 
                    "StandardDeviation" -> 
                    Around[5760.909994200937, 652.0373206048201], 
                    "EvaluationTime" -> 0.000017807788679338343`, "TestSize" -> 
                    89, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.374392999716234, "TrainingSize" -> 
                    357, "TrainingTime" -> 0.012589254117941668`, 
                    "TrainingMemory" -> 174224, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.090921264037936`, 0.05923745638627402]}, 
                    "StandardDeviationHistory" -> {
                    Around[5760.909994200937, 461.0600109863753]}]}, 
                    "PredictedPerformances" -> 
                    Association[
                    "EvaluationTime" -> 0.000017807788679338343`, 
                    "ModelMemory" -> 27928, "StandardDeviation" -> 
                    Around[5760.909994200937, 652.0373206048201], 
                    "TrainingMemory" -> 174224, "TrainingTime" -> 
                    0.028317005761084483`], "Index" -> 1], 
                  Association[
                   "Value" -> "GradientBoostedTrees", "Options" -> 
                    Association[
                    "BoostingMethod" -> Association["Value" -> "Gradient"], 
                    MaxTrainingRounds -> Association["Value" -> 50], 
                    "LeavesNumber" -> Association["Value" -> 110], 
                    "LearningRate" -> Association["Value" -> 0.1], 
                    ValidationSet -> Association["Value" -> Automatic], 
                    "MaxBinNumber" -> Association["Value" -> 255], 
                    "ThreadNumber" -> Association["Value" -> 6], "MaxDepth" -> 
                    Association["Value" -> 6], "LeafSize" -> 
                    Association["Value" -> 35], "FeatureFraction" -> 
                    Association["Value" -> 1], "BaggingFraction" -> 
                    Association["Value" -> 1], "BaggingFrequency" -> 
                    Association["Value" -> 0], "MinGainToSplit" -> 
                    Association["Value" -> 0], "L1Regularization" -> 
                    Association["Value" -> 0], "L2Regularization" -> 
                    Association["Value" -> 0], "LossFunction" -> 
                    Association["Value" -> "MeanSquaredError"]]] -> 
                  Association["Experiments" -> {
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[11.604280321561841`, 0.0176519813894186], 
                    "StandardDeviation" -> 
                    Around[11566.180351870926`, 1198.9052862072351`], 
                    "EvaluationTime" -> 0.00002048389811985346, "TestSize" -> 
                    200, "ModelMemory" -> 31824, 
                    "ModelUtility" -> -10.06951841422152, "TrainingSize" -> 
                    10, "TrainingTime" -> 0.015848931924611134`, 
                    "TrainingMemory" -> 97576, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[11.604280321561841`, 0.012481835741836625`]}, 
                    "StandardDeviationHistory" -> {
                    Around[11566.180351870926`, 847.7540578775345]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.786658004667375`, 0.06514919250997397], 
                    "StandardDeviation" -> 
                    Around[11392.702158354443`, 936.2255497823239], 
                    "EvaluationTime" -> 0.000017498166805773083`, "TestSize" -> 
                    300, "ModelMemory" -> 31824, 
                    "ModelUtility" -> -10.050188721622792`, "TrainingSize" -> 
                    60, "TrainingTime" -> 0.012589254117941668`, 
                    "TrainingMemory" -> 79984, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.786658004667375`, 0.046067435812630425`]}, 
                    "StandardDeviationHistory" -> {
                    Around[11392.702158354443`, 662.0114349711848]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[9.846025406085559, 0.2764702543389291], 
                    "StandardDeviation" -> 
                    Around[4528.498648854347, 898.8327077912301], 
                    "EvaluationTime" -> 0.00007089408364945989, "TestSize" -> 
                    89, "ModelMemory" -> 134768, 
                    "ModelUtility" -> -9.150245356256507, "TrainingSize" -> 
                    357, "TrainingTime" -> 0.0630957344480193, 
                    "TrainingMemory" -> 464416, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[9.846025406085559, 0.19549399163942627`]}, 
                    "StandardDeviationHistory" -> {
                    Around[4528.498648854347, 635.5707028314453]}]}, 
                    "PredictedPerformances" -> 
                    Association[
                    "EvaluationTime" -> 0.00007089408364945989, "ModelMemory" -> 
                    134768, "StandardDeviation" -> 
                    Around[4528.498648854347, 898.8327077912301], 
                    "TrainingMemory" -> 464416, "TrainingTime" -> 
                    0.09467441529664646], "Index" -> 2], 
                  Association[
                   "Value" -> "RandomForest", "Options" -> 
                    Association[
                    "FeatureFraction" -> Association["Value" -> Automatic], 
                    "LeafSize" -> Association["Value" -> Automatic], 
                    "TreeNumber" -> Association["Value" -> Automatic], 
                    "DistributionSmoothing" -> Association["Value" -> 0.5], 
                    "Implementation" -> Association["Value" -> Automatic]]] -> 
                  Association["Experiments" -> {
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.78293726958099, 0.07527228065491223], 
                    "StandardDeviation" -> 
                    Around[11379.625644255844`, 961.0231298615176], 
                    "EvaluationTime" -> 0.0000501187233627272, "TestSize" -> 
                    100, "ModelMemory" -> 111616, 
                    "ModelUtility" -> -10.049496844532335`, "TrainingSize" -> 
                    10, "TrainingTime" -> 0.015848931924611134`, 
                    "TrainingMemory" -> 211936, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.78293726958099, 0.05322554008646541]}, 
                    "StandardDeviationHistory" -> {
                    Around[11379.625644255844`, 679.5459720021992]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.392702979028611`, 0.07815278313316007], 
                    "StandardDeviation" -> 
                    Around[7742.957815438444, 782.2981487840049], 
                    "EvaluationTime" -> 0.000039810717055349695`, "TestSize" -> 
                    200, "ModelMemory" -> 111616, 
                    "ModelUtility" -> -9.66771213013811, "TrainingSize" -> 60,
                     "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                    174704, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[10.392702979028611`, 0.05526236292205911]}, 
                    "StandardDeviationHistory" -> {
                    Around[7742.957815438444, 553.1683259148525]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[9.951361908057438, 0.10743876346508176`], 
                    "StandardDeviation" -> 
                    Around[5070.41941299523, 739.3606434831206], 
                    "EvaluationTime" -> 0.00004473114275881988, "TestSize" -> 
                    89, "ModelMemory" -> 127552, 
                    "ModelUtility" -> -9.25309503207324, "TrainingSize" -> 
                    357, "TrainingTime" -> 0.015848931924611134`, 
                    "TrainingMemory" -> 304296, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[9.951361908057438, 0.0759706782084568]}, 
                    "StandardDeviationHistory" -> {
                    Around[5070.41941299523, 522.8069247493639]}]}, 
                    "PredictedPerformances" -> 
                    Association[
                    "EvaluationTime" -> 0.00004473114275881988, "ModelMemory" -> 
                    127552, "StandardDeviation" -> 
                    Around[5070.41941299523, 739.3606434831206], 
                    "TrainingMemory" -> 304296, "TrainingTime" -> 
                    0.035648998138551095`], "Index" -> 3], 
                  Association[
                   "Value" -> "NearestNeighbors", "Options" -> 
                    Association[
                    "NeighborsNumber" -> Association["Value" -> Automatic], 
                    "DistributionSmoothing" -> Association["Value" -> 0.5], 
                    "NearestMethod" -> Association["Value" -> Automatic]]] -> 
                  Association["Experiments" -> {
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.778968364410705`, 0.07062827671225713], 
                    "StandardDeviation" -> 
                    Around[11660.25550964196, 710.7787517359874], 
                    "EvaluationTime" -> 0.000015848931924611128`, "TestSize" -> 
                    300, "ModelMemory" -> 21312, 
                    "ModelUtility" -> -10.069216432430757`, "TrainingSize" -> 
                    10, "TrainingTime" -> 0.00630957344480193, 
                    "TrainingMemory" -> 95488, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.778968364410705`, 0.04994173340675693]}, 
                    "StandardDeviationHistory" -> {
                    Around[11660.25550964196, 502.5964752758262]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.748342587942043`, 0.09153576974645958], 
                    "StandardDeviation" -> 
                    Around[11302.829227199776`, 1150.8279013385256`], 
                    "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 
                    200, "ModelMemory" -> 25664, 
                    "ModelUtility" -> -10.04612512952194, "TrainingSize" -> 
                    60, "TrainingTime" -> 0.007943282347242814, 
                    "TrainingMemory" -> 162936, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.748342587942043`, 0.06472556350885199]}, 
                    "StandardDeviationHistory" -> {
                    Around[11302.829227199776`, 813.7582130151545]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.51250618275601, 0.08656853722274024], 
                    "StandardDeviation" -> 
                    Around[9458.80446515342, 1302.5133037203577`], 
                    "EvaluationTime" -> 0.000028223443050669432`, "TestSize" -> 
                    89, "ModelMemory" -> 51040, 
                    "ModelUtility" -> -9.875030383524551, "TrainingSize" -> 
                    357, "TrainingTime" -> 0.025118864315095794`, 
                    "TrainingMemory" -> 1326088, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.51250618275601, 0.061213199707599676`]}, 
                    "StandardDeviationHistory" -> {
                    Around[9458.80446515342, 921.015989646358]}]}, 
                    "PredictedPerformances" -> 
                    Association[
                    "EvaluationTime" -> 0.000028223443050669432`, 
                    "ModelMemory" -> 51040, "StandardDeviation" -> 
                    Around[9458.80446515342, 1302.5133037203577`], 
                    "TrainingMemory" -> 1326088, "TrainingTime" -> 
                    0.03769056359755466], "Index" -> 4], 
                  Association[
                   "Value" -> "LinearRegression", "Options" -> 
                    Association[
                    "L1Regularization" -> Association["Value" -> 0], 
                    "L2Regularization" -> Association["Value" -> 0.1], 
                    "OptimizationMethod" -> Association["Value" -> Automatic],
                     MaxIterations -> Association["Value" -> 30]]] -> 
                  Association["Experiments" -> {
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[13.666247956215752`, 0.565921346619014], 
                    "StandardDeviation" -> 
                    Around[13113.154950728374`, 851.7034252164533], 
                    "EvaluationTime" -> 0.000014762372655721304`, "TestSize" -> 
                    300, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -10.1874356818806, "TrainingSize" -> 10,
                     "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                    77032, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[13.666247956215752`, 0.4001668218125275]}, 
                    "StandardDeviationHistory" -> {
                    Around[13113.154950728374`, 602.2452675303637]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.189312296955022`, 0.08791486043924154], 
                    "StandardDeviation" -> 
                    Around[6469.944747810855, 601.2073002982947], 
                    "EvaluationTime" -> 0.00002253574373239229, "TestSize" -> 
                    200, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.48649495889949, "TrainingSize" -> 60,
                     "TrainingTime" -> 0.012589254117941668`, 
                    "TrainingMemory" -> 88320, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.189312296955022`, 0.06216519398365663]}, 
                    "StandardDeviationHistory" -> {
                    Around[6469.944747810855, 425.11775893978125`]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.099790415665245`, 0.0899716087569179], 
                    "StandardDeviation" -> 
                    Around[5841.216659405265, 648.8323919131166], 
                    "EvaluationTime" -> 0.000028223443050669432`, "TestSize" -> 
                    89, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.387824953888705, "TrainingSize" -> 
                    357, "TrainingTime" -> 0.012589254117941668`, 
                    "TrainingMemory" -> 174096, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.099790415665245`, 0.0636195346662796]}, 
                    "StandardDeviationHistory" -> {
                    Around[5841.216659405265, 458.7937841752523]}]}, 
                    "PredictedPerformances" -> 
                    Association[
                    "EvaluationTime" -> 0.000028223443050669432`, 
                    "ModelMemory" -> 27928, "StandardDeviation" -> 
                    Around[5841.216659405265, 648.8323919131166], 
                    "TrainingMemory" -> 174096, "TrainingTime" -> 
                    0.02367103399038563], "Index" -> 5], 
                  Association[
                   "Value" -> "LinearRegression", "Options" -> 
                    Association[
                    "L1Regularization" -> Association["Value" -> 0], 
                    "L2Regularization" -> Association["Value" -> 1000.], 
                    "OptimizationMethod" -> Association["Value" -> Automatic],
                     MaxIterations -> Association["Value" -> 30]]] -> 
                  Association["Experiments" -> {
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.719008942076055`, 0.08301572967737852], 
                    "StandardDeviation" -> 
                    Around[10698.924051105068`, 1104.9478315143292`], 
                    "EvaluationTime" -> 0.000014219093021276394`, "TestSize" -> 
                    200, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.991501406133287, "TrainingSize" -> 
                    60, "TrainingTime" -> 0.012589254117941668`, 
                    "TrainingMemory" -> 88256, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.719008942076055`, 0.05870098540002367]}, 
                    "StandardDeviationHistory" -> {
                    Around[10698.924051105068`, 781.316104521153]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.370533299171148`, 0.09754985856951097], 
                    "StandardDeviation" -> 
                    Around[7349.792921881061, 1039.451906454489], 
                    "EvaluationTime" -> 0.000017807788679338343`, "TestSize" -> 
                    89, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.623478051779607, "TrainingSize" -> 
                    357, "TrainingTime" -> 0.015848931924611134`, 
                    "TrainingMemory" -> 174080, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.370533299171148`, 0.06897816649828985]}, 
                    "StandardDeviationHistory" -> {
                    Around[7349.792921881061, 735.0034917712541]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[11.551994082524239`, 0.011384011673849849`], 
                    "StandardDeviation" -> 
                    Around[12367.54399963271, 536.0626428334472], 
                    "EvaluationTime" -> 0.000014219093021276394`, "TestSize" -> 
                    400, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -10.124620471011118`, "TrainingSize" -> 
                    10, "TrainingTime" -> 0.007943282347242814, 
                    "TrainingMemory" -> 77096, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[11.551994082524239`, 0.008049711851686047]}, 
                    "StandardDeviationHistory" -> {
                    Around[12367.54399963271, 379.0535298883127]}]}, 
                    "PredictedPerformances" -> 
                    Association[
                    "EvaluationTime" -> 0.000014219093021276394`, 
                    "ModelMemory" -> 27928, "StandardDeviation" -> 
                    Around[12367.54399963271, 536.0626428334472], 
                    "TrainingMemory" -> 77096, "TrainingTime" -> 
                    0.04801629338664462], "Index" -> 6], 
                  Association[
                   "Value" -> "LinearRegression", "Options" -> 
                    Association[
                    "L1Regularization" -> Association["Value" -> 0], 
                    "L2Regularization" -> Association["Value" -> 10.], 
                    "OptimizationMethod" -> Association["Value" -> Automatic],
                     MaxIterations -> Association["Value" -> 30]]] -> 
                  Association["Experiments" -> {
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.14704204740797, 0.05764311858177829], 
                    "StandardDeviation" -> 
                    Around[6164.1484428069225`, 436.5168392177535], 
                    "EvaluationTime" -> 0.000012589254117941663`, "TestSize" -> 
                    300, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.433727071189065, "TrainingSize" -> 
                    60, "TrainingTime" -> 0.007943282347242814, 
                    "TrainingMemory" -> 88192, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.14704204740797, 0.04075984003791571]}, 
                    "StandardDeviationHistory" -> {
                    Around[6164.1484428069225`, 308.66401711299136`]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.943437641971057`, 0.02099194007494158], 
                    "StandardDeviation" -> 
                    Around[11825.239512230206`, 561.4367452752998], 
                    "EvaluationTime" -> 0.000013675813386831484`, "TestSize" -> 
                    300, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -10.080600301762654`, "TrainingSize" -> 
                    10, "TrainingTime" -> 0.01, "TrainingMemory" -> 77096, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[10.943437641971057`, 0.014843543177252833`]}, 
                    "StandardDeviationHistory" -> {
                    Around[11825.239512230206`, 396.9957297914688]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.097494144646081`, 0.08962712019902139], 
                    "StandardDeviation" -> 
                    Around[5826.829959649143, 649.692523210302], 
                    "EvaluationTime" -> 0.000017807788679338343`, "TestSize" -> 
                    89, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.38544147998383, "TrainingSize" -> 
                    357, "TrainingTime" -> 0.01, "TrainingMemory" -> 174080, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[10.097494144646081`, 0.06337594447094981]}, 
                    "StandardDeviationHistory" -> {
                    Around[5826.829959649143, 459.40198884820296`]}]}, 
                    "PredictedPerformances" -> 
                    Association[
                    "EvaluationTime" -> 0.000017807788679338343`, 
                    "ModelMemory" -> 27928, "StandardDeviation" -> 
                    Around[5826.829959649143, 649.692523210302], 
                    "TrainingMemory" -> 174080, "TrainingTime" -> 
                    0.020436279546122364`], "Index" -> 7], 
                  Association[
                   "Value" -> "LinearRegression", "Options" -> 
                    Association[
                    "L1Regularization" -> Association["Value" -> 0], 
                    "L2Regularization" -> Association["Value" -> 1.], 
                    "OptimizationMethod" -> Association["Value" -> Automatic],
                     MaxIterations -> Association["Value" -> 30]]] -> 
                  Association["Experiments" -> {
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[11.830243726085866`, 0.277883555547199], 
                    "StandardDeviation" -> 
                    Around[14110.10286640524, 973.91472530878], 
                    "EvaluationTime" -> 0.00001885405921651873, "TestSize" -> 
                    200, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -10.261514495025732`, "TrainingSize" -> 
                    10, "TrainingTime" -> 0.007943282347242814, 
                    "TrainingMemory" -> 77032, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[11.830243726085866`, 0.19649334650765304`]}, 
                    "StandardDeviationHistory" -> {
                    Around[14110.10286640524, 688.661706563272]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.187144547762587`, 0.08682199358993073], 
                    "StandardDeviation" -> 
                    Around[6455.514326994925, 596.48230514236], 
                    "EvaluationTime" -> 0.00002048389811985346, "TestSize" -> 
                    200, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.484159152769212, "TrainingSize" -> 
                    60, "TrainingTime" -> 0.012589254117941668`, 
                    "TrainingMemory" -> 88256, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.187144547762587`, 0.06139242042357498]}, 
                    "StandardDeviationHistory" -> {
                    Around[6455.514326994925, 421.7766828239462]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.099332047651352`, 0.08985430441848224], 
                    "StandardDeviation" -> 
                    Around[5838.519736718871, 648.5554575633032], 
                    "EvaluationTime" -> 0.000028223443050669432`, "TestSize" -> 
                    89, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.38736390015218, "TrainingSize" -> 
                    357, "TrainingTime" -> 0.015848931924611134`, 
                    "TrainingMemory" -> 174048, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.099332047651352`, 0.06353658797310915]}, 
                    "StandardDeviationHistory" -> {
                    Around[5838.519736718871, 458.59796201855585`]}]}, 
                    "PredictedPerformances" -> 
                    Association[
                    "EvaluationTime" -> 0.000028223443050669432`, 
                    "ModelMemory" -> 27928, "StandardDeviation" -> 
                    Around[5838.519736718871, 648.5554575633032], 
                    "TrainingMemory" -> 174048, "TrainingTime" -> 
                    0.027743348561182775`], "Index" -> 8], 
                  Association[
                   "Value" -> "LinearRegression", "Options" -> 
                    Association[
                    "L1Regularization" -> Association["Value" -> 0], 
                    "L2Regularization" -> Association["Value" -> 0.01], 
                    "OptimizationMethod" -> Association["Value" -> Automatic],
                     MaxIterations -> Association["Value" -> 30]]] -> 
                  Association["Experiments" -> {
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.18956762453252, 0.08801811296452487], 
                    "StandardDeviation" -> 
                    Around[6471.6568777946395`, 601.6590981330382], 
                    "EvaluationTime" -> 0.00002048389811985346, "TestSize" -> 
                    200, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.486768430621876, "TrainingSize" -> 
                    60, "TrainingTime" -> 0.007943282347242814, 
                    "TrainingMemory" -> 88192, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.18956762453252, 0.06223820454445911]}, 
                    "StandardDeviationHistory" -> {
                    Around[6471.6568777946395`, 425.43722825245374`]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[27.537337053052727`, 2.6500920194156214`], 
                    "StandardDeviation" -> 
                    Around[13002.487483707702`, 893.3765064916035], 
                    "EvaluationTime" -> 0.00001885405921651873, "TestSize" -> 
                    200, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -10.179702099604532`, "TrainingSize" -> 
                    10, "TrainingTime" -> 0.007943282347242814, 
                    "TrainingMemory" -> 77032, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[27.537337053052727`, 1.8738980376971375`]}, 
                    "StandardDeviationHistory" -> {
                    Around[13002.487483707702`, 631.7125858929605]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.099776438905698`, 0.08994378362134967], 
                    "StandardDeviation" -> 
                    Around[5841.149868382088, 648.698021956021], 
                    "EvaluationTime" -> 0.000017807788679338343`, "TestSize" -> 
                    89, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.387809256651117, "TrainingSize" -> 
                    357, "TrainingTime" -> 0.012589254117941668`, 
                    "TrainingMemory" -> 174080, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.099776438905698`, 0.06359985932423187]}, 
                    "StandardDeviationHistory" -> {
                    Around[5841.149868382088, 458.6987702674023]}]}, 
                    "PredictedPerformances" -> 
                    Association[
                    "EvaluationTime" -> 0.000017807788679338343`, 
                    "ModelMemory" -> 27928, "StandardDeviation" -> 
                    Around[5841.149868382088, 648.698021956021], 
                    "TrainingMemory" -> 174080, "TrainingTime" -> 
                    0.02367103399038563], "Index" -> 9], 
                  Association[
                   "Value" -> "LinearRegression", "Options" -> 
                    Association[
                    "L1Regularization" -> Association["Value" -> 0], 
                    "L2Regularization" -> Association["Value" -> 0.001], 
                    "OptimizationMethod" -> Association["Value" -> Automatic],
                     MaxIterations -> Association["Value" -> 30]]] -> 
                  Association["Experiments" -> {
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[1711.5419319581322`, 206.47294102969227`], 
                    "StandardDeviation" -> 
                    Around[22182.506624774014`, 1327.0142388563258`], 
                    "EvaluationTime" -> 0.000015848931924611128`, "TestSize" -> 
                    300, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -10.712110838560811`, "TrainingSize" -> 
                    10, "TrainingTime" -> 0.007943282347242814, 
                    "TrainingMemory" -> 79128, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[1711.5419319581322`, 145.99841673362553`]}, 
                    "StandardDeviationHistory" -> {
                    Around[22182.506624774014`, 938.3407670264128]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.158289482810313`, 0.06732548630854941], 
                    "StandardDeviation" -> 
                    Around[6250.60223027563, 478.63268709987346`], 
                    "EvaluationTime" -> 0.000017852350119216196`, "TestSize" -> 
                    300, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.448789848868545, "TrainingSize" -> 
                    60, "TrainingTime" -> 0.007943282347242814, 
                    "TrainingMemory" -> 88256, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.158289482810313`, 0.04760630791545734]}, 
                    "StandardDeviationHistory" -> {
                    Around[6250.60223027563, 338.4444187458595]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.099774905590147`, 0.08994083141917657], 
                    "StandardDeviation" -> 
                    Around[5841.142497256003, 648.6839155704935], 
                    "EvaluationTime" -> 0.000028223443050669432`, "TestSize" -> 
                    89, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.387807560049428, "TrainingSize" -> 
                    357, "TrainingTime" -> 0.01, "TrainingMemory" -> 174048, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[10.099774905590147`, 0.06359777180205584]}, 
                    "StandardDeviationHistory" -> {
                    Around[5841.142497256003, 458.68879554653773`]}]}, 
                    "PredictedPerformances" -> 
                    Association[
                    "EvaluationTime" -> 0.000028223443050669432`, 
                    "ModelMemory" -> 27928, "StandardDeviation" -> 
                    Around[5841.142497256003, 648.6839155704935], 
                    "TrainingMemory" -> 174048, "TrainingTime" -> 
                    0.020436279546122364`], "Index" -> 10], 
                  Association[
                   "Value" -> "LinearRegression", "Options" -> 
                    Association[
                    "L1Regularization" -> Association["Value" -> 0], 
                    "L2Regularization" -> Association["Value" -> 100000.], 
                    "OptimizationMethod" -> Association["Value" -> Automatic],
                     MaxIterations -> Association["Value" -> 30]]] -> 
                  Association["Experiments" -> {
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.788209662348844`, 0.06345600884040122], 
                    "StandardDeviation" -> 
                    Around[11386.816735308515`, 928.9999697165067], 
                    "EvaluationTime" -> 0.000013675813386831484`, "TestSize" -> 
                    300, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -10.049555026449891`, "TrainingSize" -> 
                    60, "TrainingTime" -> 0.007943282347242814, 
                    "TrainingMemory" -> 88280, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.788209662348844`, 0.04487017415808121]}, 
                    "StandardDeviationHistory" -> {
                    Around[11386.816735308515`, 656.9021783086391]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.690007995480368`, 0.0990680518281835], 
                    "StandardDeviation" -> 
                    Around[10079.697686046959`, 1442.5197292271025`], 
                    "EvaluationTime" -> 0.000022418677696279538`, "TestSize" -> 
                    89, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -9.939656941482482, "TrainingSize" -> 
                    357, "TrainingTime" -> 0.015848931924611134`, 
                    "TrainingMemory" -> 174048, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.690007995480368`, 0.0700516912466489]}, 
                    "StandardDeviationHistory" -> {
                    Around[10079.697686046959`, 1020.0154825318665`]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[11.57090321008157, 0.011576266601034696`], 
                    "StandardDeviation" -> 
                    Around[12483.392534589198`, 548.9380080531804], 
                    "EvaluationTime" -> 0.000016874854730880543`, "TestSize" -> 
                    400, "ModelMemory" -> 27928, 
                    "ModelUtility" -> -10.134068757389482`, "TrainingSize" -> 
                    10, "TrainingTime" -> 0.007943282347242814, 
                    "TrainingMemory" -> 77160, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[11.57090321008157, 0.008185656614414978]}, 
                    "StandardDeviationHistory" -> {
                    Around[12483.392534589198`, 388.15778794543945`]}]}, 
                    "PredictedPerformances" -> 
                    Association[
                    "EvaluationTime" -> 0.000016874854730880543`, 
                    "ModelMemory" -> 27928, "StandardDeviation" -> 
                    Around[12483.392534589198`, 548.9380080531804], 
                    "TrainingMemory" -> 77160, "TrainingTime" -> 
                    0.04337032161594576], "Index" -> 11], 
                  Association[
                   "Value" -> "GradientBoostedTrees", "Options" -> 
                    Association[
                    "BoostingMethod" -> Association["Value" -> "Gradient"], 
                    MaxTrainingRounds -> Association["Value" -> 50], 
                    "LeavesNumber" -> Association["Value" -> 250], 
                    "LearningRate" -> Association["Value" -> 0.2], 
                    ValidationSet -> Association["Value" -> Automatic], 
                    "MaxBinNumber" -> Association["Value" -> 255], 
                    "ThreadNumber" -> Association["Value" -> 6], "MaxDepth" -> 
                    Association["Value" -> 6], "LeafSize" -> 
                    Association["Value" -> 15], "FeatureFraction" -> 
                    Association["Value" -> 1], "BaggingFraction" -> 
                    Association["Value" -> 1], "BaggingFrequency" -> 
                    Association["Value" -> 0], "MinGainToSplit" -> 
                    Association["Value" -> 0], "L1Regularization" -> 
                    Association["Value" -> 0], "L2Regularization" -> 
                    Association["Value" -> 0], "LossFunction" -> 
                    Association["Value" -> "MeanSquaredError"]]] -> 
                  Association["Experiments" -> {
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[10.850822860681951`, 0.2880527577841336], 
                    "StandardDeviation" -> 
                    Around[8005.136791275474, 754.6749317111936], 
                    "EvaluationTime" -> 0.0000630957344480193, "TestSize" -> 
                    200, "ModelMemory" -> 128792, 
                    "ModelUtility" -> -9.699687790597435, "TrainingSize" -> 
                    60, "TrainingTime" -> 0.05011872336272722, 
                    "TrainingMemory" -> 294272, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[10.850822860681951`, 0.20368405836864692`]}, 
                    "StandardDeviationHistory" -> {
                    Around[8005.136791275474, 533.6357618044797]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[11.838063560112257`, 1.4123764607775144`], 
                    "StandardDeviation" -> 
                    Around[4468.409861127608, 907.3482963917182], 
                    "EvaluationTime" -> 0.000056313172317671004`, "TestSize" -> 
                    89, "ModelMemory" -> 142080, 
                    "ModelUtility" -> -9.137767987150978, "TrainingSize" -> 
                    357, "TrainingTime" -> 0.07943282347242814, 
                    "TrainingMemory" -> 585904, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[11.838063560112257`, 0.9987009730040363]}, 
                    "StandardDeviationHistory" -> {
                    Around[4468.409861127608, 641.5921332766453]}], 
                    Association[
                    "MeanCrossEntropy" -> 
                    Around[11.603168335986306`, 0.014233585414398937`], 
                    "StandardDeviation" -> 
                    Around[11392.702158354443`, 936.2255497823239], 
                    "EvaluationTime" -> 0.000023396783926626793`, "TestSize" -> 
                    300, "ModelMemory" -> 31824, 
                    "ModelUtility" -> -10.050188727521409`, "TrainingSize" -> 
                    10, "TrainingTime" -> 0.015848931924611134`, 
                    "TrainingMemory" -> 71104, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[11.603168335986306`, 0.010064664767119423`]}, 
                    "StandardDeviationHistory" -> {
                    Around[11392.702158354443`, 662.0114349711848]}]}, 
                    "PredictedPerformances" -> 
                    Association[
                    "EvaluationTime" -> 0.000023396783926626793`, 
                    "ModelMemory" -> 31824, "StandardDeviation" -> 
                    Around[11392.702158354443`, 936.2255497823239], 
                    "TrainingMemory" -> 71104, "TrainingTime" -> 
                    0.12080495974649288`], "Index" -> 12]], 
                 TypeSystem`Assoc[
                  TypeSystem`Struct[{"Value", "Options"}, {
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "GradientBoostedTrees", "LinearRegression", 
                    "NearestNeighbors", "RandomForest"]], 
                    TypeSystem`Assoc[TypeSystem`AnyType, 
                    TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
                    TypeSystem`AnyLength]}], 
                  
                  TypeSystem`Struct[{
                   "Experiments", "PredictedPerformances", "Index"}, {
                    TypeSystem`Vector[
                    
                    TypeSystem`Struct[{
                    "MeanCrossEntropy", "StandardDeviation", "EvaluationTime",
                     "TestSize", "ModelMemory", "ModelUtility", 
                    "TrainingSize", "TrainingTime", "TrainingMemory", 
                    "ExperimentCount", "MeanCrossEntropyHistory", 
                    "StandardDeviationHistory"}, {
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Vector[TypeSystem`AnyType, 1], 
                    TypeSystem`Vector[TypeSystem`AnyType, 1]}], 3], 
                    
                    TypeSystem`Struct[{
                    "EvaluationTime", "ModelMemory", "StandardDeviation", 
                    "TrainingMemory", "TrainingTime"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real]}], 
                    TypeSystem`Atom[Integer]}], 12], 
                 Association["ID" -> 24296847792259]], "MaxTrainingSize" -> 
               446, "PreprocessorEvaluationTime" -> 4.977294921875`4.*^-6, 
               "PreprocessorMemory" -> 65424, "InputDimension" -> 6, 
               "OutputDimension" -> 1, 
               "BaselineLogProbability" -> -1.4189385332046727`, 
               "VariableBudget" -> True, "CheckpointingInfo" -> 
               Association["Checkpointing" -> False], "UserStop" -> False, 
               "NaturalStop" -> True, "AbortStop" -> False, 
               "LastReportingTime" -> 
               3.8153219866721137`17.334106184434898*^9, "RoundPartitioning" -> 
               Dataset[{
                  Association[
                  "TrainingSizes" -> 10, "TimeBudgets" -> 
                   0.19599999999999998`, "ElapsedTimes" -> 0.3455498, 
                   "ExperimentCounts" -> 12], 
                  Association[
                  "TrainingSizes" -> 60, "TimeBudgets" -> 0.2799999999999999, 
                   "ElapsedTimes" -> 0.3208921, "ExperimentCounts" -> 12], 
                  Association[
                  "TrainingSizes" -> 357, "TimeBudgets" -> 0.4, 
                   "ElapsedTimes" -> 0.467844, "ExperimentCounts" -> 12]}, 
                 TypeSystem`Vector[
                  
                  TypeSystem`Struct[{
                   "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
                    "ExperimentCounts"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer]}], 3], 
                 Association["ID" -> 24309732694147]]], "AnomalyDetector" -> 
             None, "Log" -> Association["Example" -> MachineLearning`MLDataset[
                 Association[
                 "f1" -> Association[
                   "Type" -> "Numerical", "Weight" -> 1, "Values" -> {28}, 
                    "ID" -> 2677209384536529696], "f2" -> 
                  Association[
                   "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"},
                     "ID" -> 2094725855374892613], "f3" -> 
                  Association[
                   "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.8}, 
                    "ID" -> 6072946621961155708], "f4" -> 
                  Association[
                   "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, 
                    "ID" -> 4631297986907657407], "f5" -> 
                  Association[
                   "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"no"}, 
                    "ID" -> 6304035131587355891], "f6" -> 
                  Association[
                   "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"southwest"}, "ID" -> 8778114707174829320]], 
                 Association[
                 "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                  "LogDensityRatios" -> 0, "RawExample" -> False]], 
               "TrainingTime" -> 2.753124, "MaxTrainingMemory" -> 22263176, 
               "DataMemory" -> 142864, "FunctionMemory" -> 414944, 
               "LanguageVersion" -> {12.1, 1}, "Date" -> 
               DateObject[{
                 2020, 11, 25, 19, 39, 47.0929712`9.425530952875286}, 
                 "Instant", "Gregorian", 0.], "ProcessorCount" -> 6, 
               "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
               "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
          Association[
           "Input" -> {{56, "female", 32.3, 3, "no", "northeast"}, {
              55, "male", 32.67, 1, "no", "southeast"}, {
              55, "female", 33.535, 2, "no", "northwest"}, {
              56, "female", 28.785, 0, "no", "northeast"}, {
              58, "male", 38., 0, "no", "southwest"}, {
              56, "male", 33.66, 4, "no", "southeast"}, {
              39, "female", 23.275, 3, "no", "northeast"}, {
              29, "male", 31.73, 2, "no", "northwest"}, {
              49, "female", 23.18, 2, "no", "northwest"}, {
              57, "male", 34.01, 0, "no", "northwest"}, {
              44, "female", 36.955, 1, "no", "northwest"}, {
              60, "male", 33.11, 3, "no", "southeast"}, {
              57, "female", 20.1, 1, "no", "southwest"}, {
              31, "female", 38.095, 1, "yes", "northeast"}, {
              64, "female", 32.965, 0, "no", "northwest"}, {
              52, "male", 26.4, 3, "no", "southeast"}, {
              58, "male", 23.3, 0, "no", "southwest"}, {
              25, "male", 25.74, 0, "no", "southeast"}, {
              19, "male", 30.4, 0, "no", "southwest"}, {
              31, "female", 29.1, 0, "no", "southwest"}, {
              46, "female", 32.3, 2, "no", "northeast"}, {
              60, "male", 28.9, 0, "no", "southwest"}, {
              30, "female", 30.9, 3, "no", "southwest"}, {
              18, "female", 29.165, 0, "no", "northeast"}, {
              39, "male", 26.41, 0, "yes", "northeast"}, {
              43, "male", 26.03, 0, "no", "northeast"}, {
              34, "female", 37.335, 2, "no", "northwest"}, {
              36, "female", 30.02, 0, "no", "northwest"}, {
              42, "female", 40.37, 2, "yes", "southeast"}, {
              18, "male", 33.535, 0, "yes", "northeast"}, {
              19, "female", 23.4, 2, "no", "southwest"}, {
              56, "male", 36.1, 3, "no", "southwest"}, {
              21, "female", 22.135, 0, "no", "northeast"}, {
              50, "female", 27.6, 1, "yes", "southwest"}, {
              63, "female", 36.3, 0, "no", "southeast"}, {
              54, "male", 25.1, 3, "yes", "southwest"}, {
              53, "male", 26.41, 2, "no", "northeast"}, {
              41, "female", 33.06, 2, "no", "northwest"}, {
              45, "female", 30.495, 1, "yes", "northwest"}, {
              64, "male", 26.41, 0, "no", "northeast"}, {
              32, "male", 30.8, 3, "no", "southwest"}, {
              40, "male", 34.105, 1, "no", "northeast"}, {
              52, "female", 37.525, 2, "no", "northwest"}, {
              31, "male", 27.645, 2, "no", "northeast"}, {
              58, "female", 27.17, 0, "no", "northwest"}, {
              21, "female", 25.8, 0, "no", "southwest"}, {
              34, "male", 30.8, 0, "yes", "southwest"}, {
              49, "female", 33.345, 2, "no", "northeast"}, {
              32, "male", 37.18, 2, "no", "southeast"}, {
              59, "male", 41.14, 1, "yes", "southeast"}, {
              53, "female", 33.25, 0, "no", "northeast"}, {
              36, "female", 25.84, 0, "no", "northwest"}, {
              47, "female", 45.32, 1, "no", "southeast"}, {
              43, "male", 27.8, 0, "yes", "southwest"}, {
              23, "female", 32.78, 2, "yes", "southeast"}, {
              24, "female", 22.6, 0, "no", "southwest"}, {
              34, "male", 34.675, 0, "no", "northeast"}, {
              44, "female", 20.235, 1, "yes", "northeast"}, {
              31, "female", 30.495, 3, "no", "northeast"}, {
              61, "male", 28.31, 1, "yes", "northwest"}, {
              21, "female", 34.6, 0, "no", "southwest"}, {
              60, "female", 27.55, 0, "no", "northeast"}, {
              41, "female", 32.2, 1, "no", "southwest"}, {
              32, "female", 37.145, 3, "no", "northeast"}, {
              44, "male", 31.35, 1, "yes", "northeast"}, {
              18, "female", 21.66, 0, "yes", "northeast"}, {
              56, "male", 40.3, 0, "no", "southwest"}, {
              33, "male", 42.46, 1, "no", "southeast"}, {
              59, "male", 28.785, 0, "no", "northwest"}, {
              35, "female", 34.21, 1, "no", "southeast"}, {
              56, "female", 28.31, 0, "no", "northeast"}, {
              52, "male", 24.32, 3, "yes", "northeast"}, {
              62, "female", 39.16, 0, "no", "southeast"}, {
              24, "female", 29.925, 0, "no", "northwest"}, {
              24, "male", 28.5, 0, "yes", "northeast"}, {
              36, "female", 26.2, 0, "no", "southwest"}, {
              59, "male", 29.83, 3, "yes", "northeast"}, {
              27, "female", 24.1, 0, "no", "southwest"}, {
              41, "male", 40.26, 0, "no", "southeast"}, {
              37, "female", 38.39, 0, "yes", "southeast"}, {
              48, "female", 22.8, 0, "no", "southwest"}, {
              54, "male", 40.565, 3, "yes", "northeast"}, {
              38, "male", 28.27, 1, "no", "southeast"}, {
              41, "male", 30.59, 2, "no", "northwest"}, {
              58, "male", 36.08, 0, "no", "southeast"}, {
              43, "female", 29.9, 1, "no", "southwest"}, {
              24, "female", 30.1, 3, "no", "southwest"}, {
              32, "male", 28.88, 0, "no", "northwest"}, {
              19, "male", 27.265, 2, "no", "northwest"}, {
              48, "female", 27.265, 1, "no", "northeast"}, {
              27, "male", 23.1, 0, "no", "southeast"}, {
              60, "female", 24.53, 0, "no", "southeast"}, {
              64, "female", 39.05, 3, "no", "southeast"}, {
              30, "male", 28.69, 3, "yes", "northwest"}, {
              21, "male", 35.53, 0, "no", "southeast"}, {
              64, "male", 37.905, 0, "no", "northwest"}, {
              55, "female", 26.8, 1, "no", "southwest"}, {
              45, "female", 36.3, 2, "no", "southeast"}, {
              41, "female", 21.755, 1, "no", "northeast"}, {
              46, "female", 19.95, 2, "no", "northwest"}, {
              41, "female", 31.02, 0, "no", "southeast"}, {
              41, "male", 28.8, 1, "no", "southwest"}, {
              42, "female", 25.3, 1, "no", "southwest"}, {
              23, "female", 28.12, 0, "no", "northwest"}, {
              35, "female", 35.815, 1, "no", "northwest"}, {
              59, "female", 32.395, 3, "no", "northeast"}, {
              44, "female", 26.41, 0, "no", "northwest"}, {
              32, "male", 35.2, 2, "no", "southwest"}, {
              48, "female", 35.91, 1, "no", "northeast"}, {
              18, "male", 35.2, 1, "no", "southeast"}, {
              51, "female", 34.96, 2, "yes", "northeast"}, {
              61, "male", 36.3, 1, "yes", "southwest"}, {
              58, "female", 25.2, 0, "no", "southwest"}, {
              48, "male", 40.15, 0, "no", "southeast"}, {
              63, "female", 32.2, 2, "yes", "southwest"}, {
              26, "female", 34.2, 2, "no", "southwest"}, {
              57, "male", 31.54, 0, "no", "northwest"}, {
              46, "female", 23.655, 1, "yes", "northwest"}, {
              45, "female", 27.83, 2, "no", "southeast"}, {
              41, "male", 37.05, 2, "no", "northwest"}, {
              37, "male", 29.64, 0, "no", "northwest"}, {
              20, "male", 27.3, 0, "yes", "southwest"}, {
              18, "female", 36.85, 0, "yes", "southeast"}, {
              23, "female", 28.49, 1, "yes", "southeast"}, {
              18, "female", 27.28, 3, "yes", "southeast"}, {
              45, "female", 30.9, 2, "no", "southwest"}, {
              19, "male", 36.955, 0, "yes", "northwest"}, {
              62, "male", 26.695, 0, "yes", "northeast"}, {
              19, "female", 34.7, 2, "yes", "southwest"}, {
              18, "female", 30.115, 0, "no", "northeast"}, {
              53, "male", 36.1, 1, "no", "southwest"}, {
              61, "female", 22.04, 0, "no", "northeast"}, {
              44, "female", 27.5, 1, "no", "southwest"}, {
              60, "male", 31.35, 3, "yes", "northwest"}, {
              55, "female", 35.2, 0, "yes", "southeast"}, {
              49, "female", 23.845, 3, "yes", "northeast"}, {
              61, "male", 36.1, 3, "no", "southwest"}, {
              44, "female", 38.06, 0, "yes", "southeast"}, {
              50, "male", 25.365, 2, "no", "northwest"}, {
              28, "female", 33.4, 0, "no", "southwest"}, {
              57, "male", 42.13, 1, "yes", "southeast"}, {
              54, "female", 21.47, 3, "no", "northwest"}, {
              53, "female", 28.1, 3, "no", "southwest"}, {
              41, "male", 23.94, 1, "no", "northeast"}, {
              62, "female", 38.095, 2, "no", "northeast"}, {
              48, "female", 32.3, 2, "no", "northeast"}, {
              64, "male", 23.76, 0, "yes", "southeast"}, {
              25, "female", 42.13, 1, "no", "southeast"}, {
              20, "male", 35.625, 3, "yes", "northwest"}, {
              24, "female", 23.21, 0, "no", "southeast"}, {
              27, "male", 31.13, 1, "yes", "southeast"}, {
              20, "female", 33., 0, "no", "southeast"}, {
              38, "female", 19.475, 2, "no", "northwest"}, {
              40, "female", 22.22, 2, "yes", "southeast"}, {
              45, "female", 39.995, 3, "no", "northeast"}, {
              51, "female", 33.915, 0, "no", "northeast"}, {
              20, "male", 33., 1, "no", "southwest"}, {
              27, "female", 31.4, 0, "yes", "southwest"}, {
              57, "male", 40.37, 0, "no", "southeast"}, {
              56, "female", 37.51, 2, "no", "southeast"}, {
              27, "female", 23.21, 1, "no", "southeast"}, {
              22, "male", 28.88, 0, "no", "northeast"}, {
              30, "female", 23.655, 3, "yes", "northwest"}, {
              25, "female", 24.3, 3, "no", "southwest"}, {
              49, "female", 34.77, 1, "no", "northwest"}, {
              40, "female", 29.3, 4, "no", "southwest"}, {
              21, "female", 16.815, 1, "no", "northeast"}, {
              31, "female", 26.62, 0, "no", "southeast"}, {
              35, "male", 39.71, 4, "no", "northeast"}, {
              48, "female", 33.11, 0, "yes", "southeast"}, {
              30, "male", 35.53, 0, "yes", "southeast"}, {
              27, "female", 17.955, 2, "yes", "northeast"}, {
              56, "female", 39.82, 0, "no", "southeast"}, {
              53, "male", 36.6, 3, "no", "southwest"}, {
              50, "female", 27.36, 0, "no", "northeast"}, {
              47, "male", 19.19, 1, "no", "northeast"}, {
              56, "male", 25.935, 0, "no", "northeast"}, {
              35, "male", 17.86, 1, "no", "northwest"}, {
              46, "female", 48.07, 2, "no", "northeast"}, {
              47, "female", 36.63, 1, "yes", "southeast"}, {
              38, "male", 31., 1, "no", "southwest"}, {
              48, "female", 27.93, 4, "no", "northwest"}, {
              60, "male", 36.955, 0, "no", "northeast"}, {
              27, "male", 45.9, 2, "no", "southwest"}, {
              43, "female", 20.045, 2, "yes", "northeast"}, {
              45, "male", 33.7, 1, "no", "southwest"}, {
              29, "female", 21.85, 0, "yes", "northeast"}, {
              58, "male", 34.39, 0, "no", "northwest"}, {
              61, "female", 25.08, 0, "no", "southeast"}, {
              47, "female", 36., 1, "no", "southwest"}, {
              59, "male", 29.7, 2, "no", "southeast"}, {
              52, "female", 44.7, 3, "no", "southwest"}, {
              62, "female", 33.2, 0, "no", "southwest"}, {
              52, "female", 46.75, 5, "no", "southeast"}, {
              30, "male", 31.57, 3, "no", "southeast"}, {
              29, "female", 25.9, 0, "no", "southwest"}, {
              40, "male", 32.775, 1, "yes", "northeast"}, {
              36, "male", 28.595, 3, "no", "northwest"}, {
              47, "female", 23.6, 1, "no", "southwest"}, {
              45, "male", 21.375, 0, "no", "northwest"}, {
              45, "male", 27.5, 3, "no", "southwest"}, {
              49, "female", 31.9, 5, "no", "southwest"}, {
              51, "male", 37., 0, "no", "southwest"}, {
              37, "female", 34.8, 2, "yes", "southwest"}, {
              42, "female", 37.9, 0, "no", "southwest"}, {
              46, "male", 43.89, 3, "no", "southeast"}, {
              18, "male", 23.085, 0, "no", "northeast"}, {
              41, "female", 32.6, 3, "no", "southwest"}, {
              53, "female", 32.3, 2, "no", "northeast"}, {
              19, "male", 30.25, 0, "yes", "southeast"}, {
              25, "male", 26.22, 0, "no", "northeast"}, {
              58, "male", 49.06, 0, "no", "southeast"}, {
              22, "male", 39.5, 0, "no", "southwest"}, {
              42, "male", 26.125, 2, "no", "northeast"}, {
              52, "male", 27.36, 0, "yes", "northwest"}, {
              25, "female", 22.515, 1, "no", "northwest"}, {
              20, "female", 22.42, 0, "yes", "northwest"}, {
              47, "male", 32.3, 1, "no", "southwest"}, {
              49, "female", 21.3, 1, "no", "southwest"}, {
              38, "female", 40.15, 0, "no", "southeast"}, {
              19, "male", 44.88, 0, "yes", "southeast"}, {
              22, "male", 35.6, 0, "yes", "southwest"}, {
              25, "male", 25.84, 1, "no", "northeast"}, {
              38, "male", 29.26, 2, "no", "northwest"}, {
              55, "female", 29.83, 0, "no", "northeast"}, {
              50, "male", 32.3, 1, "yes", "northeast"}, {
              25, "male", 33.33, 2, "yes", "southeast"}, {
              34, "female", 26.41, 1, "no", "northwest"}, {
              60, "female", 24.035, 0, "no", "northwest"}, {
              18, "male", 31.73, 0, "yes", "northeast"}, {
              54, "female", 31.9, 3, "no", "southeast"}, {
              60, "male", 29.64, 0, "no", "northeast"}, {
              56, "female", 25.3, 0, "no", "southwest"}, {
              36, "female", 26.885, 0, "no", "northwest"}, {
              28, "male", 22.515, 2, "no", "northeast"}, {
              50, "female", 27.83, 3, "no", "southeast"}, {
              45, "male", 30.495, 2, "no", "northwest"}, {
              23, "male", 41.91, 0, "no", "southeast"}, {
              18, "female", 26.315, 0, "no", "northeast"}, {
              48, "male", 29.7, 0, "no", "southeast"}, {
              30, "male", 37.8, 2, "yes", "southwest"}, {
              62, "male", 32.015, 0, "yes", "northeast"}, {
              55, "male", 30.685, 0, "yes", "northeast"}, {
              39, "male", 26.22, 1, "no", "northwest"}, {
              56, "female", 41.91, 0, "no", "southeast"}, {
              33, "female", 33.5, 0, "yes", "southwest"}, {
              35, "male", 34.77, 2, "no", "northwest"}, {
              44, "male", 25.365, 1, "no", "northwest"}, {
              51, "male", 24.795, 2, "yes", "northwest"}, {
              19, "male", 30.59, 0, "no", "northwest"}, {
              28, "female", 25.935, 1, "no", "northwest"}, {
              28, "male", 26.98, 2, "no", "northeast"}, {
              29, "male", 34.4, 0, "yes", "southwest"}, {
              28, "female", 26.315, 3, "no", "northwest"}, {
              49, "male", 25.84, 2, "yes", "northwest"}, {
              54, "male", 34.21, 2, "yes", "southeast"}, {
              19, "male", 20.615, 2, "no", "northwest"}, {
              49, "female", 41.47, 4, "no", "southeast"}, {
              55, "male", 38.28, 0, "no", "southeast"}, {
              47, "female", 32., 1, "no", "southwest"}, {
              19, "male", 26.03, 1, "yes", "northwest"}, {
              23, "male", 32.56, 0, "no", "southeast"}, {
              40, "female", 33., 3, "no", "southeast"}, {
              35, "female", 38.095, 2, "no", "northeast"}, {
              45, "female", 25.7, 3, "no", "southwest"}, {
              53, "male", 34.105, 0, "yes", "northeast"}, {
              32, "male", 30.03, 1, "no", "southeast"}, {
              62, "female", 32.965, 3, "no", "northwest"}, {
              56, "male", 32.11, 1, "no", "northeast"}, {
              50, "male", 36.2, 0, "no", "southwest"}, {
              57, "male", 28.975, 0, "yes", "northeast"}, {
              35, "male", 34.32, 3, "no", "southeast"}, {
              23, "male", 31.73, 3, "yes", "northeast"}, {
              39, "female", 32.5, 1, "no", "southwest"}, {
              56, "male", 39.6, 0, "no", "southwest"}, {
              36, "male", 41.895, 3, "yes", "northeast"}, {
              41, "female", 37.1, 2, "no", "southwest"}, {
              44, "female", 25.8, 1, "no", "southwest"}, {
              43, "female", 34.4, 3, "no", "southwest"}, {
              23, "male", 24.51, 0, "no", "northeast"}, {
              34, "male", 27.835, 1, "yes", "northwest"}, {
              23, "male", 27.36, 1, "no", "northwest"}, {
              55, "male", 32.775, 0, "no", "northwest"}, {
              38, "female", 19.95, 2, "no", "northeast"}, {
              36, "female", 29.92, 0, "no", "southeast"}, {
              18, "female", 38.28, 0, "no", "southeast"}, {
              63, "female", 26.22, 0, "no", "northwest"}, {
              55, "male", 28.975, 0, "no", "northeast"}, {
              62, "male", 37.4, 0, "no", "southwest"}, {
              19, "male", 21.755, 0, "no", "northwest"}, {
              54, "female", 47.41, 0, "yes", "southeast"}, {
              35, "male", 28.9, 3, "no", "southwest"}, {
              25, "female", 28.595, 0, "no", "northeast"}, {
              19, "male", 20.425, 0, "no", "northwest"}, {
              46, "male", 39.425, 1, "no", "northeast"}, {
              44, "male", 30.2, 2, "yes", "southwest"}, {
              39, "female", 32.8, 0, "no", "southwest"}, {
              50, "female", 46.09, 1, "no", "southeast"}, {
              32, "female", 24.6, 0, "yes", "southwest"}, {
              36, "female", 22.135, 3, "no", "northeast"}, {
              37, "female", 47.6, 2, "yes", "southwest"}, {
              24, "female", 27.72, 0, "no", "southeast"}, {
              42, "male", 26.9, 0, "no", "southwest"}, {
              32, "male", 28.93, 1, "yes", "southeast"}, {
              39, "male", 21.85, 1, "no", "northwest"}, {
              44, "female", 32.34, 1, "no", "southeast"}, {
              31, "female", 31.065, 0, "no", "northeast"}, {
              42, "female", 24.985, 2, "no", "northwest"}, {
              22, "female", 24.3, 0, "no", "southwest"}, {
              25, "male", 35.625, 0, "no", "northwest"}, {
              22, "female", 39.805, 0, "no", "northeast"}, {
              18, "male", 23.75, 0, "no", "northeast"}, {
              18, "male", 28.31, 1, "no", "northeast"}, {
              45, "male", 23.56, 2, "no", "northeast"}, {
              24, "male", 33.63, 4, "no", "northeast"}, {
              64, "male", 39.16, 1, "no", "southeast"}, {
              19, "male", 22.61, 0, "no", "northwest"}, {
              43, "female", 35.72, 2, "no", "northeast"}, {
              27, "female", 34.8, 1, "no", "southwest"}, {
              28, "female", 34.77, 0, "no", "northwest"}, {
              57, "female", 29.81, 0, "yes", "southeast"}, {
              35, "female", 34.105, 3, "yes", "northwest"}, {
              46, "female", 33.44, 1, "no", "southeast"}, {
              43, "male", 23.2, 0, "no", "southwest"}, {
              19, "female", 28.6, 5, "no", "southwest"}, {
              62, "male", 27.55, 1, "no", "northwest"}, {
              28, "male", 33., 3, "no", "southeast"}, {
              28, "male", 23.8, 2, "no", "southwest"}, {
              55, "female", 40.81, 3, "no", "southeast"}, {
              64, "male", 40.48, 0, "no", "southeast"}, {
              25, "female", 23.465, 0, "no", "northeast"}, {
              28, "male", 35.435, 0, "no", "northeast"}, {
              63, "female", 27.74, 0, "yes", "northeast"}, {
              52, "male", 36.765, 2, "no", "northwest"}, {
              54, "male", 31.6, 0, "no", "southwest"}, {
              47, "male", 36.08, 1, "yes", "southeast"}, {
              46, "female", 33.725, 1, "no", "northeast"}, {
              47, "female", 29.37, 1, "no", "southeast"}, {
              18, "female", 40.185, 0, "no", "northeast"}, {
              59, "male", 24.7, 0, "no", "northeast"}, {
              60, "female", 36.005, 0, "no", "northeast"}, {
              27, "male", 18.905, 3, "no", "northeast"}, {
              42, "male", 35.97, 2, "no", "southeast"}, {
              42, "female", 26.18, 1, "no", "southeast"}, {
              55, "female", 29.7, 2, "no", "southwest"}, {
              26, "female", 28.785, 0, "no", "northeast"}, {
              44, "female", 38.95, 0, "yes", "northwest"}, {
              40, "female", 25.46, 1, "no", "northeast"}, {
              29, "female", 20.235, 2, "no", "northwest"}, {
              62, "male", 30.02, 0, "no", "northwest"}, {
              41, "female", 28.05, 1, "no", "southeast"}, {
              34, "female", 33.25, 1, "no", "northeast"}, {
              20, "female", 24.42, 0, "yes", "southeast"}, {
              44, "female", 27.645, 0, "no", "northwest"}, {
              60, "female", 35.1, 0, "no", "southwest"}, {
              38, "female", 27.265, 1, "no", "northeast"}, {
              29, "male", 35.5, 2, "yes", "southwest"}, {
              33, "male", 24.795, 0, "yes", "northeast"}, {
              53, "male", 28.88, 0, "no", "northwest"}, {
              26, "female", 22.61, 0, "no", "northwest"}, {
              28, "female", 23.845, 2, "no", "northwest"}, {
              31, "male", 38.39, 2, "no", "southeast"}, {
              39, "female", 23.87, 5, "no", "southeast"}, {
              38, "male", 21.12, 3, "no", "southeast"}, {
              30, "male", 37.43, 3, "no", "northeast"}, {
              27, "female", 31.255, 1, "no", "northwest"}, {
              31, "female", 32.775, 2, "no", "northwest"}, {
              33, "male", 30.25, 0, "no", "southeast"}, {
              45, "female", 38.285, 0, "no", "northeast"}, {
              25, "female", 34.485, 0, "no", "northwest"}, {
              56, "female", 27.2, 0, "no", "southwest"}, {
              63, "female", 25.08, 0, "no", "northwest"}, {
              49, "male", 36.85, 0, "no", "southeast"}, {
              21, "male", 26.03, 0, "no", "northeast"}, {
              43, "male", 34.96, 1, "yes", "northeast"}, {
              36, "male", 31.5, 0, "no", "southwest"}, {
              34, "female", 33.7, 1, "no", "southwest"}, {
              35, "male", 38.6, 1, "no", "southwest"}, {
              39, "female", 31.92, 2, "no", "northwest"}, {
              51, "female", 40.66, 0, "no", "northeast"}, {
              47, "female", 27.645, 2, "yes", "northwest"}, {
              32, "female", 44.22, 0, "no", "southeast"}, {
              34, "male", 42.9, 1, "no", "southwest"}, {
              26, "male", 46.53, 1, "no", "southeast"}, {
              47, "male", 25.46, 2, "no", "northeast"}, {
              28, "male", 33.82, 0, "no", "northwest"}, {
              48, "male", 28., 1, "yes", "southwest"}, {
              26, "female", 29.64, 4, "no", "northeast"}, {
              22, "male", 25.175, 0, "no", "northwest"}, {
              25, "female", 33.99, 1, "no", "southeast"}, {
              18, "male", 25.46, 0, "no", "northeast"}, {
              46, "male", 27.6, 0, "no", "southwest"}, {
              53, "female", 26.7, 2, "no", "southwest"}, {
              61, "male", 35.86, 0, "yes", "southeast"}, {
              28, "female", 24.32, 1, "no", "northeast"}, {
              34, "female", 29.26, 3, "no", "southeast"}, {
              64, "male", 33.88, 0, "yes", "southeast"}, {
              42, "female", 29., 1, "no", "southwest"}, {
              50, "male", 30.97, 3, "no", "northwest"}, {
              64, "male", 24.7, 1, "no", "northwest"}, {
              53, "female", 38.06, 3, "no", "southeast"}, {
              53, "female", 37.43, 1, "no", "northwest"}, {
              39, "female", 18.3, 5, "yes", "southwest"}, {
              18, "male", 37.29, 0, "no", "southeast"}, {
              53, "female", 39.6, 1, "no", "southeast"}, {
              34, "male", 25.27, 1, "no", "northwest"}, {
              46, "male", 38.17, 2, "no", "southeast"}, {
              33, "female", 36.29, 3, "no", "northeast"}, {
              42, "male", 28.31, 3, "yes", "northwest"}, {
              20, "female", 37., 5, "no", "southwest"}, {
              23, "male", 17.385, 1, "no", "northwest"}, {
              33, "male", 29.4, 4, "no", "southwest"}, {
              35, "male", 27.61, 1, "no", "southeast"}, {
              33, "male", 42.4, 5, "no", "southwest"}, {
              26, "male", 32.49, 1, "no", "northeast"}, {
              45, "female", 35.3, 0, "no", "southwest"}, {
              29, "male", 37.29, 2, "no", "southeast"}, {
              62, "female", 26.29, 0, "yes", "southeast"}, {
              23, "male", 26.51, 0, "no", "southeast"}, {
              52, "female", 25.3, 2, "yes", "southeast"}, {
              51, "female", 36.67, 2, "no", "northwest"}, {
              18, "female", 24.09, 1, "no", "southeast"}, {
              45, "male", 24.31, 5, "no", "southeast"}, {
              41, "female", 28.31, 1, "no", "northwest"}, {
              36, "female", 29.92, 1, "no", "southeast"}, {
              39, "female", 41.8, 0, "no", "southeast"}, {
              31, "male", 28.595, 1, "no", "northwest"}, {
              28, "female", 37.62, 1, "no", "southeast"}, {
              51, "male", 39.7, 1, "no", "southwest"}, {
              48, "male", 36.67, 1, "no", "northwest"}, {
              47, "male", 38.94, 2, "yes", "southeast"}, {
              64, "female", 31.3, 2, "yes", "southwest"}, {
              44, "male", 39.52, 0, "no", "northwest"}, {
              30, "female", 33.33, 1, "no", "southeast"}, {
              51, "female", 37.05, 3, "yes", "northeast"}, {
              34, "male", 35.815, 0, "no", "northwest"}, {
              45, "male", 30.2, 1, "no", "southwest"}, {
              59, "female", 34.8, 2, "no", "southwest"}, {
              30, "male", 38.83, 1, "no", "southeast"}, {
              46, "male", 42.35, 3, "yes", "southeast"}, {
              51, "female", 36.385, 3, "no", "northwest"}, {
              64, "male", 34.5, 0, "no", "southwest"}, {
              19, "female", 35.15, 0, "no", "northwest"}, {
              52, "female", 24.86, 0, "no", "southeast"}, {
              58, "female", 32.965, 0, "no", "northeast"}, {
              26, "male", 31.065, 0, "no", "northwest"}, {
              45, "female", 25.175, 2, "no", "northeast"}, {
              18, "female", 26.73, 0, "no", "southeast"}, {
              22, "male", 37.07, 2, "yes", "southeast"}, {
              19, "male", 30.59, 0, "no", "northwest"}, {
              27, "female", 32.395, 1, "no", "northeast"}, {
              51, "male", 35.97, 1, "no", "southeast"}, {
              44, "male", 38.06, 1, "no", "southeast"}, {
              24, "female", 27.6, 0, "no", "southwest"}, {
              52, "male", 32.775, 3, "no", "northwest"}, {
              35, "female", 23.465, 2, "no", "northeast"}, {
              54, "female", 24.605, 3, "no", "northwest"}, {
              46, "female", 30.2, 2, "no", "southwest"}, {
              55, "male", 29.9, 0, "no", "southwest"}, {
              51, "female", 21.56, 1, "no", "southeast"}, {
              37, "male", 46.53, 3, "no", "southeast"}, {
              19, "female", 21.7, 0, "yes", "southwest"}, {
              47, "female", 33.915, 3, "no", "northwest"}, {
              49, "male", 28.7, 1, "no", "southwest"}, {
              28, "male", 24.3, 5, "no", "southwest"}, {
              18, "female", 30.305, 0, "no", "northeast"}, {
              24, "female", 26.6, 0, "no", "northeast"}, {
              49, "female", 36.63, 3, "no", "southeast"}, {
              39, "female", 26.315, 2, "no", "northwest"}, {
              50, "male", 27.455, 1, "no", "northeast"}, {
              19, "male", 35.53, 0, "no", "northwest"}, {
              31, "male", 39.49, 1, "no", "southeast"}, {
              59, "female", 27.83, 3, "no", "southeast"}, {
              26, "female", 22.23, 0, "no", "northwest"}, {
              18, "female", 31.35, 4, "no", "northeast"}, {
              18, "male", 43.01, 0, "no", "southeast"}, {
              19, "female", 24.51, 1, "no", "northwest"}, {
              31, "male", 25.935, 1, "no", "northwest"}, {
              23, "male", 50.38, 1, "no", "southeast"}, {
              54, "female", 30.8, 3, "no", "southwest"}, {
              32, "male", 33.63, 1, "yes", "northeast"}, {
              56, "male", 31.79, 2, "yes", "southeast"}, {
              19, "male", 20.7, 0, "no", "southwest"}, {
              23, "female", 34.96, 3, "no", "northwest"}, {
              55, "female", 26.98, 0, "no", "northwest"}, {
              18, "female", 33.88, 0, "no", "southeast"}, {
              19, "male", 34.8, 0, "yes", "southwest"}, {
              42, "male", 31.255, 0, "no", "northwest"}, {
              19, "female", 31.825, 1, "no", "northwest"}, {
              32, "female", 23.65, 1, "no", "southeast"}, {
              53, "male", 24.32, 0, "no", "northwest"}, {
              49, "male", 30.3, 0, "no", "southwest"}, {
              29, "male", 33.345, 2, "no", "northwest"}, {
              43, "female", 32.56, 3, "yes", "southeast"}, {
              34, "male", 27., 2, "no", "southwest"}, {
              22, "male", 26.84, 0, "no", "southeast"}, {
              21, "male", 22.3, 1, "no", "southwest"}, {
              34, "male", 25.3, 2, "yes", "southeast"}, {
              33, "male", 35.75, 1, "yes", "southeast"}, {
              39, "male", 32.34, 2, "no", "southeast"}, {
              25, "female", 20.8, 1, "no", "southwest"}, {
              19, "male", 19.8, 0, "no", "southwest"}, {
              61, "male", 43.4, 0, "no", "southwest"}, {
              36, "male", 34.43, 2, "no", "southeast"}, {
              45, "female", 33.1, 0, "no", "southwest"}, {
              20, "female", 31.46, 0, "no", "southeast"}, {
              50, "female", 33.7, 4, "no", "southwest"}, {
              19, "female", 18.6, 0, "no", "southwest"}, {
              19, "male", 24.6, 1, "no", "southwest"}, {
              29, "female", 27.94, 1, "yes", "southeast"}, {
              57, "female", 25.74, 2, "no", "southeast"}, {
              64, "female", 31.825, 2, "no", "northeast"}, {
              44, "female", 23.98, 2, "no", "southeast"}, {
              61, "male", 33.915, 0, "no", "northeast"}, {
              35, "male", 27.1, 1, "no", "southwest"}, {
              42, "female", 41.325, 1, "no", "northeast"}, {
              20, "female", 28.785, 0, "no", "northeast"}, {
              19, "male", 27.7, 0, "yes", "southwest"}, {
              40, "male", 24.97, 2, "no", "southeast"}, {
              19, "female", 24.7, 0, "no", "southwest"}, {
              31, "female", 25.8, 2, "no", "southwest"}, {
              18, "male", 21.78, 2, "no", "southeast"}, {
              27, "female", 36.08, 0, "yes", "southeast"}, {
              18, "male", 34.1, 0, "no", "southeast"}, {
              47, "male", 36.19, 0, "yes", "southeast"}, {
              26, "male", 17.67, 0, "no", "northwest"}, {
              45, "male", 30.36, 0, "yes", "southeast"}, {
              26, "female", 29.92, 2, "no", "southeast"}, {
              63, "female", 35.2, 1, "no", "southeast"}, {
              18, "male", 38.17, 0, "yes", "southeast"}, {
              56, "female", 35.8, 1, "no", "southwest"}, {
              26, "male", 20.8, 0, "no", "southwest"}, {
              26, "male", 29.45, 0, "no", "northeast"}, {
              40, "male", 32.3, 2, "no", "northwest"}, {
              21, "female", 33.63, 2, "no", "northwest"}, {
              59, "female", 36.52, 1, "no", "southeast"}, {
              49, "male", 22.515, 0, "no", "northeast"}, {
              32, "female", 29.8, 2, "no", "southwest"}, {
              19, "male", 33.1, 0, "no", "southwest"}, {
              40, "female", 29.6, 0, "no", "southwest"}, {
              45, "male", 20.35, 3, "no", "southeast"}, {
              48, "female", 25.85, 3, "yes", "southeast"}, {
              19, "female", 30.495, 0, "no", "northwest"}, {
              19, "male", 25.175, 0, "no", "northwest"}, {
              24, "male", 31.065, 0, "yes", "northeast"}, {
              51, "female", 34.1, 0, "no", "southeast"}, {
              29, "female", 32.11, 2, "no", "northwest"}, {
              57, "female", 23.18, 0, "no", "northwest"}, {
              27, "male", 33.155, 2, "no", "northwest"}, {
              29, "female", 31.16, 0, "no", "northeast"}, {
              26, "male", 33.915, 1, "no", "northwest"}, {
              37, "male", 34.1, 4, "yes", "southwest"}, {
              21, "male", 25.7, 4, "yes", "southwest"}, {
              22, "female", 30.4, 0, "yes", "northwest"}, {
              51, "male", 33.33, 3, "no", "southeast"}, {
              60, "male", 24.32, 0, "no", "northwest"}, {
              23, "male", 35.2, 1, "no", "southwest"}, {
              55, "male", 33.88, 3, "no", "southeast"}, {
              49, "male", 25.84, 1, "no", "northeast"}, {
              26, "male", 35.42, 0, "no", "southeast"}, {
              42, "male", 24.64, 0, "yes", "southeast"}, {
              62, "male", 39.93, 0, "no", "southeast"}, {
              59, "male", 37.1, 1, "no", "southwest"}, {
              38, "female", 40.565, 1, "no", "northwest"}, {
              30, "female", 27.7, 0, "no", "southwest"}, {
              46, "female", 34.6, 1, "yes", "southwest"}, {
              18, "male", 23.21, 0, "no", "southeast"}, {
              57, "female", 38., 2, "no", "southwest"}, {
              59, "male", 31.79, 2, "no", "southeast"}, {
              62, "female", 29.92, 0, "no", "southeast"}, {
              48, "female", 32.23, 1, "no", "southeast"}, {
              49, "male", 29.83, 1, "no", "northeast"}, {
              21, "female", 21.85, 1, "yes", "northeast"}, {
              23, "female", 42.75, 1, "yes", "northeast"}, {
              35, "male", 24.42, 3, "yes", "southeast"}, {
              47, "male", 19.57, 1, "no", "northwest"}, {
              48, "male", 37.29, 2, "no", "southeast"}, {
              31, "male", 26.885, 1, "no", "northeast"}, {
              50, "female", 28.16, 3, "no", "southeast"}, {
              54, "female", 35.815, 3, "no", "northwest"}, {
              57, "male", 18.335, 0, "no", "northeast"}, {
              34, "male", 34.21, 0, "no", "southeast"}, {
              34, "female", 23.56, 0, "no", "northeast"}, {
              52, "male", 32.205, 3, "no", "northeast"}, {
              63, "male", 41.325, 3, "no", "northwest"}, {
              29, "female", 29.59, 1, "no", "southeast"}, {
              31, "female", 32.68, 1, "no", "northwest"}, {
              27, "male", 28.5, 0, "yes", "northwest"}, {
              56, "male", 26.695, 1, "yes", "northwest"}, {
              50, "male", 37.07, 1, "no", "southeast"}, {
              34, "male", 42.13, 2, "no", "southeast"}, {
              25, "male", 30.59, 0, "no", "northeast"}, {
              18, "male", 39.14, 0, "no", "northeast"}, {
              52, "male", 33.25, 0, "no", "northeast"}, {
              52, "female", 31.73, 2, "no", "northwest"}, {
              18, "female", 35.625, 0, "no", "northeast"}, {
              28, "female", 26.51, 2, "no", "southeast"}, {
              44, "male", 29.735, 2, "no", "northeast"}, {
              37, "female", 25.555, 1, "yes", "northeast"}, {
              39, "male", 42.655, 0, "no", "northeast"}, {
              49, "female", 27.1, 1, "no", "southwest"}, {
              22, "female", 36., 0, "no", "southwest"}, {
              18, "male", 17.29, 2, "yes", "northeast"}, {
              40, "male", 35.3, 3, "no", "southwest"}, {
              40, "female", 32.775, 2, "yes", "northwest"}, {
              58, "male", 32.01, 1, "no", "southeast"}, {
              18, "male", 23.32, 1, "no", "southeast"}, {
              40, "male", 19.8, 1, "yes", "southeast"}, {
              43, "male", 27.36, 3, "no", "northeast"}, {
              20, "female", 31.92, 0, "no", "northwest"}, {
              22, "female", 27.1, 0, "no", "southwest"}, {
              54, "female", 27.645, 1, "no", "northwest"}, {
              63, "male", 33.66, 3, "no", "southeast"}, {
              37, "male", 36.19, 0, "no", "southeast"}, {
              30, "female", 28.38, 1, "yes", "southeast"}, {
              64, "female", 35.97, 0, "no", "southeast"}, {
              62, "male", 32.11, 0, "no", "northeast"}, {
              51, "female", 37.73, 1, "no", "southeast"}, {
              22, "female", 20.235, 0, "no", "northwest"}, {
              29, "male", 32.11, 2, "no", "northwest"}, {
              33, "male", 33.44, 5, "no", "southeast"}, {
              37, "male", 28.025, 2, "no", "northwest"}, {
              49, "female", 42.68, 2, "no", "southeast"}, {
              42, "male", 34.1, 0, "no", "southwest"}, {
              28, "female", 33., 2, "no", "southeast"}, {
              31, "female", 25.74, 0, "no", "southeast"}, {
              50, "female", 25.6, 0, "no", "southwest"}, {
              48, "male", 35.625, 4, "no", "northeast"}, {
              44, "male", 22.135, 2, "no", "northeast"}, {
              34, "male", 22.42, 2, "no", "northeast"}, {
              19, "male", 28.4, 1, "no", "southwest"}, {
              56, "female", 25.65, 0, "no", "northwest"}, {
              58, "male", 28.595, 0, "no", "northwest"}, {
              51, "male", 30.03, 1, "no", "southeast"}, {
              19, "female", 32.11, 0, "no", "northwest"}, {
              49, "male", 32.3, 3, "no", "northwest"}, {
              52, "female", 30.78, 1, "no", "northeast"}, {
              19, "female", 28.88, 0, "yes", "northwest"}, {
              30, "male", 24.13, 1, "no", "northwest"}, {
              38, "male", 27.835, 2, "no", "northwest"}, {
              61, "female", 36.385, 1, "yes", "northeast"}, {
              62, "female", 36.86, 1, "no", "northeast"}, {
              63, "male", 36.765, 0, "no", "northeast"}, {
              24, "female", 30.21, 3, "no", "northwest"}, {
              24, "male", 35.86, 0, "no", "southeast"}, {
              36, "female", 27.74, 0, "no", "northeast"}, {
              45, "male", 24.035, 2, "no", "northeast"}, {
              64, "female", 22.99, 0, "yes", "southeast"}, {
              42, "female", 29.48, 2, "no", "southeast"}, {
              54, "male", 32.775, 0, "no", "northeast"}, {
              63, "female", 37.7, 0, "yes", "southwest"}, {
              26, "female", 19.8, 1, "no", "southwest"}, {
              40, "female", 23.37, 3, "no", "northeast"}, {
              20, "female", 28.975, 0, "no", "northwest"}, {
              27, "female", 20.045, 3, "yes", "northwest"}, {
              47, "female", 26.6, 2, "no", "northeast"}, {
              23, "female", 39.27, 2, "no", "southeast"}, {
              61, "female", 39.1, 2, "no", "southwest"}, {
              64, "female", 30.115, 3, "no", "northwest"}, {
              21, "male", 36.86, 0, "no", "northwest"}, {
              52, "female", 23.18, 0, "no", "northeast"}, {
              43, "male", 20.13, 2, "yes", "southeast"}, {
              41, "male", 34.21, 1, "no", "southeast"}, {
              24, "male", 32.7, 0, "yes", "southwest"}, {
              24, "female", 24.225, 0, "no", "northwest"}, {
              22, "female", 28.82, 0, "no", "southeast"}, {
              35, "female", 35.86, 2, "no", "southeast"}, {
              18, "female", 40.28, 0, "no", "northeast"}, {
              58, "female", 22.77, 0, "no", "southeast"}, {
              52, "female", 38.38, 2, "no", "northeast"}, {
              63, "male", 21.66, 1, "no", "northwest"}, {
              30, "female", 19.95, 3, "no", "northwest"}, {
              21, "male", 31.02, 0, "no", "southeast"}, {
              63, "female", 36.85, 0, "no", "southeast"}, {
              36, "female", 19.855, 0, "no", "northeast"}, {
              18, "male", 28.5, 0, "no", "northeast"}, {
              35, "male", 27.74, 2, "yes", "northeast"}, {
              18, "male", 29.37, 1, "no", "southeast"}, {
              37, "male", 30.875, 3, "no", "northwest"}, {
              50, "female", 44.745, 0, "no", "northeast"}, {
              45, "female", 28.6, 2, "no", "southeast"}, {
              55, "female", 37.1, 0, "no", "southwest"}, {
              63, "female", 21.66, 0, "no", "northeast"}, {
              57, "female", 30.495, 0, "no", "northwest"}, {
              46, "male", 33.345, 1, "no", "northeast"}, {
              60, "female", 28.7, 1, "no", "southwest"}, {
              60, "female", 32.45, 0, "yes", "southeast"}, {
              40, "male", 29.9, 2, "no", "southwest"}, {
              53, "male", 30.495, 0, "no", "northeast"}, {
              56, "female", 28.595, 0, "no", "northeast"}, {
              40, "female", 27.4, 1, "no", "southwest"}, {
              57, "female", 31.16, 0, "yes", "northwest"}, {
              19, "female", 30.02, 0, "yes", "northwest"}, {
              53, "female", 36.86, 3, "yes", "northwest"}, {
              51, "male", 32.3, 1, "no", "northeast"}, {
              36, "female", 29.04, 4, "no", "southeast"}, {
              18, "male", 21.565, 0, "yes", "northeast"}, {
              28, "male", 36.4, 1, "yes", "southwest"}, {
              22, "female", 21.28, 3, "no", "northwest"}, {
              59, "female", 26.695, 3, "no", "northwest"}, {
              23, "female", 23.18, 2, "no", "northwest"}, {
              61, "male", 31.57, 0, "no", "southeast"}, {
              53, "female", 35.9, 2, "no", "southwest"}, {
              48, "male", 40.565, 2, "yes", "northwest"}, {
              25, "male", 33.66, 4, "no", "southeast"}, {
              37, "female", 30.8, 2, "no", "southeast"}, {
              29, "male", 28.975, 1, "no", "northeast"}, {
              24, "male", 28.5, 2, "no", "northwest"}, {
              40, "male", 30.875, 4, "no", "northwest"}, {
              32, "female", 28.93, 0, "no", "southeast"}, {
              45, "female", 35.815, 0, "no", "northwest"}, {
              60, "female", 30.5, 0, "no", "southwest"}, {
              48, "female", 28.9, 0, "no", "southwest"}, {
              47, "male", 29.8, 3, "yes", "southwest"}, {
              24, "male", 25.8, 0, "no", "southwest"}, {
              34, "male", 21.375, 0, "no", "northeast"}, {
              37, "female", 34.105, 1, "no", "northwest"}, {
              36, "male", 29.7, 0, "no", "southeast"}, {
              38, "male", 19.3, 0, "yes", "southwest"}, {
              53, "male", 20.9, 0, "yes", "southeast"}, {
              37, "female", 26.4, 0, "yes", "southeast"}, {
              19, "male", 28.7, 0, "no", "southwest"}, {
              29, "male", 29.64, 1, "no", "northeast"}, {
              18, "female", 38.28, 0, "no", "southeast"}, {
              33, "female", 39.82, 1, "no", "southeast"}, {
              34, "male", 32.8, 1, "no", "southwest"}, {
              29, "female", 26.03, 0, "no", "northwest"}, {
              39, "male", 29.925, 1, "yes", "northeast"}, {
              18, "male", 53.13, 0, "no", "southeast"}, {
              20, "male", 27.93, 0, "no", "northeast"}, {
              47, "male", 47.52, 1, "no", "southeast"}, {
              42, "male", 24.605, 2, "yes", "northeast"}, {
              47, "female", 27.83, 0, "yes", "southeast"}, {
              33, "female", 42.94, 3, "no", "northwest"}, {
              58, "male", 34.865, 0, "no", "northeast"}, {
              41, "female", 32.965, 0, "no", "northwest"}, {
              23, "male", 23.845, 0, "no", "northeast"}, {
              25, "female", 30.3, 0, "no", "southwest"}, {
              18, "male", 30.4, 3, "no", "northeast"}, {
              45, "female", 31.79, 0, "no", "southeast"}, {
              36, "male", 30.875, 1, "no", "northwest"}, {
              20, "female", 26.84, 1, "yes", "southeast"}, {
              44, "male", 37.1, 2, "no", "southwest"}, {
              61, "male", 33.535, 0, "no", "northeast"}, {
              49, "male", 35.86, 0, "no", "southeast"}, {
              19, "female", 28.31, 0, "yes", "northwest"}, {
              32, "female", 29.735, 0, "no", "northwest"}, {
              55, "female", 32.395, 1, "no", "northeast"}, {
              23, "female", 33.4, 0, "no", "southwest"}, {
              38, "female", 27.835, 2, "no", "northeast"}, {
              59, "male", 27.5, 1, "no", "southwest"}, {
              20, "male", 29.735, 0, "no", "northwest"}, {
              39, "female", 22.8, 3, "no", "northeast"}, {
              33, "male", 22.705, 0, "no", "northwest"}, {
              43, "female", 26.885, 0, "yes", "northwest"}, {
              43, "female", 24.7, 2, "yes", "northwest"}, {
              49, "female", 22.61, 1, "no", "northwest"}, {
              62, "male", 31.46, 1, "no", "southeast"}, {
              42, "female", 33.155, 1, "no", "northeast"}, {
              24, "male", 29.3, 0, "no", "southwest"}, {
              18, "male", 22.99, 0, "no", "northeast"}, {
              35, "female", 43.34, 2, "no", "southeast"}, {
              53, "male", 28.6, 3, "no", "southwest"}, {
              27, "male", 29.15, 0, "yes", "southeast"}, {
              22, "male", 31.73, 0, "no", "northeast"}, {
              34, "female", 27.72, 0, "no", "southeast"}, {
              37, "male", 29.83, 2, "no", "northeast"}, {
              40, "female", 41.42, 1, "no", "northwest"}, {
              20, "male", 28.025, 1, "yes", "northwest"}, {
              20, "male", 35.31, 1, "no", "southeast"}, {
              46, "male", 30.495, 3, "yes", "northwest"}, {
              31, "male", 28.5, 5, "no", "northeast"}, {
              61, "male", 23.655, 0, "no", "northeast"}, {
              18, "male", 31.68, 2, "yes", "southeast"}, {
              45, "male", 39.805, 0, "no", "northeast"}, {
              35, "female", 28.025, 0, "yes", "northwest"}, {
              19, "male", 20.3, 0, "no", "southwest"}, {
              18, "male", 34.43, 0, "no", "southeast"}, {
              48, "female", 28.88, 1, "no", "northwest"}, {
              37, "female", 30.78, 0, "yes", "northeast"}, {
              42, "male", 26.07, 1, "yes", "southeast"}, {
              40, "female", 29.81, 1, "no", "southeast"}, {
              30, "female", 21.945, 1, "no", "northeast"}, {
              37, "male", 22.705, 3, "no", "northeast"}, {
              33, "female", 32.9, 2, "no", "southwest"}, {
              53, "male", 31.35, 0, "no", "southeast"}, {
              26, "male", 30., 1, "no", "southwest"}, {
              43, "male", 25.52, 5, "no", "southeast"}, {
              45, "male", 22.895, 0, "yes", "northeast"}, {
              31, "female", 21.755, 0, "no", "northwest"}, {
              18, "female", 31.35, 0, "no", "southeast"}, {
              56, "male", 34.43, 0, "no", "southeast"}, {
              33, "female", 35.53, 0, "yes", "northwest"}, {
              20, "female", 21.8, 0, "yes", "southwest"}, {
              54, "male", 30.21, 0, "no", "northwest"}, {
              38, "male", 19.95, 1, "no", "northwest"}, {
              26, "female", 42.4, 1, "no", "southwest"}, {
              20, "female", 30.59, 0, "no", "northeast"}, {
              21, "female", 26.4, 1, "no", "southwest"}, {
              40, "male", 41.23, 1, "no", "northeast"}, {
              39, "female", 34.32, 5, "no", "southeast"}, {
              34, "female", 27.5, 1, "no", "southwest"}, {
              44, "male", 30.69, 2, "no", "southeast"}, {
              64, "male", 36.96, 2, "yes", "southeast"}, {
              38, "male", 28.025, 1, "no", "northeast"}, {
              55, "female", 30.5, 0, "no", "southwest"}, {
              33, "male", 27.455, 2, "no", "northwest"}, {
              53, "female", 24.795, 1, "no", "northwest"}, {
              40, "female", 36.19, 0, "no", "southeast"}, {
              51, "male", 25.4, 0, "no", "southwest"}, {
              36, "male", 35.2, 1, "yes", "southeast"}, {
              48, "male", 24.42, 0, "yes", "southeast"}, {
              58, "female", 28.215, 0, "no", "northwest"}, {
              31, "male", 31.065, 3, "no", "northwest"}, {
              59, "male", 25.46, 1, "no", "northeast"}, {
              18, "male", 27.36, 1, "yes", "northeast"}, {
              22, "male", 31.35, 1, "no", "northwest"}, {
              19, "female", 22.515, 0, "no", "northwest"}, {
              27, "male", 30.5, 0, "no", "southwest"}, {
              26, "male", 32.9, 2, "yes", "southwest"}, {
              25, "female", 30.2, 0, "yes", "southwest"}, {
              38, "male", 37.05, 1, "no", "northeast"}, {
              48, "male", 30.78, 3, "no", "northeast"}, {
              54, "male", 24.035, 0, "no", "northeast"}, {
              63, "female", 31.8, 0, "no", "southwest"}, {
              60, "male", 32.8, 0, "yes", "southwest"}, {
              28, "female", 33.11, 0, "no", "southeast"}, {
              18, "female", 39.16, 0, "no", "southeast"}, {
              54, "female", 32.68, 0, "no", "northeast"}, {
              29, "male", 27.94, 0, "no", "southeast"}, {
              58, "male", 35.7, 0, "no", "southwest"}, {
              30, "male", 35.3, 0, "yes", "southwest"}, {
              42, "female", 36.195, 1, "no", "northwest"}, {
              32, "female", 17.765, 2, "yes", "northwest"}, {
              52, "male", 30.2, 1, "no", "southwest"}, {
              52, "female", 18.335, 0, "no", "northwest"}, {
              32, "male", 37.335, 1, "no", "northeast"}, {
              32, "female", 41.1, 0, "no", "southwest"}, {
              53, "male", 41.47, 0, "no", "southeast"}, {
              32, "male", 31.5, 1, "no", "southwest"}, {
              30, "male", 44.22, 2, "no", "southeast"}, {
              52, "male", 36.7, 0, "no", "southwest"}, {
              55, "female", 25.365, 3, "no", "northeast"}, {
              51, "male", 23.21, 1, "yes", "southeast"}, {
              43, "male", 38.06, 2, "yes", "southeast"}, {
              30, "male", 22.99, 2, "yes", "northwest"}, {
              19, "male", 34.9, 0, "yes", "southwest"}, {
              26, "female", 29.355, 2, "no", "northeast"}, {
              31, "male", 36.3, 2, "yes", "southwest"}, {
              30, "female", 32.4, 1, "no", "southwest"}, {
              39, "male", 35.3, 2, "yes", "southwest"}, {
              37, "female", 27.74, 3, "no", "northwest"}, {
              39, "male", 45.43, 2, "no", "southeast"}, {
              24, "female", 39.49, 0, "no", "southeast"}, {
              27, "male", 33.66, 0, "no", "southeast"}, {
              22, "male", 28.31, 1, "no", "northwest"}, {
              41, "male", 35.75, 1, "yes", "southeast"}, {
              26, "female", 29.92, 1, "no", "southeast"}, {
              44, "female", 25., 1, "no", "southwest"}, {
              18, "male", 33.77, 1, "no", "southeast"}, {
              61, "female", 44., 0, "no", "southwest"}, {
              36, "male", 33.4, 2, "yes", "southwest"}, {
              29, "male", 29.735, 2, "no", "northwest"}, {
              34, "female", 19., 3, "no", "northeast"}, {
              26, "female", 29.48, 1, "no", "southeast"}, {
              38, "female", 28., 3, "no", "southwest"}, {
              55, "male", 33., 0, "no", "southeast"}, {
              19, "male", 20.9, 1, "no", "southwest"}, {
              55, "male", 35.245, 1, "no", "northeast"}, {
              42, "female", 23.37, 0, "yes", "northeast"}, {
              54, "female", 32.3, 1, "no", "northeast"}, {
              19, "male", 34.1, 0, "no", "southwest"}, {
              62, "female", 39.2, 0, "no", "southwest"}, {
              30, "female", 22.895, 1, "no", "northeast"}, {
              59, "female", 35.2, 0, "no", "southeast"}, {
              49, "female", 30.78, 1, "no", "northeast"}, {
              18, "male", 30.03, 1, "no", "southeast"}, {
              54, "male", 30.8, 1, "yes", "southeast"}, {
              36, "male", 28.88, 3, "no", "northeast"}, {
              43, "male", 30.1, 1, "no", "southwest"}, {
              41, "male", 21.78, 1, "no", "southeast"}, {
              39, "male", 34.1, 2, "no", "southeast"}, {
              30, "female", 28.405, 1, "no", "northwest"}, {
              19, "female", 40.5, 0, "no", "southwest"}, {
              21, "male", 28.975, 0, "no", "northwest"}, {
              23, "female", 31.4, 0, "yes", "southwest"}, {
              62, "female", 32.68, 0, "no", "northwest"}, {
              40, "male", 25.08, 0, "no", "southeast"}, {
              29, "female", 35.53, 0, "no", "southeast"}, {
              20, "male", 32.395, 1, "no", "northwest"}, {
              37, "female", 29.5, 2, "no", "southwest"}, {
              44, "male", 34.32, 1, "no", "southeast"}}, 
            "Output" -> CompressedData["
1:eJw9WXdcjf3/NvNkZ5UdMjKLzMhlZJQQmSFFoicjM0TZZCahoT206zRPnep0
dntrotNEUVY9ZHw/vc/v9eufXq+678+83td43xMsjm+x7N6tWzf7nt26JY27
0TxBNwtKQ4YtTxstxtzGyMnl7VJocH/d0hJL0FAwserHXAnYn+tdDDJxtKkz
5PzcdIQEbMQB4xiMzWxYfvCVEB1KZs9NZkug964ifOKOdLTdyDR5Pycby+fv
S9Z0lOKWfJKFhVsLsoQrI7ZxcjDLtPmujkUFNt9/dkwwTYJtGS8DNsb6oNf2
gbPm+rrgtYbSFVeLCCzrW+bvaC4AG2a9PVcKzovW4KDcOFwcPnIsz4OH/wQH
Q00iiqHsNP7Avvhk3J/2ccBNy0T4P17SfdbzOGhtCOrb/3gDZpa4Ny5pqkFF
XsfWScIgnHFR6yWZLEPUE8vbsfMCcGfF/obBX8qg/U/4GPfx2Uhe37+HS2Y5
Pu1eqafVLoaaa4nyNP00tD977RJtWYdFVquPrB2bg9FzXmvcvBEHT79JXB0Z
F6EDuSP/7qih+fWDY9HN+XLnybdSyC8Mi5SaeSNyrfzCaRM5OpecyDu9QoTL
YxdZHVzBQUHp9pa175vwUmK40NZPhH9ntD/b+zgOFWZnN33i8WF3IXBmol0t
Fo7im/o8lYNNq9R9nj+2sAssDopBru7GwtiJxUjLUJ2iK0/EN5vtl6ZrV8P5
o/3y+Efe4J12UbtXkEn7bj+XDKcH9V92pCXhV8jnooeb61B/zSs3uSEbF4dF
rtWOF+HkvGpH0/ES/Ot+zjMvWoqzm8aNWHIpDvcMPvSqFkmw9emEB2fWl+P0
mifthzZlYR3b4D79ILjUbXx/QlMOdo2c10NjaR7dC6/x/NiQa1gaTONMN0qg
cffz6nCNn+V7Ywof0wb1iw+Ma4KN8g+fczbxSK0bNpa7k0f4CtCW4DDbSHoI
Dwd132766BSNYcsl1fHzI5EZ7bTQuqMUa3va9fM5JUDC198ldlb+0MweLP0S
KsP4G83Gj6zzMW6EtZHDyhIk/6v8o+bzM0w+08N9dUY2fNMsN/aaIafzEQXz
cT4Hlry8LMJJ87cMPKz/Mn6LZhIeCr5PW+qUhDjZ2TSHGyl4vOfPqiW9AnF+
58v5Z/7EIymqZ9NmhxwIbgbvuNDJg20XcPU42Hfg2cvBkgrs6Rrgjzv65I00
npLTQOPZT24iPDwZJ0WPGbdGaNqnQZM9qDmyiXBYOTUK62f/nfBipgRsexpb
ZpTSuch9+TR+rDkPz1+73JocEIuqH5etbeLy8Y1tPypIDkNZn2WDGgvxu/1M
TXV2Ie2nZwAf+mtP/rCJksP+S/TmbbZVVH8csRzmc7dpLSgvoTpr4QipXmY9
z8In++Xz/2Slgi2vYvPNRrrXH9ENhNtkpzKkf4632rK+CvtlH7YHvGnC1oKP
kzVdXhOOlWUvofHs76MToibc/W3ZEb5XhlPsIqs/Seh+LmQlY6KN3QXN9Fzs
Zhfr/UKI1T8/NvsYVoLXe8iwtxtCwGiq2wzDWmhYGGjYXi6ncfL+1FA9rd3/
gvCsNzwFRd3e9FD5XYT+LiFXt30TQG3K1t5T9YWK59q8MIsRR1UPOdK03Kbj
lBgzLUfW8r9JwbY5VlochmUe27zDXH1RdNysj93WIvwpsXsfNDWG7vNLogBD
Kk/OPvIhD8LiGZbv015iy1SfO9GmEXD2kCvN7luMg3ur14i712NMc+0CWd9a
lDZZzzDYlIs7RW9qTEPEVIf63SSIMB5UqDGwAq2ZwpXiCj66yig+Twz22ijH
X7FwYMRw1kaA0KvG63U768GuZ8iqE/HYWOi85+k1MaoPdzvuWivD/i5irgyH
47r0S9e2FRNfNQ9PRSGj66Dz+XBLefqoo1WC6tk6ZfptZYTv0wl8TIg+efiz
XiadS9l6Cdqn7Xm40jCL8LP6uQxnazxVXBs49Jzz3FCqz9BRdRjRmf1J+wkX
+R1b60oj+MQTmQt4OMR+gor5yPbVTzj1SILVd22aDOdkwKQu0OPRqToF7gy4
qJM+Txlol4FZE8Z/y/FzB4P37utD0rHkwq83Xo7VGMImGp75VlHvKwPB6CAo
ZImE3j9g4E51H6idhpX5h0qtisrA/n1+x7BwWPi+0nmbkoPJTC6El9Opfoa3
ZtB5dKrF0/nvYHzdhfO5++Xwzg3Nd60Kwckfg96XLebSelb3k+BcmveounP1
xK+P/eXYsv6F43bleOKlUdaZVDeudjVo//SwIzKyknjN4bWM6ne1txiL2QOF
LnHIWDzJoG5DDOxXb7izc30x5rcu0k85xiedUo/3hOGHXjrmM33p3P2OppF+
zNaso/1KjBuJv9uD69FxpsbTuTkRO1rmpOSHiulcm0fVIkxvh2l38wTid6V9
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
/xqchK5Yer45Bf8DqQ4IyQ==
             "]], "Predictions" -> CompressedData["
1:eJwNl4dfzH8cx4tQNJEUkoo0kJRR4YUQoqFUREllRUMhJUqSUdLSEu29r3HX
uutW47prT1LXkvITDUn0u3/g+/h+vt/3+/l5PjfZOpnY8/Px8Xkt5uMzupy3
zXopG64+XV91ztcjPHRHh581Gxu5SbOsqFpYKUu5SB6vBdFhfo1oZTMCZx2Z
Wg/K8bFiSlZ+dTmu1vOpSBsy8Gr8+i3OGwYqX9gsBMvR0FEYwR2abYZrzzqv
CBkmCmTFj0brDeA/s9dto101MI6UWpN/lIl7QhaZ29cx8NV66uLchlLIWztM
h2wrRZfKmc39UqVgXvSgXVhciw9bXfgVZOsx/t748tzmLBCahOOET6diMz1Z
iKjXgqrn/0UZ/qKjuu/DFt0xOqr0h4i230qRftDmlsnEAEbXUa8vtu7H2l96
hdEkGoq2DKcMUhsheL4uYv+tCjxtdFz9nL8LtIs3+ad+NSBk88NaeYFuhJYr
7Rn8y8T41fFT5/OpiHcxE4ooGkThsLe92HsW/A2uefGpEMEUiRrbnUDEz0U2
I2skGDg6C7lxUhHoTaHc5F7e91gcpn1bm4LZsktbjNR573FHhtp/oA4fZkr8
+8UIWPJtkT0bI+jxTCpNGaxDKV8EkVtbAQHRB1x/eQaC9pzTO27WivHgM/2v
I7lwe7djqFUpH6q5R8TylMtwftrRVHymDbckmjjL/pYjbHLup/yTbjgXGklS
/kQiSc03RnO6Hiqfnw8f3kCCXZm8qtNINWr/S70dKDGIoKdKwu7qHKQKWBxP
sGTj57LcIo9DxTjFTh98HcHEiruX/PcuLsQd6oZ3FWYs2DzNvlZwqBut0z90
LyrVQGu9VosxiuH+ZOV5geZGvNLXujnBIuHnuqkzU5MfEdmkdvz0wXSIt+mo
tdcVgzv3dbfkOy5oBJPGT7w5suSIEgsHRpAyOxEpoVEIh4ULnb4SZVhtJPKO
kt0IYmGmXe+2aihIXzhRLFqFZsXl/XvK87H1feDE2VYK1p9o3eexngkD0ZI0
gePZ2BvudLuZwcakafqEt38j3tJ+TRbKtsKmh7ZMkJuAmhtukrsS2PA4RkzR
yqmDZJrr1yijKiwSr733o7gQiupZQUsO0BEz+S4oxZ2EJrL0Zo8pCpRpyyj/
DjDQXla3fRGdDnUVIfedIWWgCNS3bQpuxh7O2bA+ChXBaav79r/KhobqtOHf
kGpYvAgXs456A12tsakdfcMY1zFboeM4gsropC0bZBkYC3w24C9aCX2Bq9H3
vw0g19HN4b1JCQTDDxyND+EgVtdyTOtbOy6LK9gLZtER/ETsNes4BQVZnGqB
agryGnOJ7PWNIPcdL9tixYW6zyPHHN8mKMSb1M0GNIE16q787QEF8kPbLp3Z
2I9S6bBfQQKdmJg/4ONr2Q+YHwqv5ISCwLG+zS5jgx0luyh+rgFtN8T7SA5M
kJbqeK868gXKK7s32rUOw1pTfHCVcju6AmOk+vJb8WHU6Vei4CCqZPfYXWcx
cEVx/9E9x0qxc9mrXR2CI9gWuyhRSbkRcQ0X17Sn1eJqZWFWsQIBeUH8jhqK
jbizyi1/u2gNXCUf/cjLaEfHJ37Ve4nFCD8iKetwYRCWml/MnrNKkCpb3i3T
248Ahy9ZhPE4PBAy3b8rsgzOqYZR7J/NmOmwOBFdy0CwazpHyLEeNUGRT6Id
o5Ah8/DeD0Uumo7vWriTz8GNJapeB382YCrTOnnDdD7u7zHRUsp5CzszSZLI
uwYIPzvBKZ2jYE2Qi5/5EToiQq/pGAwXI/hl6ZpNgpGwiHv9ffv3FBRJO2oK
OVBx5r7/5hChQdw2YWUk5HChURF4ZH6chTyPZWG2h1n44HzyRZlYDXyiPRRs
SXTIi93afzabgkV5YX+aNDhYKNijzbYmoEHvwUknizq8JmQphd0Yhu4RuziB
1ySMLZ87fCmpBktydsuxXjaiYV/aM/PsKvhuvS47KNkC9a27Asg/q8EobpkM
NG/EcrIe3biTd/4Ms9efRdmQ7V93xNmuGuTCt5bsm3WQT1MNHTeqQyyRVfBP
pxZnFXUedR9j44y5gf6zX/mY1bPz338vF3vfKl8pUB8AY2HDZ4NcMiaEpL/I
GzHwJDTubi63Gjdj9RTkFOkQDrc9QO9gQJnKVNhyiYpKU8O/scoDGDnA4P6Z
K8KUj2zeSWca1AcGCH+agrHT3678eV4xIp20Ir401qC77LpX/FQfNiUMnvf0
LEFQkOI/7tMmqCcKOs3djYOhS9hOmSweX71fL5rt6UTluHSsRwURs9eizDK0
GhH4ySPW4BsTq8/2+f23n4b5orHxLyvL0eDmqzLHx8XWzkOJFzZwkZKzePwR
XwHc99vUbbIgQ0/SWUlsoRZxtr3FhvlDeM5UnTpzgAs7p6u9vxLLMPndPWDh
YwsEFhvJ/HetDzTJKBZBoQ6Btl8C3v5lI2Ly+6cSaxry1Pxtfq4sQtK5A25i
UYUYY36S9UuthsxqQl+YAxnvZ7dJBwtT8ORP+Ya4mUKk+JvlK3tQ0Pf7YPmt
W1xIXsqMuHh9CEzOfeL+6SHUBkZWfD5DgAl/x4dVJSxIBsUy3IP6wTewRfO5
FxnbezGVeKUKto7njdKNOqH/t29palIh+LQGloTFlEHq070Oh5EibFzizrTM
6ke0oab/M+lGbNmr/GCDaSe8UhVePywZRsDvjoBLxyvgJKvgNNfMhI6Yi5Hi
CAf+AZur756pQVqhmV9AXBMCDMVzXqhTcHQqNJIxToTPMdFvjmsqwbA7tmv6
HxU/1k+ZBocOQ3iC+6T4cj7SnlsJfXVvwbHgk1L6wmwIW25vYPkxsDLP10hk
vBMFpt9dfUrK4OG82KOykItlP+z0uMRqFAZdef93cx2+aoSvPVE2iIjrvlle
6QS4ZmSvbS2vgneOQbL+OQr+/usOWttZjuUnHl/1bWpCQ7XVtz1ny3GqJ7kq
m8dBe/mBva/NiLgQ5XbskVchHhu4+cyIPEHarmXGoUL12PDvTWcnpQF2na2/
50aboFtTef/TjXR8ELwn+N/nYXxjyngMmBajeGvb3arMangFXjnQNZaKsDXL
TlZvoSNvdp9KdEwXKl/pynDKyDh5czd3F4/jyROXJVMuNiHSu6vSh12OXbbs
Wp1oLizNwoxLj5Jweboz3T6UAN/5nnsr1zahVJu2j1uRi+eH3fI8VCqhoX4h
y92VDNMfOyum39EQkFRnSM+PAk3bW0ZZmQyL+vdd9tFpEFwpN7t2eyZs3u34
L+DWSzBIv00petXoXDYYG7mkAoLNUma799dBLba8KOFbFrqDt88uekpBifWi
U7fJRVBfyLj4LjQdmovuWlvc7UZmvFf8Bc0B3FA9LfdQmsenpCi/ucwSjP5y
UNh4vAz+a+eMLr5lwaDit2VseAG+nOOzlmyLhd/zo08uTzVh0Cc8Q9mWBfHg
7ydrnHj8EGm4dro3G4eJUo00105020e23cimo1La5EnOfwy80ZqLup85hOlX
BqJXD9PR/GLZ75/zFNw/N7FotWcCbnumW416sjGRunPZxRXN+BXGrLZ1KsVP
WnXKiSwS1K/HL/hSyyE4fDduc3od0g4a7qtNJuCxpYNn28gg7lwwMtd2rUII
NWtzUDEVpuSGtic+TFieyS+2Uy3FLZH5DydQhhy7+JhC3rxs1zpw6rppCTKd
wjLT5Tm4uPW9kDmxHF6CFX/vCA4g29Js83l73pwoH93avrEBmt7aZPJ4NmIu
7nhon0uHQOs5+irjAox8G1LXuV2C889mBc0TC3BQZdPhszx/+tVNVRtPImHa
ZN9MX0U1vi6LmuPaFOJDqM7X8/tqYSE9lNApWQ15i717K8voGBN01dC9ycKB
Ft3jmxOpeHy26bNcUyKM7cpyPowN4pRzXAZWkrC7f6NhX2UxDpmLXkyOKcGN
v30D7I5SHPelCmnc53lK+UVqT0wn+sM2Dk++LMLpUaOQE73FmMpuKit9lgGp
jYSZ4kA6BMe/e7/YnoUD5yMirrxtxy/+6Bnx2zzPEFlLiqh/hzNR5Qf2dJLB
xw5R4+vXJhNOZFbyfaqC1ffVI4oPqmF/erGx87oReNwLcfa0KYHSmXPSv/VL
cXpk+CnXZBiEhW3XD5ymIJbQ3mljQse790JW2wWbseWI7ABrFwuieKD21o8G
vy1/pEUTWvD4e+cun08hWK8pdGQVkQoRsqb1CmIpRhNlPkb6UsD/OfjBPxMK
fO51KbkQ2sBmq6+72VIDbobLORNiCfjkD9Td8yJAwYuwSvpCEdZQ5YTfoAgm
v2clRcLLIV0oeUH2czVuX/KlWu0qQM9PR9LLlA4EbvO0vB7Ou1fWH5u4rdqB
X31fo1NO1CDPm7Gu/VAC4gTeT6YJUqCSJjMquZmCJYtjvTUcCxHySOPllgEi
Ig3HFCw8E+FlM69y2zgP+V/pKk97qsHhe/S6fR/PA3VcrC69GoSGs9sNM+Mh
mJ9ufPC0oQJ9ow1vC71zYUU9dFXy7ghifw4tEt5IQcbWiyx7CSZ0263bpo5x
sP5GygQpJBltzq/E7zYNw2iasVRDvBYtaul4alYPPeOEmVye/36pkbIW66fh
pgBHwpNaB7kjxeduHkuGklYCK8GKhr2CV3uij37AF2oZmW93P5T/M9NxPVkI
t/VstVnePXKuXb0uXo+O1/6Rz6Z5+8+R+tOT6E1E7O7CNZkn2RD7YmSqwiWh
+N6j+Yo7dSh3Lf31WJoMqsKXS7HXmEh/JHM7d2clDh/2etfKLkHwXiun9e6N
uDS6/9CibiauR/SLEoKomMtqafHzzkfnxwSpvwZhyHKi3i89TYJfWpFVRw0V
N5dmR1F457s/eEVo02EGwt40L7hmpGAqTt1v1YocXOGea/9cV48Hw08r3KmF
iFlygEDcWg7T2dU7bRMScLNqmN+zvwwrXxS3fUgmIeiADav+ewFOHxKJjxlh
wCL3xh7/a1yEW91b6XJ0CI377hGjS6MR18MYFiTUIjDo8/aeJiZmPUfWe9x9
g6vKdd/fGHDhu1Q0zK2kCIMJdlnKf6sxsuKUJDmzENYd7FDmcSquJRxRWtPE
gI2Dp63eRzKO6qqF3dwxCM3aVcL5V4qBtfm5hiJ+ePXrEcH7YzoMzS1DhxKa
cVdd6VPkfS7EbAnePU5F8NIzNCwbqYDcaFxsDfENJtSsZnx92NgwMRlw0awI
XMOrLySyqfhgpsrQVsrDztRgs3FlOsoNZKx3BcZD3OTHw0j7HDSyuhR0LBqR
HrveC2510GwbOqW+gQX9hpzWRddJmDwV0HpMqRF9J81zzY8T0ZIkd2Tp6Sq8
KFz9Z83pIginJD5wV2rCA+X0n/O7S3iP0Hjw+0QStKu20UIfEbB1Z6nH2fRw
UBgLo2IRXHSujBdTXBsLTYHPXxIFh0B4Zup7YHselPZJctVMBmDd+1ulSpUE
iZKOzIdvalDsuXI5n2c/Yk3VJbTF62Bi3/BUTqgIEVpuFZ01+XizI3XfCtkK
xKWONa/5w0Cac5rtu6W1aDXYpVrK66uVV601ivfmw+L75OOhK7lwvUt5SXxG
RAZt9tijegqig7bp7nfvwOo8vV5xrQyk1Uvt092dh5bwhzt8KP1YqIv6vfdl
Jf49Nm4UnKOCacTqvSnARIL51V4BOglnZFR8fpnn83hvLrD2BAnZzoM7V3zi
IjW9NPymcBNyL5zkjXk/Nk8XuiVX8vatCPV/0puQISCwrzsjD/s6ev4llTTB
zyA+YIc0FYNdk8VD9HykeDZXpag1o7pVWMzhO89jVTIJNU28bhhKK1qzjwJK
TkD2Cb5iPOt5aPqRMYS1zba/BTkpyGpWuTIRUYf59fy/unUaEBBF9VZY3oDv
7rRuGSMKfmaNLKSkstAWNXNsTJfN64L7TqGEQRgMcdx/mjbDaKPg952naUir
IbdvdqYivPvm+GJWKd6uWFIp3ETHOvlTpEJmI55+mLaVVaxBZ9utorMe+Ti/
UlH7YiERMtv4rWVsOTArr7W0n23CesKottWtIpjpqHafCSLheINXiPBwM4bt
xFO0IzpwvVfk5WMvOsTT5D8u/VeIuNcxqmsEimCzzeMDoTcOZBtygTevC0lW
Qr1WpBrwnboWlNqfDYOu/qrzPE8MMeVk1/yqgVRHZTGR1Izzztump3Io+KPv
qPBCkYFy4RdFY9+ykRYlFVBozME15XAtqioB3fKWatv9B8Dcq8ddX1aL0pf3
n/TuikS+vqRvcVoLluamZ7WdoEBU59U3/p588JklddOi01FTdSzg92NeRy4a
jJm0aUTXHsd/TjvK4duW1PhbvhkvmlQOnsprwk7vTaJFE41ojRX9emUrAxu2
tCp8jSyEmd26s7bR5RAKfkhPIxZjj0lfQiuv9xYE31p1zdOw5X76cR9aCWxC
RGN0H5J53mIxd9k6DYf5X9kHeFOhQp28nCXHguaXS9KeLkzIpEcr7tpThL5r
0ROCTSFYaOkQiipk42mzyYwQmYWwcrlk+NKRNX5pWNGRgjNZmiOXJRgYD6xs
8K6j4caE2Jc3a1twXSBJ1Vm0FDnfngZ10MkwaH583p1vBNsvrT9WVcfGg4ej
l7jsRghTbNTlfzJh3CuaSV9TihPvJN+J8HpEuG3M0zycimq9mpeH+TqQM2/0
WRoluHqHRSvY0wBxqw6bF8+H8UNp97GFbSVobzEgcRdToKgXm/yVU4w821bN
2AEOxH9om+rE10A2LOSQQxoBz97sLd12jsfxXyc5H79yQI6ZDM17mIoNdw/P
W1+thYi3B2n+XAuE1pPMjGQKodjW47jvWR86phoI53jevTWIVH7jXyL8grZe
1jXMRRb/wSiRFp5HSp3cZnyXgdodpdNf7zSAo6HoSslpQB1TP1Z/hoDIaO2k
/OBg+OgqiwgF18FqGdnnNn8Z0nrFHvE7xaLmpXTubGYL5LA88ljwQ2T47eeP
eFINbaGXvgcUa7Fkq0tBogANVeuWhV+PZ2JqtPa0ixELr4oWrI9uYULcqPya
pwgTdZNmgv3n2OgOXR53wmIYR7ZUSdIul+CrmIWySh8bnD3xs5rpNRBKoO18
UkUEeXY0vqFoCFuS+MbD0tsRqf0p0rd3BO5Jj7w9HWsgYSTi4mpYhVbFBmGh
6UZEdcRJWNwcQI7CexEnHhf4nSr95JLZ0IoPZ5zIZ4BPTzvpoWk9+Hpn2s9V
V2P8nOOW0pkh5GfYKrwoqUSdu39jMq+rBHXirgxXpUDD+9OJ50t5HeFmVFE7
WYYp/lUWyxl5mKhNvfvqIgMzb4wdTXmcO/3ngXhyIx1F1rT6FS5dmPJq16rU
J8AOxwkf+QtQK6HAuTVehC/CRqlpNsUYbfhEe/uwCRG5K4UJUh3oC/hX4OHa
DDffPZnbTsXDkZqjNpZAgE14nssjo2SYz4wcfS1YAg2VI7MLpmSodHd9W1Vd
ApKaS6elZxf2btRQpLx4h+B62bVO6m+x21iidiOPf/GO8q6spa1Id993esnB
dkztONLml1CN9x9OveYEN+JG7rvdVdq8jtTcc3CtDBE1oxo/oleRUBkSGziy
MQ/sRE0vVdkqOF/2kPkZkYl76xStu2cbAanaRWLtlaD/tbA18OH5zHDEHhGe
P4s3XNhXr9+KMrvOG2vEKKgMyvtn3c+CwLItJ26H5MCFqB/T/p0E4s4NIVaH
mdgrX6df3J2PGyZS82nrKbAzuu0Z050A9s/5zDnhTqRft96z+FMbHk04bEi6
SoeNYQ551TkOHrTEZ08LUHB5sPbISedKlKfZSLxPykOisvLu8WYKiHbPou3G
GIi4s3ZVmk8T5CI5xC+zobj7efFhaU0ioj2lmM4rKOBWyzycPF0Jmjs7v8e8
BeIXjUsCLEJxg6n0wCd7EN0/NMakHpARJvvD2siNjVVqcU70I/2Y67VdofGd
huCqJQGpe1tQ4G7uzmHmgSznLrMiIRolXq7/kn9TIXxGwlbAjAurdfIem3n7
U/Dqod3xjyXQO1zcWq+egh/ZHkbXhitAftzVE9NQBWHvx/mKkzx+zfn3Uf/l
IzOWpJuaRYEDo0TodXQbcl9cl/QVIkE8X9dEziEdJh7hiQ6L2ZDYljye2zOA
XR0zXM+KRjReK2lLTmBALbSIP+p3HjLUwih/OFUw6lsXnGf5Dh9GKm9RG1Oh
v9z2vTGv49kdirpBOSTYZhk4HrxGxLkrL0oXLtdgYU3+3dquYXg/WZq6eagK
ASVpL2MP1mBDp/T23QdLUM55so//CR0S2g8GiwuKoBKYsJN8vBot9rWOZR1c
zGS5Ny0ebsPPuq+TK7+ysCy8NmKNFAmk+1lp+pNMHCG/Xm6pyIEzS8PS3joK
s7fMspfapqK0m/SxPK0Q7iuqXBRXcjEY2Te480creps3i9MLyrFi3GUoe6EO
Kx2Hy38SWXB7uz2yiFaDtyNxA9KsIZSmsZnNNXng/VjPTXLPYVPm+M9Bswbe
LiSNoRX5+Cp7PeBYWC1cz7v5latzcSPmz1bRZBp8zhx/lWnUgo/USsrOXzSw
B4fFX9LIoCcOufS1FcOh9zvHz6cIR8voY+EydUh35Xvzu68IFg10E+F1Begr
7OLXiGNg/jQrUFOQhVmJZb7Ruu2YPvM55qT6IAp+3DYZucRB3/fDlaHbuWAd
3FC/u64WSXD3GpMawGyD/aHeM1kIuPNDbl3uACaUP5Zt9KuCRIXxtKRzFTQL
PWU1lmTh0vT8lbfrSGjcusNti2AIhC5UxrRfG0CdF2mUSSpH9Cyf6nwGFeu/
1fap7krHikgRPbInG/1xgTLODf2QWxC/qhtDg3B45365rRXYPVDbLXCyHNdS
7veqBObhVa1yiap7EzpPX9j7RecD5Ccmq+5W1MF8be76+eEWDM/Ibq/f1wC7
y+auNJtc1Jifou82Z+G8uK+a68U8WOkd1G4dq8XEQgit+UsN1ppvejsYF4pA
pw83bmYP4RR/L9u/qxrsazNjySw67M6JO/yzyEGB8fLJg6xiCD5m/2XYk6B/
qemDkmYGmoj+iq76ZZh5uWj54Nt+TGxdd+rFs3rIPVK6p/ijFKs+3bOqelSE
xkpbge2GkXillfHp8/JSiC7xNu5MYeJ/CDTzag==
           "], "Distributions" -> {
            NormalDistribution[15372.743581817165`, 1642.140758294793], 
            NormalDistribution[14004.468104541975`, 1642.140758294793], 
            NormalDistribution[15551.037816950857`, 1642.140758294793], 
            NormalDistribution[13107.601338014994`, 1642.140758294793], 
            NormalDistribution[12942.167513747401`, 1642.140758294793], 
            NormalDistribution[19192.220152950587`, 1642.140758294793], 
            NormalDistribution[7290.210074244195, 1642.140758294793], 
            NormalDistribution[7188.13328485141, 1642.140758294793], 
            NormalDistribution[11422.196594332998`, 1642.140758294793], 
            NormalDistribution[11555.620526543142`, 1642.140758294793], 
            NormalDistribution[10305.13279349112, 1642.140758294793], 
            NormalDistribution[19427.59195487559, 1642.140758294793], 
            NormalDistribution[11829.175662500526`, 1642.140758294793], 
            NormalDistribution[39460.82093053813, 1642.140758294793], 
            NormalDistribution[12723.826829831083`, 1642.140758294793], 
            NormalDistribution[11915.38348669946, 1642.140758294793], 
            NormalDistribution[11318.364604000684`, 1642.140758294793], 
            NormalDistribution[6173.977996133248, 1642.140758294793], 
            NormalDistribution[6189.574057005144, 1642.140758294793], 
            NormalDistribution[6167.879475484334, 1642.140758294793], 
            NormalDistribution[12806.716933413305`, 1642.140758294793], 
            NormalDistribution[13884.273481507145`, 1642.140758294793], 
            NormalDistribution[3602.989023733875, 1642.140758294793], 
            NormalDistribution[2982.5246433263765`, 1642.140758294793], 
            NormalDistribution[19730.891213839077`, 1642.140758294793], 
            NormalDistribution[11246.621885125407`, 1642.140758294793], 
            NormalDistribution[11222.469928846116`, 1642.140758294793], 
            NormalDistribution[6381.385649042378, 1642.140758294793], 
            NormalDistribution[40834.575851559006`, 1642.140758294793], 
            NormalDistribution[35576.106660418045`, 1642.140758294793], 
            NormalDistribution[10613.208595867778`, 1642.140758294793], 
            NormalDistribution[17167.57268670826, 1642.140758294793], 
            NormalDistribution[7533.24058212946, 1642.140758294793], 
            NormalDistribution[25606.14187164653, 1642.140758294793], 
            NormalDistribution[15343.906293316635`, 1642.140758294793], 
            NormalDistribution[26640.54354790372, 1642.140758294793], 
            NormalDistribution[12283.78293320377, 1642.140758294793], 
            NormalDistribution[10082.705442000144`, 1642.140758294793], 
            NormalDistribution[42412.68863937562, 1642.140758294793], 
            NormalDistribution[14654.120284903189`, 1642.140758294793], 
            NormalDistribution[6442.001898306544, 1642.140758294793], 
            NormalDistribution[6562.214532438148, 1642.140758294793], 
            NormalDistribution[11298.17893600601, 1642.140758294793], 
            NormalDistribution[5562.922367153752, 1642.140758294793], 
            NormalDistribution[10685.295977094103`, 1642.140758294793], 
            NormalDistribution[8820.861162664294, 1642.140758294793], 
            NormalDistribution[35202.50468384469, 1642.140758294793], 
            NormalDistribution[13437.76376658077, 1642.140758294793], 
            NormalDistribution[5135.880961892806, 1642.140758294793], 
            NormalDistribution[47622.44983049672, 1642.140758294793], 
            NormalDistribution[13769.302509842373`, 1642.140758294793], 
            NormalDistribution[7625.885644316841, 1642.140758294793], 
            NormalDistribution[11333.053786522716`, 1642.140758294793], 
            NormalDistribution[20821.113545946362`, 1642.140758294793], 
            NormalDistribution[38084.49625328355, 1642.140758294793], 
            NormalDistribution[4391.8316221007735`, 1642.140758294793], 
            NormalDistribution[6953.687732916132, 1642.140758294793], 
            NormalDistribution[22488.255152930833`, 1642.140758294793], 
            NormalDistribution[7421.030514780764, 1642.140758294793], 
            NormalDistribution[27148.546080339307`, 1642.140758294793], 
            NormalDistribution[1598.93855787368, 1642.140758294793], 
            NormalDistribution[14314.410995742604`, 1642.140758294793], 
            NormalDistribution[6685.26133023928, 1642.140758294793], 
            NormalDistribution[9678.868503896236, 1642.140758294793], 
            NormalDistribution[41100.41975781095, 1642.140758294793], 
            NormalDistribution[15968.914433422291`, 1642.140758294793], 
            NormalDistribution[15539.26780224063, 1642.140758294793], 
            NormalDistribution[5697.475428523483, 1642.140758294793], 
            NormalDistribution[12077.124165750245`, 1642.140758294793], 
            NormalDistribution[4867.220800308055, 1642.140758294793], 
            NormalDistribution[14507.481357307848`, 1642.140758294793], 
            NormalDistribution[26886.78763902688, 1642.140758294793], 
            NormalDistribution[12366.728422398599`, 1642.140758294793], 
            NormalDistribution[5696.319629020106, 1642.140758294793], 
            NormalDistribution[17224.067997578026`, 1642.140758294793], 
            NormalDistribution[6860.939135866367, 1642.140758294793], 
            NormalDistribution[29647.817318942347`, 1642.140758294793], 
            NormalDistribution[3231.650933647714, 1642.140758294793], 
            NormalDistribution[5834.836612453, 1642.140758294793], 
            NormalDistribution[38120.662953844076`, 1642.140758294793], 
            NormalDistribution[7188.866460007794, 1642.140758294793], 
            NormalDistribution[48925.61634006975, 1642.140758294793], 
            NormalDistribution[4914.068739948945, 1642.140758294793], 
            NormalDistribution[6929.511113881925, 1642.140758294793], 
            NormalDistribution[17079.02521069355, 1642.140758294793], 
            NormalDistribution[9307.73744722629, 1642.140758294793], 
            NormalDistribution[7950.712056821477, 1642.140758294793], 
            NormalDistribution[4540.218277582158, 1642.140758294793], 
            NormalDistribution[9128.655778601373, 1642.140758294793], 
            NormalDistribution[11832.947077308367`, 1642.140758294793], 
            NormalDistribution[3747.5090996937706`, 1642.140758294793], 
            NormalDistribution[15757.64399523531, 1642.140758294793], 
            NormalDistribution[16921.983438809355`, 1642.140758294793], 
            NormalDistribution[20602.811765615446`, 1642.140758294793], 
            NormalDistribution[2417.0156842725555`, 1642.140758294793], 
            NormalDistribution[15684.399092247142`, 1642.140758294793], 
            NormalDistribution[13660.419150504504`, 1642.140758294793], 
            NormalDistribution[8016.601233640705, 1642.140758294793], 
            NormalDistribution[5046.943234030159, 1642.140758294793], 
            NormalDistribution[10876.043416522509`, 1642.140758294793], 
            NormalDistribution[6773.650613662695, 1642.140758294793], 
            NormalDistribution[9192.94644472041, 1642.140758294793], 
            NormalDistribution[11389.990265818387`, 1642.140758294793], 
            NormalDistribution[11146.017052976338`, 1642.140758294793], 
            NormalDistribution[7058.193192074585, 1642.140758294793], 
            NormalDistribution[19008.52867389168, 1642.140758294793], 
            NormalDistribution[10115.754526592425`, 1642.140758294793], 
            NormalDistribution[3782.1208502250447`, 1642.140758294793], 
            NormalDistribution[9509.979002615062, 1642.140758294793], 
            NormalDistribution[1126.3428328862847`, 1642.140758294793], 
            NormalDistribution[46849.49864731214, 1642.140758294793], 
            NormalDistribution[47969.84513341621, 1642.140758294793], 
            NormalDistribution[11324.22774179035, 1642.140758294793], 
            NormalDistribution[7694.526909324787, 1642.140758294793], 
            NormalDistribution[40811.76884795033, 1642.140758294793], 
            NormalDistribution[5970.622657085928, 1642.140758294793], 
            NormalDistribution[16165.259925673265`, 1642.140758294793], 
            NormalDistribution[23476.84248953742, 1642.140758294793], 
            NormalDistribution[11096.065586455343`, 1642.140758294793], 
            NormalDistribution[8847.598115863075, 1642.140758294793], 
            NormalDistribution[9092.037195166897, 1642.140758294793], 
            NormalDistribution[16499.230083421513`, 1642.140758294793], 
            NormalDistribution[37601.210361422505`, 1642.140758294793], 
            NormalDistribution[17930.72537219635, 1642.140758294793], 
            NormalDistribution[17955.887348801956`, 1642.140758294793], 
            NormalDistribution[8949.85282777706, 1642.140758294793], 
            NormalDistribution[35066.44899649384, 1642.140758294793], 
            NormalDistribution[24594.233860993496`, 1642.140758294793], 
            NormalDistribution[35532.07827710535, 1642.140758294793], 
            NormalDistribution[1267.9361162385467`, 1642.140758294793], 
            NormalDistribution[15735.612743355196`, 1642.140758294793], 
            NormalDistribution[15349.257877183056`, 1642.140758294793], 
            NormalDistribution[11981.459962894596`, 1642.140758294793], 
            NormalDistribution[49688.6091590053, 1642.140758294793], 
            NormalDistribution[46755.128888164014`, 1642.140758294793], 
            NormalDistribution[22692.310794879097`, 1642.140758294793], 
            NormalDistribution[21191.50144089558, 1642.140758294793], 
            NormalDistribution[41029.12395473127, 1642.140758294793], 
            NormalDistribution[11672.82337082864, 1642.140758294793], 
            NormalDistribution[6214.215900250801, 1642.140758294793], 
            NormalDistribution[47174.725042356535`, 1642.140758294793], 
            NormalDistribution[16548.619324352756`, 1642.140758294793], 
            NormalDistribution[13137.67255756893, 1642.140758294793], 
            NormalDistribution[5155.713572725282, 1642.140758294793], 
            NormalDistribution[16528.78784216818, 1642.140758294793], 
            NormalDistribution[12316.364790448662`, 1642.140758294793], 
            NormalDistribution[23210.76473977179, 1642.140758294793], 
            NormalDistribution[5795.465499989185, 1642.140758294793], 
            NormalDistribution[41691.19117224884, 1642.140758294793], 
            NormalDistribution[6092.536467087536, 1642.140758294793], 
            NormalDistribution[36592.839201030605`, 1642.140758294793], 
            NormalDistribution[1979.1764408409672`, 1642.140758294793], 
            NormalDistribution[7064.200154545129, 1642.140758294793], 
            NormalDistribution[19403.228107369912`, 1642.140758294793], 
            NormalDistribution[11667.205363374185`, 1642.140758294793], 
            NormalDistribution[14040.07664983839, 1642.140758294793], 
            NormalDistribution[1627.1508926236293`, 1642.140758294793], 
            NormalDistribution[37159.5458360215, 1642.140758294793], 
            NormalDistribution[16226.906225595538`, 1642.140758294793], 
            NormalDistribution[15332.495976808208`, 1642.140758294793], 
            NormalDistribution[4597.1158046526725`, 1642.140758294793], 
            NormalDistribution[1515.538289341579, 1642.140758294793], 
            NormalDistribution[15162.10724131269, 1642.140758294793], 
            NormalDistribution[9205.443825903836, 1642.140758294793], 
            NormalDistribution[10886.683729357126`, 1642.140758294793], 
            NormalDistribution[5862.2977815018, 1642.140758294793], 
            NormalDistribution[1538.032313235777, 1642.140758294793], 
            NormalDistribution[2935.5916714554587`, 1642.140758294793], 
            NormalDistribution[9932.071912300637, 1642.140758294793], 
            NormalDistribution[41036.56708072183, 1642.140758294793], 
            NormalDistribution[38261.08334938144, 1642.140758294793], 
            NormalDistribution[14809.970811574345`, 1642.140758294793], 
            NormalDistribution[14468.770142492693`, 1642.140758294793], 
            NormalDistribution[12319.465157799714`, 1642.140758294793], 
            NormalDistribution[11124.766707611505`, 1642.140758294793], 
            NormalDistribution[9050.650312073125, 1642.140758294793], 
            NormalDistribution[15973.640490137044`, 1642.140758294793], 
            NormalDistribution[5215.805575829697, 1642.140758294793], 
            NormalDistribution[13488.869460376352`, 1642.140758294793], 
            NormalDistribution[45908.629843094495`, 1642.140758294793], 
            NormalDistribution[6799.018041864791, 1642.140758294793], 
            NormalDistribution[12616.736418967563`, 1642.140758294793], 
            NormalDistribution[16943.18946616167, 1642.140758294793], 
            NormalDistribution[8109.341913713562, 1642.140758294793], 
            NormalDistribution[19543.564356126364`, 1642.140758294793], 
            NormalDistribution[9701.504156489013, 1642.140758294793], 
            NormalDistribution[16734.21800701951, 1642.140758294793], 
            NormalDistribution[14256.638832658547`, 1642.140758294793], 
            NormalDistribution[15389.746561725988`, 1642.140758294793], 
            NormalDistribution[9416.877048001214, 1642.140758294793], 
            NormalDistribution[13527.612109148758`, 1642.140758294793], 
            NormalDistribution[13473.848241288277`, 1642.140758294793], 
            NormalDistribution[12919.989831534032`, 1642.140758294793], 
            NormalDistribution[15501.707007782685`, 1642.140758294793], 
            NormalDistribution[4599.528446933093, 1642.140758294793], 
            NormalDistribution[4027.6201659521284`, 1642.140758294793], 
            NormalDistribution[39301.57460479293, 1642.140758294793], 
            NormalDistribution[8542.600558996095, 1642.140758294793], 
            NormalDistribution[11424.272708062985`, 1642.140758294793], 
            NormalDistribution[9669.370807477977, 1642.140758294793], 
            NormalDistribution[10824.251076294304`, 1642.140758294793], 
            NormalDistribution[11695.54096634176, 1642.140758294793], 
            NormalDistribution[9916.297966928762, 1642.140758294793], 
            NormalDistribution[39244.90592161704, 1642.140758294793], 
            NormalDistribution[5626.983929052693, 1642.140758294793], 
            NormalDistribution[10464.583499730543`, 1642.140758294793], 
            NormalDistribution[1076.4958072287955`, 1642.140758294793], 
            NormalDistribution[5808.538030894052, 1642.140758294793], 
            NormalDistribution[12705.817084006776`, 1642.140758294793], 
            NormalDistribution[34725.04643713655, 1642.140758294793], 
            NormalDistribution[6011.481855668623, 1642.140758294793], 
            NormalDistribution[17943.54676164552, 1642.140758294793], 
            NormalDistribution[1949.7445641851045`, 1642.140758294793], 
            NormalDistribution[6572.102319028533, 1642.140758294793], 
            NormalDistribution[25455.875156282396`, 1642.140758294793], 
            NormalDistribution[6589.475038166331, 1642.140758294793], 
            NormalDistribution[16598.661474564084`, 1642.140758294793], 
            NormalDistribution[12250.59852526968, 1642.140758294793], 
            NormalDistribution[10363.86343006188, 1642.140758294793], 
            NormalDistribution[7186.909865123682, 1642.140758294793], 
            NormalDistribution[36871.817689159514`, 1642.140758294793], 
            NormalDistribution[37098.863678857975`, 1642.140758294793], 
            NormalDistribution[4608.499695043696, 1642.140758294793], 
            NormalDistribution[8368.263988523491, 1642.140758294793], 
            NormalDistribution[13310.11839104689, 1642.140758294793], 
            NormalDistribution[44426.49107283841, 1642.140758294793], 
            NormalDistribution[37362.46730603191, 1642.140758294793], 
            NormalDistribution[7075.968237366385, 1642.140758294793], 
            NormalDistribution[20339.992703899694`, 1642.140758294793], 
            NormalDistribution[33607.440711980715`, 1642.140758294793], 
            NormalDistribution[13383.412493835094`, 1642.140758294793], 
            NormalDistribution[15867.183865593071`, 1642.140758294793], 
            NormalDistribution[10431.436460489214`, 1642.140758294793], 
            NormalDistribution[5394.946785341177, 1642.140758294793], 
            NormalDistribution[5017.060367485192, 1642.140758294793], 
            NormalDistribution[9551.03219196569, 1642.140758294793], 
            NormalDistribution[8397.163107404533, 1642.140758294793], 
            NormalDistribution[8729.125768419644, 1642.140758294793], 
            NormalDistribution[5110.617641269116, 1642.140758294793], 
            NormalDistribution[8946.325724306818, 1642.140758294793], 
            NormalDistribution[37739.42922972492, 1642.140758294793], 
            NormalDistribution[43850.92464226127, 1642.140758294793], 
            NormalDistribution[44969.92889061529, 1642.140758294793], 
            NormalDistribution[5198.873986754051, 1642.140758294793], 
            NormalDistribution[14702.153345943112`, 1642.140758294793], 
            NormalDistribution[35955.68049457312, 1642.140758294793], 
            NormalDistribution[8441.07190404972, 1642.140758294793], 
            NormalDistribution[8035.640445760959, 1642.140758294793], 
            NormalDistribution[24898.64552937111, 1642.140758294793], 
            NormalDistribution[5028.652448713146, 1642.140758294793], 
            NormalDistribution[7067.57821483654, 1642.140758294793], 
            NormalDistribution[5607.401725284078, 1642.140758294793], 
            NormalDistribution[36194.805597791674`, 1642.140758294793], 
            NormalDistribution[16486.11756618284, 1642.140758294793], 
            NormalDistribution[24912.460581116517`, 1642.140758294793], 
            NormalDistribution[46523.92372305595, 1642.140758294793], 
            NormalDistribution[7495.36927556841, 1642.140758294793], 
            NormalDistribution[12197.956516637669`, 1642.140758294793], 
            NormalDistribution[16334.283704883992`, 1642.140758294793], 
            NormalDistribution[12444.927799884474`, 1642.140758294793], 
            NormalDistribution[18042.133077073522`, 1642.140758294793], 
            NormalDistribution[8801.083437002977, 1642.140758294793], 
            NormalDistribution[6636.775765654694, 1642.140758294793], 
            NormalDistribution[7702.425492183888, 1642.140758294793], 
            NormalDistribution[10237.915627288061`, 1642.140758294793], 
            NormalDistribution[46236.510370308424`, 1642.140758294793], 
            NormalDistribution[4449.712949927907, 1642.140758294793], 
            NormalDistribution[19927.656821379118`, 1642.140758294793], 
            NormalDistribution[15384.563210792967`, 1642.140758294793], 
            NormalDistribution[11529.600011628609`, 1642.140758294793], 
            NormalDistribution[25520.208038970894`, 1642.140758294793], 
            NormalDistribution[7095.505660017183, 1642.140758294793], 
            NormalDistribution[38301.95227214782, 1642.140758294793], 
            NormalDistribution[9587.767712228479, 1642.140758294793], 
            NormalDistribution[13387.981426663091`, 1642.140758294793], 
            NormalDistribution[42458.28425083107, 1642.140758294793], 
            NormalDistribution[5289.487007284906, 1642.140758294793], 
            NormalDistribution[8124.828501562226, 1642.140758294793], 
            NormalDistribution[8876.56754454155, 1642.140758294793], 
            NormalDistribution[7384.0959298012285`, 1642.140758294793], 
            NormalDistribution[18246.037567206695`, 1642.140758294793], 
            NormalDistribution[7251.218465611991, 1642.140758294793], 
            NormalDistribution[16498.71482225814, 1642.140758294793], 
            NormalDistribution[6485.55946178045, 1642.140758294793], 
            NormalDistribution[4988.497168815079, 1642.140758294793], 
            NormalDistribution[609.7453641019674, 1642.140758294793], 
            NormalDistribution[13843.150910282347`, 1642.140758294793], 
            NormalDistribution[15235.694109200553`, 1642.140758294793], 
            NormalDistribution[18343.921498500174`, 1642.140758294793], 
            NormalDistribution[3253.4325618380954`, 1642.140758294793], 
            NormalDistribution[46847.43853332219, 1642.140758294793], 
            NormalDistribution[5716.888566659746, 1642.140758294793], 
            NormalDistribution[9559.495813984755, 1642.140758294793], 
            NormalDistribution[3061.924304114362, 1642.140758294793], 
            NormalDistribution[10829.51788414576, 1642.140758294793], 
            NormalDistribution[26222.40882729803, 1642.140758294793], 
            NormalDistribution[8567.617988175127, 1642.140758294793], 
            NormalDistribution[11324.405340959918`, 1642.140758294793], 
            NormalDistribution[17782.595055089, 1642.140758294793], 
            NormalDistribution[7374.506818383605, 1642.140758294793], 
            NormalDistribution[38097.86838454418, 1642.140758294793], 
            NormalDistribution[6725.719994803273, 1642.140758294793], 
            NormalDistribution[5267.397122917087, 1642.140758294793], 
            NormalDistribution[17504.28856563243, 1642.140758294793], 
            NormalDistribution[4062.9418469735792`, 1642.140758294793], 
            NormalDistribution[7722.475348726505, 1642.140758294793], 
            NormalDistribution[8420.919322393926, 1642.140758294793], 
            NormalDistribution[10555.919836275898`, 1642.140758294793], 
            NormalDistribution[1644.4426871931955`, 1642.140758294793], 
            NormalDistribution[8274.321121004767, 1642.140758294793], 
            NormalDistribution[3149.198925965855, 1642.140758294793], 
            NormalDistribution[3479.048768045617, 1642.140758294793], 
            NormalDistribution[877.6918605537321, 1642.140758294793], 
            NormalDistribution[9353.510405746649, 1642.140758294793], 
            NormalDistribution[7429.596143962779, 1642.140758294793], 
            NormalDistribution[13434.424471833758`, 1642.140758294793], 
            NormalDistribution[3702.8177927914276`, 1642.140758294793], 
            NormalDistribution[8970.023198910454, 1642.140758294793], 
            NormalDistribution[5568.430832050674, 1642.140758294793], 
            NormalDistribution[3273.807355254794, 1642.140758294793], 
            NormalDistribution[27097.380826475288`, 1642.140758294793], 
            NormalDistribution[39330.86346274925, 1642.140758294793], 
            NormalDistribution[10802.977548261832`, 1642.140758294793], 
            NormalDistribution[6059.978585817882, 1642.140758294793], 
            NormalDistribution[6983.121633945012, 1642.140758294793], 
            NormalDistribution[14638.729033719992`, 1642.140758294793], 
            NormalDistribution[4757.610747917857, 1642.140758294793], 
            NormalDistribution[1845.2708702137988`, 1642.140758294793], 
            NormalDistribution[18385.523637184422`, 1642.140758294793], 
            NormalDistribution[14532.32551831095, 1642.140758294793], 
            NormalDistribution[4463.782393429443, 1642.140758294793], 
            NormalDistribution[3823.1511901931335`, 1642.140758294793], 
            NormalDistribution[25035.075200968662`, 1642.140758294793], 
            NormalDistribution[11098.834643411381`, 1642.140758294793], 
            NormalDistribution[11741.363382589883`, 1642.140758294793], 
            NormalDistribution[44379.76879606688, 1642.140758294793], 
            NormalDistribution[10884.805123871638`, 1642.140758294793], 
            NormalDistribution[9209.898224776061, 1642.140758294793], 
            NormalDistribution[2365.5390849214127`, 1642.140758294793], 
            NormalDistribution[15607.823140321034`, 1642.140758294793], 
            NormalDistribution[18477.453564085008`, 1642.140758294793], 
            NormalDistribution[6255.385784601086, 1642.140758294793], 
            NormalDistribution[6828.28770081814, 1642.140758294793], 
            NormalDistribution[7363.51171311205, 1642.140758294793], 
            NormalDistribution[13650.293898451157`, 1642.140758294793], 
            NormalDistribution[5285.786030724565, 1642.140758294793], 
            NormalDistribution[42814.671313452534`, 1642.140758294793], 
            NormalDistribution[8050.227894804312, 1642.140758294793], 
            NormalDistribution[10093.110524745458`, 1642.140758294793], 
            NormalDistribution[12035.029962271605`, 1642.140758294793], 
            NormalDistribution[6187.393412667873, 1642.140758294793], 
            NormalDistribution[6976.287612679746, 1642.140758294793], 
            NormalDistribution[16498.806373928375`, 1642.140758294793], 
            NormalDistribution[5972.4113043670495`, 1642.140758294793], 
            NormalDistribution[15941.325548700834`, 1642.140758294793], 
            NormalDistribution[7353.339990565638, 1642.140758294793], 
            NormalDistribution[38979.62472392709, 1642.140758294793], 
            NormalDistribution[17813.408528649878`, 1642.140758294793], 
            NormalDistribution[14911.673103947767`, 1642.140758294793], 
            NormalDistribution[3830.3764665869767`, 1642.140758294793], 
            NormalDistribution[11102.79288284369, 1642.140758294793], 
            NormalDistribution[4689.0772299068085`, 1642.140758294793], 
            NormalDistribution[5998.23121487673, 1642.140758294793], 
            NormalDistribution[4771.339980633778, 1642.140758294793], 
            NormalDistribution[12076.650455613735`, 1642.140758294793], 
            NormalDistribution[6820.922558060606, 1642.140758294793], 
            NormalDistribution[9595.757514157778, 1642.140758294793], 
            NormalDistribution[4960.886636318619, 1642.140758294793], 
            NormalDistribution[12914.710273215373`, 1642.140758294793], 
            NormalDistribution[9259.692471158385, 1642.140758294793], 
            NormalDistribution[11127.486090701135`, 1642.140758294793], 
            NormalDistribution[14550.470289472918`, 1642.140758294793], 
            NormalDistribution[10054.291236498972`, 1642.140758294793], 
            NormalDistribution[2536.5642075933865`, 1642.140758294793], 
            NormalDistribution[42845.02132958978, 1642.140758294793], 
            NormalDistribution[6674.25260343782, 1642.140758294793], 
            NormalDistribution[5822.876207344516, 1642.140758294793], 
            NormalDistribution[6043.645951172163, 1642.140758294793], 
            NormalDistribution[6359.80816465556, 1642.140758294793], 
            NormalDistribution[11504.39092296468, 1642.140758294793], 
            NormalDistribution[25199.433799204264`, 1642.140758294793], 
            NormalDistribution[5515.952730153892, 1642.140758294793], 
            NormalDistribution[5854.287388855894, 1642.140758294793], 
            NormalDistribution[3395.8608079457135`, 1642.140758294793], 
            NormalDistribution[11035.429403796368`, 1642.140758294793], 
            NormalDistribution[3607.2704997039436`, 1642.140758294793], 
            NormalDistribution[23133.55606612027, 1642.140758294793], 
            NormalDistribution[10972.132525683364`, 1642.140758294793], 
            NormalDistribution[1906.8971942671087`, 1642.140758294793], 
            NormalDistribution[8624.431602072578, 1642.140758294793], 
            NormalDistribution[-26.878908906785, 1642.140758294793], 
            NormalDistribution[8157.0029093794765`, 1642.140758294793], 
            NormalDistribution[9460.288302056193, 1642.140758294793], 
            NormalDistribution[47323.50988926998, 1642.140758294793], 
            NormalDistribution[5984.48218646447, 1642.140758294793], 
            NormalDistribution[6216.973042863922, 1642.140758294793], 
            NormalDistribution[45719.07884545494, 1642.140758294793], 
            NormalDistribution[8858.487584829192, 1642.140758294793], 
            NormalDistribution[10916.756617391766`, 1642.140758294793], 
            NormalDistribution[18464.724367528794`, 1642.140758294793], 
            NormalDistribution[14439.600681097781`, 1642.140758294793], 
            NormalDistribution[10505.181044846799`, 1642.140758294793], 
            NormalDistribution[20104.22033575784, 1642.140758294793], 
            NormalDistribution[1207.376174344652, 1642.140758294793], 
            NormalDistribution[10098.150483274883`, 1642.140758294793], 
            NormalDistribution[6329.044421479118, 1642.140758294793], 
            NormalDistribution[8965.194217042956, 1642.140758294793], 
            NormalDistribution[8869.988115414513, 1642.140758294793], 
            NormalDistribution[22225.768057219222`, 1642.140758294793], 
            NormalDistribution[12710.836767292956`, 1642.140758294793], 
            NormalDistribution[6073.321631530971, 1642.140758294793], 
            NormalDistribution[5244.467929728795, 1642.140758294793], 
            NormalDistribution[5467.097956924731, 1642.140758294793], 
            NormalDistribution[5440.566591308239, 1642.140758294793], 
            NormalDistribution[7317.051116524572, 1642.140758294793], 
            NormalDistribution[9662.237154686403, 1642.140758294793], 
            NormalDistribution[4659.362358234457, 1642.140758294793], 
            NormalDistribution[24218.183253514446`, 1642.140758294793], 
            NormalDistribution[6549.4115216242035`, 1642.140758294793], 
            NormalDistribution[23725.73341515378, 1642.140758294793], 
            NormalDistribution[12435.301602706762`, 1642.140758294793], 
            NormalDistribution[2336.9181806592605`, 1642.140758294793], 
            NormalDistribution[8721.319934727911, 1642.140758294793], 
            NormalDistribution[8778.171176273452, 1642.140758294793], 
            NormalDistribution[4972.1972444064495`, 1642.140758294793], 
            NormalDistribution[6627.150561481614, 1642.140758294793], 
            NormalDistribution[2493.6721490416203`, 1642.140758294793], 
            NormalDistribution[4177.430343411976, 1642.140758294793], 
            NormalDistribution[9655.040367831798, 1642.140758294793], 
            NormalDistribution[9331.676254153628, 1642.140758294793], 
            NormalDistribution[42082.948784461885`, 1642.140758294793], 
            NormalDistribution[43658.669244975215`, 1642.140758294793], 
            NormalDistribution[7629.521405238039, 1642.140758294793], 
            NormalDistribution[4031.350767550277, 1642.140758294793], 
            NormalDistribution[48048.66885460049, 1642.140758294793], 
            NormalDistribution[8766.093838447057, 1642.140758294793], 
            NormalDistribution[11810.795299191337`, 1642.140758294793], 
            NormalDistribution[16013.912761668784`, 1642.140758294793], 
            NormalDistribution[2761.365117264226, 1642.140758294793], 
            NormalDistribution[46731.68952009237, 1642.140758294793], 
            NormalDistribution[12832.39083182314, 1642.140758294793], 
            NormalDistribution[13995.041035792243`, 1642.140758294793], 
            NormalDistribution[3747.8436785434915`, 1642.140758294793], 
            NormalDistribution[10690.12008950529, 1642.140758294793], 
            NormalDistribution[13702.961480977208`, 1642.140758294793], 
            NormalDistribution[2723.2096459347667`, 1642.140758294793], 
            NormalDistribution[10425.271869922593`, 1642.140758294793], 
            NormalDistribution[2082.8024551579983`, 1642.140758294793], 
            NormalDistribution[35248.02352703345, 1642.140758294793], 
            NormalDistribution[4938.4462178904005`, 1642.140758294793], 
            NormalDistribution[5028.9694336719, 1642.140758294793], 
            NormalDistribution[10889.263982872635`, 1642.140758294793], 
            NormalDistribution[6983.959100277759, 1642.140758294793], 
            NormalDistribution[6526.640075391114, 1642.140758294793], 
            NormalDistribution[15509.336630250611`, 1642.140758294793], 
            NormalDistribution[6882.165349060683, 1642.140758294793], 
            NormalDistribution[13543.484268125012`, 1642.140758294793], 
            NormalDistribution[8243.007559829734, 1642.140758294793], 
            NormalDistribution[11985.221646325552`, 1642.140758294793], 
            NormalDistribution[7729.685273796241, 1642.140758294793], 
            NormalDistribution[6094.830528036286, 1642.140758294793], 
            NormalDistribution[16852.44429688953, 1642.140758294793], 
            NormalDistribution[12212.017616023015`, 1642.140758294793], 
            NormalDistribution[10013.406704138224`, 1642.140758294793], 
            NormalDistribution[4478.5188572213465`, 1642.140758294793], 
            NormalDistribution[1299.24716047738, 1642.140758294793], 
            NormalDistribution[6733.720592703594, 1642.140758294793], 
            NormalDistribution[10129.68251677254, 1642.140758294793], 
            NormalDistribution[12833.512502315649`, 1642.140758294793], 
            NormalDistribution[11396.258099066312`, 1642.140758294793], 
            NormalDistribution[2901.2246080210407`, 1642.140758294793], 
            NormalDistribution[3845.538117904094, 1642.140758294793], 
            NormalDistribution[14229.748728619137`, 1642.140758294793], 
            NormalDistribution[5059.459923142213, 1642.140758294793], 
            NormalDistribution[7208.725406528824, 1642.140758294793], 
            NormalDistribution[2385.1917807152877`, 1642.140758294793], 
            NormalDistribution[7137.480497762425, 1642.140758294793], 
            NormalDistribution[6821.628261002263, 1642.140758294793], 
            NormalDistribution[4847.796087279579, 1642.140758294793], 
            NormalDistribution[11727.215852410207`, 1642.140758294793], 
            NormalDistribution[37700.19426473853, 1642.140758294793], 
            NormalDistribution[43563.533504181694`, 1642.140758294793], 
            NormalDistribution[1710.1510981205975`, 1642.140758294793], 
            NormalDistribution[13160.069542748675`, 1642.140758294793], 
            NormalDistribution[12195.712367958646`, 1642.140758294793], 
            NormalDistribution[1117.6182743234076`, 1642.140758294793], 
            NormalDistribution[37476.56052120291, 1642.140758294793], 
            NormalDistribution[5559.4553841367615`, 1642.140758294793], 
            NormalDistribution[9722.325573520218, 1642.140758294793], 
            NormalDistribution[5035.75032490769, 1642.140758294793], 
            NormalDistribution[9871.559198241388, 1642.140758294793], 
            NormalDistribution[11682.173073248196`, 1642.140758294793], 
            NormalDistribution[8632.534255433071, 1642.140758294793], 
            NormalDistribution[41339.361837499346`, 1642.140758294793], 
            NormalDistribution[5731.691590534803, 1642.140758294793], 
            NormalDistribution[641.6639093242193, 1642.140758294793], 
            NormalDistribution[3310.247470854729, 1642.140758294793], 
            NormalDistribution[19083.587118468535`, 1642.140758294793], 
            NormalDistribution[37828.77699622598, 1642.140758294793], 
            NormalDistribution[5487.857402109089, 1642.140758294793], 
            NormalDistribution[7655.731678919048, 1642.140758294793], 
            NormalDistribution[1134.4459099607266`, 1642.140758294793], 
            NormalDistribution[15619.023143312399`, 1642.140758294793], 
            NormalDistribution[5461.365370985147, 1642.140758294793], 
            NormalDistribution[10074.137036241536`, 1642.140758294793], 
            NormalDistribution[4135.22958632317, 1642.140758294793], 
            NormalDistribution[10835.846361238133`, 1642.140758294793], 
            NormalDistribution[2246.600334951274, 1642.140758294793], 
            NormalDistribution[3890.7978358662294`, 1642.140758294793], 
            NormalDistribution[16736.924063158047`, 1642.140758294793], 
            NormalDistribution[13544.503787590498`, 1642.140758294793], 
            NormalDistribution[14394.377316216567`, 1642.140758294793], 
            NormalDistribution[6761.011057782285, 1642.140758294793], 
            NormalDistribution[16541.106721948785`, 1642.140758294793], 
            NormalDistribution[6471.342519241123, 1642.140758294793], 
            NormalDistribution[8013.024461784592, 1642.140758294793], 
            NormalDistribution[5453.08976868995, 1642.140758294793], 
            NormalDistribution[17565.835610305934`, 1642.140758294793], 
            NormalDistribution[5942.988077709795, 1642.140758294793], 
            NormalDistribution[2596.9872604248176`, 1642.140758294793], 
            NormalDistribution[5247.577212199389, 1642.140758294793], 
            NormalDistribution[1386.331519010544, 1642.140758294793], 
            NormalDistribution[38064.497314346496`, 1642.140758294793], 
            NormalDistribution[1798.0352158706428`, 1642.140758294793], 
            NormalDistribution[43077.122176655015`, 1642.140758294793], 
            NormalDistribution[4142.244176180964, 1642.140758294793], 
            NormalDistribution[39569.40259801066, 1642.140758294793], 
            NormalDistribution[6699.746749512472, 1642.140758294793], 
            NormalDistribution[12578.981806721104`, 1642.140758294793], 
            NormalDistribution[35800.00122951662, 1642.140758294793], 
            NormalDistribution[13344.453649560273`, 1642.140758294793], 
            NormalDistribution[5385.127041661488, 1642.140758294793], 
            NormalDistribution[4552.846640837748, 1642.140758294793], 
            NormalDistribution[7454.043848466027, 1642.140758294793], 
            NormalDistribution[11766.178311783642`, 1642.140758294793], 
            NormalDistribution[12813.229573302277`, 1642.140758294793], 
            NormalDistribution[9509.438818371309, 1642.140758294793], 
            NormalDistribution[4408.711706125892, 1642.140758294793], 
            NormalDistribution[4017.9482494573276`, 1642.140758294793], 
            NormalDistribution[6535.724788752954, 1642.140758294793], 
            NormalDistribution[9110.994353385951, 1642.140758294793], 
            NormalDistribution[24020.95679797102, 1642.140758294793], 
            NormalDistribution[3354.532945772642, 1642.140758294793], 
            NormalDistribution[4150.235246169301, 1642.140758294793], 
            NormalDistribution[36364.0370471884, 1642.140758294793], 
            NormalDistribution[7819.222558605251, 1642.140758294793], 
            NormalDistribution[10228.06885737227, 1642.140758294793], 
            NormalDistribution[11784.842736758654`, 1642.140758294793], 
            NormalDistribution[6853.019018610854, 1642.140758294793], 
            NormalDistribution[4439.966814643309, 1642.140758294793], 
            NormalDistribution[6729.093816242555, 1642.140758294793], 
            NormalDistribution[38632.34984037406, 1642.140758294793], 
            NormalDistribution[17457.6810132653, 1642.140758294793], 
            NormalDistribution[36286.463414362974`, 1642.140758294793], 
            NormalDistribution[13693.29262399168, 1642.140758294793], 
            NormalDistribution[18087.934280564194`, 1642.140758294793], 
            NormalDistribution[4266.852432490481, 1642.140758294793], 
            NormalDistribution[18142.578055343798`, 1642.140758294793], 
            NormalDistribution[9778.371357118951, 1642.140758294793], 
            NormalDistribution[4549.89732288427, 1642.140758294793], 
            NormalDistribution[18610.605457897902`, 1642.140758294793], 
            NormalDistribution[17341.594668586513`, 1642.140758294793], 
            NormalDistribution[14755.568013568665`, 1642.140758294793], 
            NormalDistribution[8818.177418815758, 1642.140758294793], 
            NormalDistribution[5632.287804167428, 1642.140758294793], 
            NormalDistribution[44598.885313919796`, 1642.140758294793], 
            NormalDistribution[2919.517527664324, 1642.140758294793], 
            NormalDistribution[13613.878026345126`, 1642.140758294793], 
            NormalDistribution[14967.710662974503`, 1642.140758294793], 
            NormalDistribution[14868.277306032149`, 1642.140758294793], 
            NormalDistribution[8864.20980125197, 1642.140758294793], 
            NormalDistribution[14671.304684600302`, 1642.140758294793], 
            NormalDistribution[15481.838103127588`, 1642.140758294793], 
            NormalDistribution[42404.60735736559, 1642.140758294793], 
            NormalDistribution[18771.788440679476`, 1642.140758294793], 
            NormalDistribution[10394.390107169427`, 1642.140758294793], 
            NormalDistribution[9952.29561624334, 1642.140758294793], 
            NormalDistribution[6348.015326252808, 1642.140758294793], 
            NormalDistribution[11170.099548941287`, 1642.140758294793], 
            NormalDistribution[17182.80824545222, 1642.140758294793], 
            NormalDistribution[12360.23739500368, 1642.140758294793], 
            NormalDistribution[4473.326987137516, 1642.140758294793], 
            NormalDistribution[6579.364168409806, 1642.140758294793], 
            NormalDistribution[16068.206024310133`, 1642.140758294793], 
            NormalDistribution[18401.58360522644, 1642.140758294793], 
            NormalDistribution[5485.360273939583, 1642.140758294793], 
            NormalDistribution[6798.30801649283, 1642.140758294793], 
            NormalDistribution[19352.196440887896`, 1642.140758294793], 
            NormalDistribution[24152.916385744604`, 1642.140758294793], 
            NormalDistribution[11001.004243596648`, 1642.140758294793], 
            NormalDistribution[5118.026796499282, 1642.140758294793], 
            NormalDistribution[5380.086602900088, 1642.140758294793], 
            NormalDistribution[1975.6763934072442`, 1642.140758294793], 
            NormalDistribution[13136.989830062143`, 1642.140758294793], 
            NormalDistribution[12660.725526018407`, 1642.140758294793], 
            NormalDistribution[3824.827258357196, 1642.140758294793], 
            NormalDistribution[7095.354490390349, 1642.140758294793], 
            NormalDistribution[12783.56780425672, 1642.140758294793], 
            NormalDistribution[19178.901778898286`, 1642.140758294793], 
            NormalDistribution[9053.913732223376, 1642.140758294793], 
            NormalDistribution[11337.079206023822`, 1642.140758294793], 
            NormalDistribution[3830.960369409613, 1642.140758294793], 
            NormalDistribution[16035.40259070399, 1642.140758294793], 
            NormalDistribution[5163.762536356553, 1642.140758294793], 
            NormalDistribution[39985.44291359717, 1642.140758294793], 
            NormalDistribution[13174.225655105327`, 1642.140758294793], 
            NormalDistribution[1548.9672983966138`, 1642.140758294793], 
            NormalDistribution[20130.8516896448, 1642.140758294793], 
            NormalDistribution[8851.669331751309, 1642.140758294793], 
            NormalDistribution[4571.007530941408, 1642.140758294793], 
            NormalDistribution[3277.384480605484, 1642.140758294793], 
            NormalDistribution[11521.94947132458, 1642.140758294793], 
            NormalDistribution[16771.80638981104, 1642.140758294793], 
            NormalDistribution[7215.437475932727, 1642.140758294793], 
            NormalDistribution[18571.90335961199, 1642.140758294793], 
            NormalDistribution[18113.175730423573`, 1642.140758294793], 
            NormalDistribution[17346.828987477526`, 1642.140758294793], 
            NormalDistribution[11344.78058035524, 1642.140758294793], 
            NormalDistribution[5016.914609202676, 1642.140758294793], 
            NormalDistribution[7322.384080612178, 1642.140758294793], 
            NormalDistribution[5817.659263465562, 1642.140758294793], 
            NormalDistribution[9051.661220588821, 1642.140758294793], 
            NormalDistribution[10745.69813812198, 1642.140758294793], 
            NormalDistribution[6084.504999725183, 1642.140758294793], 
            NormalDistribution[8442.4734819617, 1642.140758294793], 
            NormalDistribution[3119.6913631066564`, 1642.140758294793], 
            NormalDistribution[9981.065598965277, 1642.140758294793], 
            NormalDistribution[14401.346739263816`, 1642.140758294793], 
            NormalDistribution[12002.961711753254`, 1642.140758294793], 
            NormalDistribution[5431.199777284894, 1642.140758294793], 
            NormalDistribution[1204.258730328227, 1642.140758294793], 
            NormalDistribution[15719.195612886919`, 1642.140758294793], 
            NormalDistribution[14720.077829697411`, 1642.140758294793], 
            NormalDistribution[11012.505039302901`, 1642.140758294793], 
            NormalDistribution[8920.28828035885, 1642.140758294793], 
            NormalDistribution[11298.764868339666`, 1642.140758294793], 
            NormalDistribution[10644.990653819368`, 1642.140758294793], 
            NormalDistribution[19554.27978895643, 1642.140758294793], 
            NormalDistribution[6158.438165904118, 1642.140758294793], 
            NormalDistribution[8587.684036961607, 1642.140758294793], 
            NormalDistribution[47107.66729775499, 1642.140758294793], 
            NormalDistribution[15765.494327112185`, 1642.140758294793], 
            NormalDistribution[17211.537042973076`, 1642.140758294793], 
            NormalDistribution[12260.267101377736`, 1642.140758294793], 
            NormalDistribution[6166.772141389157, 1642.140758294793], 
            NormalDistribution[5198.053178168201, 1642.140758294793], 
            NormalDistribution[10026.6834692755, 1642.140758294793], 
            NormalDistribution[23553.03978163447, 1642.140758294793], 
            NormalDistribution[5952.101063787164, 1642.140758294793], 
            NormalDistribution[14959.396630817746`, 1642.140758294793], 
            NormalDistribution[46156.32432144147, 1642.140758294793], 
            NormalDistribution[5933.997165093185, 1642.140758294793], 
            NormalDistribution[8711.771310428081, 1642.140758294793], 
            NormalDistribution[5839.916589514385, 1642.140758294793], 
            NormalDistribution[16327.220362232387`, 1642.140758294793], 
            NormalDistribution[12610.463508002955`, 1642.140758294793], 
            NormalDistribution[5288.399438058053, 1642.140758294793], 
            NormalDistribution[13996.357184477862`, 1642.140758294793], 
            NormalDistribution[16341.7250760754, 1642.140758294793], 
            NormalDistribution[3006.844878781092, 1642.140758294793], 
            NormalDistribution[13006.749885852501`, 1642.140758294793], 
            NormalDistribution[19803.948881505105`, 1642.140758294793], 
            NormalDistribution[4890.313808090062, 1642.140758294793], 
            NormalDistribution[33849.79453841809, 1642.140758294793], 
            NormalDistribution[11324.67739271598, 1642.140758294793], 
            NormalDistribution[2559.208471135953, 1642.140758294793], 
            NormalDistribution[4007.6179287599534`, 1642.140758294793], 
            NormalDistribution[2409.526559800104, 1642.140758294793], 
            NormalDistribution[11500.634194623413`, 1642.140758294793], 
            NormalDistribution[15079.835623763402`, 1642.140758294793], 
            NormalDistribution[15197.5112958191, 1642.140758294793], 
            NormalDistribution[5366.283634709145, 1642.140758294793], 
            NormalDistribution[1060.1734780461175`, 1642.140758294793], 
            NormalDistribution[13600.07071414427, 1642.140758294793], 
            NormalDistribution[6913.431667329594, 1642.140758294793], 
            NormalDistribution[1819.7514612655305`, 1642.140758294793], 
            NormalDistribution[20143.88568724299, 1642.140758294793], 
            NormalDistribution[473.01723484043214`, 1642.140758294793], 
            NormalDistribution[9479.171912851121, 1642.140758294793], 
            NormalDistribution[12872.488358859544`, 1642.140758294793], 
            NormalDistribution[10249.278883118192`, 1642.140758294793], 
            NormalDistribution[12098.824860466526`, 1642.140758294793], 
            NormalDistribution[14496.885186423526`, 1642.140758294793], 
            NormalDistribution[11852.54199215283, 1642.140758294793], 
            NormalDistribution[11802.964133776753`, 1642.140758294793], 
            NormalDistribution[15533.758066886938`, 1642.140758294793], 
            NormalDistribution[45762.30054215314, 1642.140758294793], 
            NormalDistribution[5985.765956827966, 1642.140758294793], 
            NormalDistribution[15808.329386718531`, 1642.140758294793], 
            NormalDistribution[12626.413837578059`, 1642.140758294793], 
            NormalDistribution[6591.512478150901, 1642.140758294793], 
            NormalDistribution[44462.4260148867, 1642.140758294793], 
            NormalDistribution[23206.32690444975, 1642.140758294793], 
            NormalDistribution[48884.08116017765, 1642.140758294793], 
            NormalDistribution[12504.964797931005`, 1642.140758294793], 
            NormalDistribution[8015.447037536666, 1642.140758294793], 
            NormalDistribution[17364.141406331983`, 1642.140758294793], 
            NormalDistribution[39770.752150937165`, 1642.140758294793], 
            NormalDistribution[13612.867603199407`, 1642.140758294793], 
            NormalDistribution[15690.254051021768`, 1642.140758294793], 
            NormalDistribution[11618.57637281772, 1642.140758294793], 
            NormalDistribution[13992.981574328616`, 1642.140758294793], 
            NormalDistribution[9604.67843519058, 1642.140758294793], 
            NormalDistribution[44981.75469033219, 1642.140758294793], 
            NormalDistribution[7863.539602438615, 1642.140758294793], 
            NormalDistribution[8877.295426185145, 1642.140758294793], 
            NormalDistribution[2911.9499787756977`, 1642.140758294793], 
            NormalDistribution[7430.53628334361, 1642.140758294793], 
            NormalDistribution[7155.78804495652, 1642.140758294793], 
            NormalDistribution[4294.0404064063805`, 1642.140758294793], 
            NormalDistribution[11451.097371076205`, 1642.140758294793], 
            NormalDistribution[13692.659555622358`, 1642.140758294793], 
            NormalDistribution[11169.289565441804`, 1642.140758294793], 
            NormalDistribution[26052.184311955894`, 1642.140758294793], 
            NormalDistribution[5192.743009000307, 1642.140758294793], 
            NormalDistribution[4609.862125828953, 1642.140758294793], 
            NormalDistribution[5612.428941909639, 1642.140758294793], 
            NormalDistribution[5728.65880298915, 1642.140758294793], 
            NormalDistribution[17910.3713907729, 1642.140758294793], 
            NormalDistribution[23646.813236876937`, 1642.140758294793], 
            NormalDistribution[18889.901549943606`, 1642.140758294793], 
            NormalDistribution[2213.5891969057793`, 1642.140758294793], 
            NormalDistribution[5282.918650553427, 1642.140758294793], 
            NormalDistribution[2728.2489142591803`, 1642.140758294793], 
            NormalDistribution[5896.559660432474, 1642.140758294793], 
            NormalDistribution[8361.999763866046, 1642.140758294793], 
            NormalDistribution[6082.077848068011, 1642.140758294793], 
            NormalDistribution[26093.403835576704`, 1642.140758294793], 
            NormalDistribution[1890.6886146384768`, 1642.140758294793], 
            NormalDistribution[1484.108490449118, 1642.140758294793], 
            NormalDistribution[8864.248323597578, 1642.140758294793], 
            NormalDistribution[20507.194466215213`, 1642.140758294793], 
            NormalDistribution[22780.08283840647, 1642.140758294793], 
            NormalDistribution[9541.037758253493, 1642.140758294793], 
            NormalDistribution[16963.243121058327`, 1642.140758294793], 
            NormalDistribution[8821.49385424676, 1642.140758294793], 
            NormalDistribution[6426.094714594304, 1642.140758294793], 
            NormalDistribution[6675.605242902828, 1642.140758294793], 
            NormalDistribution[4127.9045045717485`, 1642.140758294793], 
            NormalDistribution[7966.169863977424, 1642.140758294793], 
            NormalDistribution[3531.472858231682, 1642.140758294793], 
            NormalDistribution[17379.41205694849, 1642.140758294793], 
            NormalDistribution[7894.058636253525, 1642.140758294793], 
            NormalDistribution[16901.19350266249, 1642.140758294793], 
            NormalDistribution[11034.103258955463`, 1642.140758294793], 
            NormalDistribution[20771.175375890976`, 1642.140758294793], 
            NormalDistribution[8734.175135659394, 1642.140758294793], 
            NormalDistribution[14786.749960012148`, 1642.140758294793], 
            NormalDistribution[3913.2154018291058`, 1642.140758294793], 
            NormalDistribution[6895.838306947016, 1642.140758294793], 
            NormalDistribution[11908.72320904663, 1642.140758294793], 
            NormalDistribution[4570.712048180918, 1642.140758294793], 
            NormalDistribution[8761.320193209878, 1642.140758294793], 
            NormalDistribution[2413.3036760781415`, 1642.140758294793], 
            NormalDistribution[24627.91674731933, 1642.140758294793], 
            NormalDistribution[22388.050254681762`, 1642.140758294793], 
            NormalDistribution[10959.282147281103`, 1642.140758294793], 
            NormalDistribution[16044.154317654378`, 1642.140758294793], 
            NormalDistribution[8713.919361332188, 1642.140758294793], 
            NormalDistribution[7792.290096872574, 1642.140758294793], 
            NormalDistribution[4260.6213589107465`, 1642.140758294793], 
            NormalDistribution[9125.845402856188, 1642.140758294793], 
            NormalDistribution[11734.785965847188`, 1642.140758294793], 
            NormalDistribution[17926.626165497662`, 1642.140758294793], 
            NormalDistribution[1278.2272713123893`, 1642.140758294793], 
            NormalDistribution[6452.098663560921, 1642.140758294793], 
            NormalDistribution[8726.881075797417, 1642.140758294793], 
            NormalDistribution[7757.951127693728, 1642.140758294793], 
            NormalDistribution[19807.43272744656, 1642.140758294793], 
            NormalDistribution[1238.1335118020106`, 1642.140758294793], 
            NormalDistribution[42348.04616154621, 1642.140758294793], 
            NormalDistribution[8436.186865203945, 1642.140758294793], 
            NormalDistribution[15592.6279279136, 1642.140758294793], 
            NormalDistribution[35358.16987522705, 1642.140758294793], 
            NormalDistribution[10718.390972479701`, 1642.140758294793], 
            NormalDistribution[19682.61767715175, 1642.140758294793], 
            NormalDistribution[4295.8103842413275`, 1642.140758294793], 
            NormalDistribution[1704.510843114971, 1642.140758294793], 
            NormalDistribution[10227.296827612778`, 1642.140758294793], 
            NormalDistribution[37544.13697114223, 1642.140758294793], 
            NormalDistribution[20140.58551838562, 1642.140758294793], 
            NormalDistribution[6108.278877112245, 1642.140758294793], 
            NormalDistribution[2840.3981072383776`, 1642.140758294793], 
            NormalDistribution[7654.407477955786, 1642.140758294793], 
            NormalDistribution[8141.60882338899, 1642.140758294793], 
            NormalDistribution[11238.286666928812`, 1642.140758294793], 
            NormalDistribution[4606.7651447641365`, 1642.140758294793], 
            NormalDistribution[9049.30654080057, 1642.140758294793], 
            NormalDistribution[22122.23496813178, 1642.140758294793], 
            NormalDistribution[6665.508139225348, 1642.140758294793], 
            NormalDistribution[3251.0631274191037`, 1642.140758294793], 
            NormalDistribution[15366.801867183913`, 1642.140758294793], 
            NormalDistribution[40669.497637355824`, 1642.140758294793], 
            NormalDistribution[17141.935727796703`, 1642.140758294793], 
            NormalDistribution[11589.295584608248`, 1642.140758294793], 
            NormalDistribution[4345.597682331496, 1642.140758294793], 
            NormalDistribution[8143.983422528176, 1642.140758294793], 
            NormalDistribution[1878.4224247317943`, 1642.140758294793], 
            NormalDistribution[3048.38169666841, 1642.140758294793], 
            NormalDistribution[10828.63767648222, 1642.140758294793], 
            NormalDistribution[6830.555605223357, 1642.140758294793], 
            NormalDistribution[6504.247746269308, 1642.140758294793], 
            NormalDistribution[12483.997819231514`, 1642.140758294793], 
            NormalDistribution[46798.295738739886`, 1642.140758294793], 
            NormalDistribution[8165.147079856017, 1642.140758294793], 
            NormalDistribution[12415.223012055983`, 1642.140758294793], 
            NormalDistribution[5951.211640944731, 1642.140758294793], 
            NormalDistribution[11014.009567715104`, 1642.140758294793], 
            NormalDistribution[5554.714423789193, 1642.140758294793], 
            NormalDistribution[9359.501514738968, 1642.140758294793], 
            NormalDistribution[38589.85702962768, 1642.140758294793], 
            NormalDistribution[22424.059659403712`, 1642.140758294793], 
            NormalDistribution[14804.148068760962`, 1642.140758294793], 
            NormalDistribution[6679.088238333591, 1642.140758294793], 
            NormalDistribution[12262.56764751334, 1642.140758294793], 
            NormalDistribution[15944.695634812238`, 1642.140758294793], 
            NormalDistribution[1623.8489730775145`, 1642.140758294793], 
            NormalDistribution[2993.0130411812534`, 1642.140758294793], 
            NormalDistribution[5032.737743070982, 1642.140758294793], 
            NormalDistribution[37009.13888504255, 1642.140758294793], 
            NormalDistribution[21444.779594563777`, 1642.140758294793], 
            NormalDistribution[7346.769777645093, 1642.140758294793], 
            NormalDistribution[13823.358564605956`, 1642.140758294793], 
            NormalDistribution[14707.896389773148`, 1642.140758294793], 
            NormalDistribution[12681.418706726028`, 1642.140758294793], 
            NormalDistribution[44640.80903573258, 1642.140758294793], 
            NormalDistribution[4296.823361316863, 1642.140758294793], 
            NormalDistribution[804.0163487625614, 1642.140758294793], 
            NormalDistribution[12392.8046394267, 1642.140758294793], 
            NormalDistribution[4363.8953053023415`, 1642.140758294793], 
            NormalDistribution[13096.551037921996`, 1642.140758294793], 
            NormalDistribution[37253.89116876283, 1642.140758294793], 
            NormalDistribution[10570.110625697027`, 1642.140758294793], 
            NormalDistribution[19778.680436922707`, 1642.140758294793], 
            NormalDistribution[10734.388725133547`, 1642.140758294793], 
            NormalDistribution[8585.086453305932, 1642.140758294793], 
            NormalDistribution[5845.876737930758, 1642.140758294793], 
            NormalDistribution[5505.518797866627, 1642.140758294793], 
            NormalDistribution[13365.171257702294`, 1642.140758294793], 
            NormalDistribution[5600.9748688011105`, 1642.140758294793], 
            NormalDistribution[4635.0481380106285`, 1642.140758294793], 
            NormalDistribution[11580.390681469755`, 1642.140758294793], 
            NormalDistribution[14352.410577333525`, 1642.140758294793], 
            NormalDistribution[22770.414186255977`, 1642.140758294793], 
            NormalDistribution[41346.33152738019, 1642.140758294793], 
            NormalDistribution[16061.807203166976`, 1642.140758294793], 
            NormalDistribution[37236.61697527743, 1642.140758294793], 
            NormalDistribution[13204.428073555137`, 1642.140758294793], 
            NormalDistribution[39103.3589426291, 1642.140758294793], 
            NormalDistribution[3623.434092694657, 1642.140758294793], 
            NormalDistribution[40312.84777138295, 1642.140758294793], 
            NormalDistribution[8068.123960266341, 1642.140758294793], 
            NormalDistribution[8048.085774525317, 1642.140758294793], 
            NormalDistribution[3586.5978888183836`, 1642.140758294793], 
            NormalDistribution[6683.591369447617, 1642.140758294793], 
            NormalDistribution[1154.037552582613, 1642.140758294793], 
            NormalDistribution[39750.706511667064`, 1642.140758294793], 
            NormalDistribution[7354.78091016337, 1642.140758294793], 
            NormalDistribution[10069.970062371623`, 1642.140758294793], 
            NormalDistribution[3225.585699377245, 1642.140758294793], 
            NormalDistribution[15607.502076815834`, 1642.140758294793], 
            NormalDistribution[36459.5032413581, 1642.140758294793], 
            NormalDistribution[10550.471895336697`, 1642.140758294793], 
            NormalDistribution[7464.125943695439, 1642.140758294793], 
            NormalDistribution[7242.018963449451, 1642.140758294793], 
            NormalDistribution[4237.167457142474, 1642.140758294793], 
            NormalDistribution[17876.68305439646, 1642.140758294793], 
            NormalDistribution[2077.9535549671673`, 1642.140758294793], 
            NormalDistribution[13690.9277329371, 1642.140758294793], 
            NormalDistribution[20379.939250730295`, 1642.140758294793], 
            NormalDistribution[14963.587344999843`, 1642.140758294793], 
            NormalDistribution[4016.3836848551164`, 1642.140758294793], 
            NormalDistribution[14510.427895944464`, 1642.140758294793], 
            NormalDistribution[4189.44599163913, 1642.140758294793], 
            NormalDistribution[13271.658027561549`, 1642.140758294793], 
            NormalDistribution[12753.646623969049`, 1642.140758294793], 
            NormalDistribution[1255.723232766095, 1642.140758294793], 
            NormalDistribution[44395.35676595485, 1642.140758294793], 
            NormalDistribution[9651.053188086158, 1642.140758294793], 
            NormalDistribution[11161.296263505148`, 1642.140758294793], 
            NormalDistribution[3884.4968724351365`, 1642.140758294793], 
            NormalDistribution[5836.24980225081, 1642.140758294793], 
            NormalDistribution[6757.777310281999, 1642.140758294793], 
            NormalDistribution[3354.077398817786, 1642.140758294793], 
            NormalDistribution[6984.445869846692, 1642.140758294793], 
            NormalDistribution[36031.1262219175, 1642.140758294793], 
            NormalDistribution[14095.080417056073`, 1642.140758294793], 
            NormalDistribution[6385.142443150078, 1642.140758294793], 
            NormalDistribution[5503.747504703019, 1642.140758294793], 
            NormalDistribution[1555.7949386052096`, 1642.140758294793], 
            NormalDistribution[6154.87447608764, 1642.140758294793], 
            NormalDistribution[12109.689986946552`, 1642.140758294793]}, 
          "Modes" -> CompressedData["
1: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
LiSNoRX5+Cp7PeBYWC1cz7v5latzcSPmz1bRZBp8zhx/lWnUgo/USsrOXzSw
B4fFX9LIoCcOufS1FcOh9zvHz6cIR8voY+EydUh35Xvzu68IFg10E+F1Begr
7OLXiGNg/jQrUFOQhVmJZb7Ruu2YPvM55qT6IAp+3DYZucRB3/fDlaHbuWAd
3FC/u64WSXD3GpMawGyD/aHeM1kIuPNDbl3uACaUP5Zt9KuCRIXxtKRzFTQL
PWU1lmTh0vT8lbfrSGjcusNti2AIhC5UxrRfG0CdF2mUSSpH9Cyf6nwGFeu/
1fap7krHikgRPbInG/1xgTLODf2QWxC/qhtDg3B45365rRXYPVDbLXCyHNdS
7veqBObhVa1yiap7EzpPX9j7RecD5Ccmq+5W1MF8be76+eEWDM/Ibq/f1wC7
y+auNJtc1Jifou82Z+G8uK+a68U8WOkd1G4dq8XEQgit+UsN1ppvejsYF4pA
pw83bmYP4RR/L9u/qxrsazNjySw67M6JO/yzyEGB8fLJg6xiCD5m/2XYk6B/
qemDkmYGmoj+iq76ZZh5uWj54Nt+TGxdd+rFs3rIPVK6p/ijFKs+3bOqelSE
xkpbge2GkXillfHp8/JSiC7xNu5MYeJ/CDTzag==
           "], "Weights" -> 
          SparseArray[Automatic, {892}, 1., {1, {{0, 0}, {}}, {}}], 
          "BatchEvaluationTime" -> 0.000531441928251121, 
          "SingleEvaluationTime" -> 0.0069056999999999999`2., 
          "Version" -> {12.1, 1}]], Format[
         HoldPattern[
          MachineLearning`DecisionTree[
           Blank[Association]]]] := StringJoin[
         ToString[MachineLearning`DecisionTree], "[\[Ellipsis]]"], 
       UpSetDelayed[
        MakeBoxes[
         Pattern[MachineLearning`file114SummaryBoxes`PackagePrivate`object$, 
          MachineLearning`DecisionTree[
           Blank[Association]]], 
         Pattern[MachineLearning`file114SummaryBoxes`PackagePrivate`fmt$, 
          Blank[]]], 
        Module[{MachineLearning`file114SummaryBoxes`PackagePrivate`display$}, 
         MachineLearning`file114SummaryBoxes`PackagePrivate`display$ = Quiet[
            Check[
             BoxForm`ArrangeSummaryBox[
             MachineLearning`DecisionTree, 
              MachineLearning`file114SummaryBoxes`PackagePrivate`object$, 
              
              MachineLearning`file114SummaryBoxes`PackagePrivate`iconfunc$\
8978[MachineLearning`file114SummaryBoxes`PackagePrivate`object$], 
              
              MachineLearning`file114SummaryBoxes`PackagePrivate`\
formatInformation[
               MachineLearning`file21DecisionTree`PackagePrivate`info[
               MachineLearning`file114SummaryBoxes`PackagePrivate`object$]], 
              MachineLearning`file114SummaryBoxes`PackagePrivate`fmt$, 
              "Interpretable" -> Automatic], $Failed]]; 
         Condition[
          MachineLearning`file114SummaryBoxes`PackagePrivate`display$, 
           Not[
            FailureQ[
            MachineLearning`file114SummaryBoxes`PackagePrivate`display$]]]]], 
       Attributes[MakeBoxes] = {HoldAllComplete}, 
       Attributes[
        MachineLearning`file114SummaryBoxes`PackagePrivate`object$] = {
        Temporary}, 
       Attributes[MachineLearning`file114SummaryBoxes`PackagePrivate`fmt$] = {
        Temporary}, 
       Attributes[
        MachineLearning`file114SummaryBoxes`PackagePrivate`display$] = {
        Temporary}, 
       Attributes[
        MachineLearning`file114SummaryBoxes`PackagePrivate`iconfunc$8978] = {
        Temporary}, 
       MachineLearning`file114SummaryBoxes`PackagePrivate`iconfunc$8978 = 
       None& , MachineLearning`file114SummaryBoxes`PackagePrivate`\
formatInformation[
         Pattern[MachineLearning`file114SummaryBoxes`PackagePrivate`lists, {
           Blank[List], 
           Blank[List]}]] := Apply[Sequence, 
         Apply[BoxForm`SummaryItem[{
            
            MachineLearning`file114SummaryBoxes`PackagePrivate`infokey[#], \
#2}]& , MachineLearning`file114SummaryBoxes`PackagePrivate`lists, {2}]], 
       MachineLearning`file114SummaryBoxes`PackagePrivate`formatInformation[
         Pattern[MachineLearning`file114SummaryBoxes`PackagePrivate`list, 
          Blank[List]]] := 
       MachineLearning`file114SummaryBoxes`PackagePrivate`formatInformation[{
         MachineLearning`file114SummaryBoxes`PackagePrivate`list, {}}], 
       MachineLearning`file114SummaryBoxes`PackagePrivate`infokey[None] := 
       Nothing, MachineLearning`file114SummaryBoxes`PackagePrivate`infokey[
         Pattern[MachineLearning`file114SummaryBoxes`PackagePrivate`key, 
          Blank[]]] := StringJoin[
         ToString[MachineLearning`file114SummaryBoxes`PackagePrivate`key], 
         ": "], MachineLearning`file21DecisionTree`PackagePrivate`info[
         MachineLearning`DecisionTree[
          Pattern[MachineLearning`file21DecisionTree`PackagePrivate`data, 
           Blank[]]]] := {{"Number of nodes" -> Length[
             MachineLearning`file21DecisionTree`PackagePrivate`data[
             "LeafValues"]] + Length[
             MachineLearning`file21DecisionTree`PackagePrivate`data[
             "NumericalThresholds"]] + Length[
             MachineLearning`file21DecisionTree`PackagePrivate`data[
             "NominalSplits"]], "Number of leaves" -> Length[
            MachineLearning`file21DecisionTree`PackagePrivate`data[
            "LeafValues"]]}, {"Number of numerical nodes" -> Length[
            MachineLearning`file21DecisionTree`PackagePrivate`data[
            "NumericalThresholds"]], "Number of nominal nodes" -> Length[
            MachineLearning`file21DecisionTree`PackagePrivate`data[
            "NominalSplits"]]}}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.815321070328853*^9, 3.8153218374408255`*^9, 
  3.8153219885721626`*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"90362627-9943-4f2d-a46d-f12ec2a0f362"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 15", "Subsection",
 CellChangeTimes->{{3.7802074717733994`*^9, 3.7802074742619233`*^9}, {
  3.8144381538950443`*^9, 
  3.814438154452552*^9}},ExpressionUUID->"b392d5b9-5937-4dcb-9c82-\
fe04831af5f7"],

Cell["\<\
Get an estimate of the typical error of predictions in terms of their \
standard deviation and a histogram of residuals. Draw a comparison plot and \
comment on the results.\
\>", "Text",
 CellChangeTimes->{{3.780207477893553*^9, 3.780207516382572*^9}, {
  3.7802076865338745`*^9, 
  3.780207724121525*^9}},ExpressionUUID->"38e00dec-f68b-4833-9118-\
fb250259d301"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"insuranceperformance", "[", "prop", "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"prop", ",", " ", 
      RowBox[{"insuranceperformance", "[", "\"\<Properties\>\"", "]"}]}], 
     "}"}], ",", " ", 
    RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{3.8153211522776623`*^9},
 CellLabel->"In[44]:=",ExpressionUUID->"bfed0e3e-090e-4bb1-b4ce-fbee018fae15"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"predictorcomparison", " ", "=", " ", 
   RowBox[{"Dataset", "@", 
    RowBox[{"ReverseSort", "@", 
     RowBox[{"AssociationMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"PredictorMeasurements", "[", 
         RowBox[{
          RowBox[{"Predict", "[", 
           RowBox[{"trainingdata", ",", " ", 
            RowBox[{"Method", "\[Rule]", "#"}]}], "]"}], ",", " ", 
          "testingdata", ",", " ", 
          RowBox[{"{", 
           RowBox[{
           "\"\<RSquared\>\"", ",", " ", "\"\<StandardDeviation\>\""}], 
           "}"}]}], "]"}], "&"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
        "\"\<RandomForest\>\"", ",", " ", "\"\<NearestNeighbors\>\"", ",", 
         " ", "\"\<LinearRegression\>\"", ",", " ", 
         "\"\<GradientBoostedTrees\>\"", ",", " ", "\"\<DecisionTree\>\"", 
         ",", " ", "\"\<NeuralNetwork\>\"", ",", " ", 
         "\"\<Gaussianprocess\>\""}], "}"}]}], "]"}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.815321204702117*^9, 3.815321356942396*^9}, 
   3.815322266752801*^9, {3.815322395038344*^9, 3.815322439701678*^9}, 
   3.815322581510002*^9, 3.815322618275995*^9},
 CellLabel->"In[61]:=",ExpressionUUID->"d7977494-362b-461c-87a1-f4bb52a68cee"],

Cell[BoxData[
 TemplateBox[{
  "Predict", "elmntavsl", 
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"\\\\\\\\\\\\\\\"Gaussianprocess\\\\\\\\\\\\\
\\\"\\\\\\\"\\\"}]\\) is not an available \\!\\(\\*RowBox[{\\\"\\\\\\\"method\
\\\\\\\"\\\"}]\\). Did you mean \
\\!\\(\\*RowBox[{\\\"\\\\\\\"\\\\\\\\\\\\\\\"GaussianProcess\\\\\\\\\\\\\\\"\\\
\\\\\"\\\"}]\\) instead? Possible \
\\!\\(\\*RowBox[{\\\"\\\\\\\"methods\\\\\\\"\\\"}]\\) also include \
\\!\\(\\*RowBox[{\\\"\\\\\\\"\\\\\\\\\\\\\\\"DecisionTree\\\\\\\\\\\\\\\", \\\
\\\\\\\\\\\\\"GradientBoostedTrees\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"LinearRegression\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"NearestNeighbors\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"NeuralNetwork\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"RandomForest\\\
\\\\\\\\\\\\\", and Automatic\\\\\\\"\\\"}]\\).\"", 2, 61, 36, 
   27412603014757499544, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8153224055403194`*^9, 3.8153224700194683`*^9, 
  3.8153226091035595`*^9, 3.8153226501306725`*^9},
 CellLabel->
  "During evaluation of \
In[61]:=",ExpressionUUID->"bc333652-d48f-417c-becf-66bcf105fd31"],

Cell[BoxData[
 TemplateBox[{
  "PredictorMeasurements", "wrgfunc", 
   "\"The first argument should be a \\!\\(\\*RowBox[{\\\"PredictorFunction\\\
\"}]\\) instead of \\!\\(\\*RowBox[{\\\"Predict\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{RowBox[{RowBox[{\\\"{\\\", \
RowBox[{\\\"19\\\", \\\",\\\", \\\"\\\\\\\"male\\\\\\\"\\\", \\\",\\\", \
\\\"29.07`\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \\\"\\\\\\\"yes\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"northwest\\\\\\\"\\\"}], \\\"}\\\"}], \\\"\[Rule]\\\", \
\\\"17352.6803`\\\"}], \\\",\\\", RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"26\\\
\", \\\",\\\", \\\"\\\\\\\"female\\\\\\\"\\\", \\\",\\\", \\\"40.185`\\\", \\\
\",\\\", \\\"0\\\", \\\",\\\", \\\"\\\\\\\"no\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"northwest\\\\\\\"\\\"}], \\\"}\\\"}], \\\"\[Rule]\\\", \
\\\"3201.24515`\\\"}], \\\",\\\", RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"18\\\
\", \\\",\\\", \\\"\\\\\\\"female\\\\\\\"\\\", \\\",\\\", \\\"28.215`\\\", \\\
\",\\\", \\\"0\\\", \\\",\\\", \\\"\\\\\\\"no\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"northeast\\\\\\\"\\\"}], \\\"}\\\"}], \\\"\[Rule]\\\", \
\\\"2200.83085`\\\"}], \\\",\\\", RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"39\\\
\", \\\",\\\", \\\"\\\\\\\"female\\\\\\\"\\\", \\\",\\\", \\\"24.225`\\\", \\\
\",\\\", \\\"5\\\", \\\",\\\", \\\"\\\\\\\"no\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"northwest\\\\\\\"\\\"}], \\\"}\\\"}], \\\"\[Rule]\\\", \
\\\"8965.79575`\\\"}], \\\",\\\", RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"64\\\
\", \\\",\\\", \\\"\\\\\\\"female\\\\\\\"\\\", \\\",\\\", \\\"26.885`\\\", \\\
\",\\\", \\\"0\\\", \\\",\\\", \\\"\\\\\\\"yes\\\\\\\"\\\", \\\",\\\", \\\"\\\
\\\\\"northwest\\\\\\\"\\\"}], \\\"}\\\"}], \\\"\[Rule]\\\", \\\"29330.98315`\
\\\"}], \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"41\\\", \\\"\
\[RightSkeleton]\\\"}], \\\",\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{\\\"19\\\", \\\",\\\", \\\"\\\\\\\"female\\\\\\\"\\\", \\\",\\\", \
\\\"28.4`\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \\\"\\\\\\\"no\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"southwest\\\\\\\"\\\"}], \\\"}\\\"}], \\\"\[Rule]\\\", \
\\\"2331.519`\\\"}], \\\",\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{\\\"46\\\", \\\",\\\", \\\"\\\\\\\"male\\\\\\\"\\\", \\\",\\\", \
\\\"40.375`\\\", \\\",\\\", \\\"2\\\", \\\",\\\", \\\"\\\\\\\"no\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"northwest\\\\\\\"\\\"}], \\\"}\\\"}], \\\"\[Rule]\\\", \
\\\"8733.22925`\\\"}], \\\",\\\", RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"52\\\
\", \\\",\\\", \\\"\\\\\\\"female\\\\\\\"\\\", \\\",\\\", \\\"37.4`\\\", \
\\\",\\\", \\\"0\\\", \\\",\\\", \\\"\\\\\\\"no\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"southwest\\\\\\\"\\\"}], \\\"}\\\"}], \\\"\[Rule]\\\", \
\\\"9634.538`\\\"}], \\\",\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{\\\"22\\\", \\\",\\\", \\\"\\\\\\\"female\\\\\\\"\\\", \\\",\\\", \
\\\"28.05`\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \\\"\\\\\\\"no\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"southeast\\\\\\\"\\\"}], \\\"}\\\"}], \\\"\[Rule]\\\", \
\\\"2155.6815`\\\"}], \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \
\\\"396\\\", \\\"\[RightSkeleton]\\\"}]}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\
\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}]}], \
\\\"]\\\"}]\\).\"", 2, 61, 37, 27412603014757499544, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8153224055403194`*^9, 3.8153224700194683`*^9, 
  3.8153226091035595`*^9, 3.815322650218642*^9},
 CellLabel->
  "During evaluation of \
In[61]:=",ExpressionUUID->"d8ab76b1-ebc8-4668-8924-37ff12b4e366"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rock-Scissors using SequencePredict", "Section",
 CellChangeTimes->{{3.780193593263592*^9, 
  3.780193618233698*^9}},ExpressionUUID->"13a5c354-ce61-407e-a511-\
615adc209539"],

Cell[TextData[{
 "As shown in lectures, SequencePredict allows for the modeling of a sequence \
in order to predict its future evolution. In this exercise, you will use \
SequencePredict to predict the next action of an opponent in the \
rock\[Dash]paper\[Dash]scissors game. Rock-paper-scissors is a very well \
known game with very simple rules that you are likely to know: paper wraps \
rock, scissors cut paper and rock crushes scissors. In case you didn\
\[CloseCurlyQuote]t hear about this game before or need a reminder, see a \
complete description ",
 ButtonBox["here",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Rock\[AHat]\.80\.93paper\[AHat]\.80\.93\
scissors"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Rock\[AHat]\.80\.93paper\[AHat]\.80\.93\
scissors"],
 "."
}], "Text",
 CellChangeTimes->{{3.780154708797968*^9, 3.7801547278031178`*^9}, {
   3.780154766214485*^9, 3.780154775883481*^9}, {3.7801936431393547`*^9, 
   3.780193703148947*^9}, 3.7801937591060576`*^9, {3.780194143627027*^9, 
   3.780194144507639*^9}, {3.780194234343754*^9, 3.7801943569799995`*^9}, {
   3.780194390273718*^9, 
   3.780194456694354*^9}},ExpressionUUID->"b021e6fa-c890-4147-8b1d-\
563ffee958d4"],

Cell[TextData[{
 "Suppose you realised that your opponent uses the following sequences of \
rock (",
 Cell[BoxData[
  TagBox[
   GraphicsBox[
    {Thickness[0.0012787723785166241`], 
     FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
        3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
       3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
       "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
       "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
       "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
       "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
       "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
       "]}]},
    AspectRatio->Automatic,
    ImageSize->25,
    PlotRange->{{0., 782.}, {0., 668.}}],
   Deploy,
   DefaultBaseStyle->"Deploy"]],
  CellChangeTimes->{{3.780154747626994*^9, 3.78015474762787*^9}, {
    3.7801550408264236`*^9, 3.78015506109583*^9}, {3.780155259660273*^9, 
    3.780155265170496*^9}, 3.780155304864932*^9, {3.780194189419746*^9, 
    3.780194190674692*^9}},ExpressionUUID->
  "7aa07c1e-4c84-4708-9a25-db0dc1389620"],
 "), paper (",
 Cell[BoxData[
  TagBox[
   GraphicsBox[
    {Thickness[0.0009746588693957114], 
     FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
        3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
       3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
       3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVgtwTGcYjUg1VUOosmOUeAyptxnGK5GzEq+oR6Ql3vGahJjYlZVENtZu
7t69+8ou49lSj6JmMKT1bGvSlIwYVZQoatSjaWkrpFpFUb3fPWnNyExm57/3
/89/vnPO//233ayF4+dGRkRErNH/5ff4qH4+c20mIoy/eqjevr4idsRcRJwf
PSvmUktceeyYfyRqFk7klW1qtbA3fj7b/srjjTPgbHH59MN9g3En9XAbddR7
OLFl6ME/ro7BSfntbkbDi1stCYsyYJo8Z9C1sZ2JuzwTGfqoZG0kdLSeV4vm
w2kQqP5yQuPun364cgEi3v1Rn3k20Zi/YSEijPUPEu+f0/lstuJR3NTw0Qft
kS8AtxZhwRHbSlPyQFzXUXNu5pJfGzO6ajrBSTasMkVNaPxNMvZLARttuKTT
atg5hfV+Z8Mp4ZswBjVFiX2nRyzGhorY0kWXxuBCwS+depvy0O1qxwau7WMh
9O758hFcm9NMGTEOXQS/pACx6m+ph8tSYfDrb8ee1jrhTWkYKBtudSBrhY5c
k4Y1+rJyxzJ4RTclDUt0+GiTEzr66qRRadim07o43Ek9vxiPd3RVMqxO8kkf
y/l9XNis030WNRQjG0V21YqKYZPnuwdDaJVPUdBn+ucjGxX3w8e6fKV93ViX
FFhwyx6Hezt0oYMqegnvhz0gKscu8eBv3V7bPqBp+oD9J6I13Bb9yoZx/TwN
hh0x47jfGg3JOtyTeZPwlviyS2Ode2dBXImr1NBKnu/NhMA40jUIu9ZdsrFG
eGR7EKOUn9xSk8P12SokDTleC7zmjJ/OnlRgb75n+I0jFu6/wcV5xyzQq64q
GO+iL6ct1DXORZ8vW1Cly5/eycW6Iq3optu1o60L03Q5IhNzya91MSRtGW8u
Jp/6Cox49S6gvkE3xzMKqccZFSNuFDbfU+ng+21eiB1ZJhcSJOBVftSKriku
+t8kQF6nXMznkgDaSD70fQx++UHibnJjsKw/FYTOamr4uUqciUHEyPtzHuYh
Joh14qtN4/xQAD0lj7rOBp/bfkwRvp286CXP3/ZjvpyHJl7mfYiP63wa/XB4
mfsCjXme48Uh0dWssZ62XvKPqcOv1jjf6qEPHTSIvKW3VPLI9FDvKBVGrJqr
1LmPG8Yxv6Zwn+o6neco5PGrQl2mK+Rbo3DdVIV1j3bDJ3lYoSBFcveVm/gX
6vAqVcQLvsXNXJ5WIe0q3eYmzyce7tdahdg33K3R9yyVz7t76cOJujpyvfTh
vkq8V308Tyke6jjMRx3meeh/qY86+D3k876f7y946McHAZ7fbz3ECQTJz+lB
reRkaQl59KzDnxxi/U6V+peHiHfUjYFS59MQ85Xqhl90aRnmefhagUd0iQ5T
x2kK6/grxPdVxfz9Dy+rGPMFf2KI+j5ysS81CFGPrS7WV1VCHEfd+Xu9hHXU
dzGfbQJoJud41zK0FR/b+Zi/x0X097qGeMnTK3bqoGroIe/zCyHt8ZpD4/OZ
heR1QMNd6b+WQhyTfa970U0MP1bIfA4NkGeZnXz6BanfyCL2jVAQGXLO7UXU
Ib6E/VktYh3bS6hfRhH1uBYij3t23BQjz4TJRynETTnu9ZbjB+lLxwtgtM/X
lrMPJL0YG/sG8/+fb+BH59O/2jDnz8yjv/vCvF+ci7mvPQyReUWTunGXMPXM
tlGPfSH2wdpc4jqC7CfPrRxXBJjnKVbWe9MP4xpdZaE+mp9+JVt4fp5p1K/x
AvaTdh727aQszn/uZt9OnEu+ihsfyT3z52ziT3Lz/rbMJo+9Cnb+rhPpOBOr
RZA8F76X74Q74yHH7Ub/pbynqs304Xw+773ceOpzIA+lw3WB7g5kXnrZEK3T
bPHZIOrQIRfr5N6uScAAIXRoEb8/zgymn/9Y8VTurTSw/3itqJDnkWa8Ieub
WrFbBPnEzDzttPDexhDI9Ri59cXYOP/rXxrnWpjn1eB9k2LhuTUlUOeKHBiN
pdLEeg9mg8I1LH/5e+pf8dcw3g==
       "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQfevc9+DHkjkODlzXFxfUOjjsmy+lf/cElP/X0aEo
Y+LbmvpcBwHdTXPfs7vC+TL6d1XYCt3g/CtKt3/WvXJzmJYn1HxAL9eBAQQe
uEPkt+c49EwHSlzwABtrK5TlkGJ9379X3c/hAkifXprDN42Y/kNXQx3idnny
MH1Ocjjhbd7pmBDrsMh12+e/LgkOqz5e8k26kOiwTiYqxXp/FET911QHudbX
gTuehTkcA6nPyYTY1x7k8GTp7CMKMbkOVltOlO0rD4C4x6rA4QvQGIEKf4cq
kXXuD8WKHPaUTJZgmebnsANkkFmxw4GvQIMX+TkobACaZFwMcWe4t8MnkL5/
RQ5VL9UMOd44OgB1hfGlFjnkgA2wcjAABkfj0QKHFqBz5FhtHVy6c57/bsyF
yB+xg7hXM9thBcihik4Qf0tlOvjwMGm3H/OAuPdCqoMaW+NU5+RghxmgcDwU
C6Gt4h1OLAQGBK+/QzHIf/uTIfaJujkcB/n7RopDh9jNc983OzuUgOSD0xwW
gMItBRp/69MdOkDuemrvoAfSNzPDIQDk4Y+2Du9q7E3j+DIdZoD802sLUS+f
5fDh75WKl8dsIep9sx1+gPhsdg63ftZl7WnIdjAw5FgjEwXko6UfAIKqB2M=

       "], CompressedData["
1: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
oVjG/cBy4nGgDRiwXxRL///e+xec6JEj
       "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQXZQx8W0Nf77DGpmoFOvyeIcakXXuD0/lOnzTiOk/
FJjgcMzbvNNxQa7DAtdtn/8qJDnsKZkswXIsz0GNrXGq8+0kh3c19qZx7/Ic
FoHkvyQ5tLwO3CF3M99hWp5Q8wG3ZAfLLSfK9qUXQMQnJjssnX1EYYNbkQPX
9cUFtptSHDodE55eaCl2uPOzLmvPllSHapD9k0odnoAUHkmH2O9Q7gAyZn5R
pkP5vvlS+qnlEHubMiHqL5RD1O/IgMgbVziE8Olumvs/3WEGyB1WFQ4TDn3V
iJFOdwAZl/C03GHVx0u+SQFpDgZ3Vdgat5Y7XFC6/bPuXqoD0HdhfKWlDlUg
c/uSHYSbD5xayFsCsT8uyeGBf+/0PKFiB5funOe/OxMh/okpcFABhUd2PMSc
b/kOX0DhZxvvoGbIsUZmWb5Dwi5PHibteIcCW6DPPfIdOED+d4p3QA9/AKEX
tx4=
       "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3fI6cIecZ6YDmL6Y6mBwV4Wt8WCGw61z34Mfi6Y5
FGVMfFtjnwGRv4ngP1k6+4hCQjqcv+VE2b75r6D8/RkOYXy6m+YuznAAmjbV
OT0TwufOhKgry3fwMu90TDib45Dz/PfKj30FDtPyhJoPvMt1UNgANKG92OHQ
V42YfoNCh8kSLGF8R0scHoPskytyeODfOz1vVanDdJD6fUUOO+RaXwdeKIXI
nypyuA+S9ytz4AVa9/59kUMuyPwbZQ7CzQdOLZxY5FC+b76U/usyiD2cRQ6W
IAf9LnOQjUqxvt9b6AD0jGncszKIOysKIfo2ljis+njJN2lJvoNWu9jNc/5F
Dse8gR4QyXEAeev9wwKHBa7bPv8VyIL4/3yewzeg8w8ZZkDEe7IcqkTWuT+s
S3UQAplnmuUADrbIVAf08AcAf4/C6A==
       "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3X/oq0YMe7LDtDyh5gNsuQ7hfLqb5vYnOXzRiOk/
JJvrAJZ/nuiQNfFtjf3VXIe9JZMlWM4lOqz6eMk3KSbPIW6XJw/T/EQHh4Sn
F5TC8x1U2RqnOl9PdPgG0r8y3yEMZN7xZIedcq2vAxcVOGw5UbZvflqaAwMI
7Ch0aHkduEOuMd0BaGoYn2WRQ890oEM2ZDlcVLr9s+5UMdwdO0D6/5Q4HPM2
73RckgtRb14K4XPkOdz3752e51DqIBOVYn3/c54DyNn9YVD+7nwHrXaxm+fk
Sx0sQQ5gL3A4DtK3qcRh2ewjChusChw6HYEe0ClxaAW5x7AAQsuXQN2Z4wBy
1gG/Igh/RiZE36ECh3c19qZxVhkQ9coFDkUZwIBan+pw69z34MeGeQ4zQPrs
UiDuZMl1kAW553EyhH8nxwE9/AFavquU
       "]}]},
    AspectRatio->Automatic,
    ImageSize->25,
    PlotRange->{{0., 1026.}, {0., 914.}}],
   Deploy,
   DefaultBaseStyle->"Deploy"]],
  CellChangeTimes->{{3.780154747626994*^9, 3.78015474762787*^9}, {
    3.7801550408264236`*^9, 3.78015506109583*^9}, {3.780155259660273*^9, 
    3.780155265170496*^9}, 3.780155304864932*^9, {3.780194189419746*^9, 
    3.780194190674692*^9}},ExpressionUUID->
  "522cd3e6-6424-4016-a11c-a2983f91ae07"],
 ") and scissors (",
 Cell[BoxData[
  TagBox[
   GraphicsBox[
    {Thickness[0.0009523809523809524], 
     FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
       1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3,
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
       0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
       1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
       3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
       0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
       
       "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
       "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
       "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
       
       "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

       "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
       "]}]},
    AspectRatio->Automatic,
    ImageSize->25,
    PlotRange->{{0., 1050.}, {0., 740.}}],
   Deploy,
   DefaultBaseStyle->"Deploy"]],
  CellChangeTimes->{{3.780154747626994*^9, 3.78015474762787*^9}, {
    3.7801550408264236`*^9, 3.78015506109583*^9}, {3.780155259660273*^9, 
    3.780155265170496*^9}, 3.780155304864932*^9, {3.780194189419746*^9, 
    3.780194190674692*^9}},ExpressionUUID->
  "aaafaf7e-a508-4fa3-887c-4adab6befb2b"],
 ")"
}], "Text",
 CellChangeTimes->{
  3.7801547418670464`*^9, {3.7801941480767508`*^9, 
   3.780194230292079*^9}},ExpressionUUID->"53e3f778-3cd0-4d3d-b419-\
851af7f139db"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sequences", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[
        GraphicsBox[
         {Thickness[0.0009746588693957114], 
          FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}}, {CompressedData["
1:eJxdVgtwTGcYjUg1VUOosmOUeAyptxnGK5GzEq+oR6Ql3vGahJjYlZVENtZu
7t69+8ou49lSj6JmMKT1bGvSlIwYVZQoatSjaWkrpFpFUb3fPWnNyExm57/3
/89/vnPO//233ayF4+dGRkRErNH/5ff4qH4+c20mIoy/eqjevr4idsRcRJwf
PSvmUktceeyYfyRqFk7klW1qtbA3fj7b/srjjTPgbHH59MN9g3En9XAbddR7
OLFl6ME/ro7BSfntbkbDi1stCYsyYJo8Z9C1sZ2JuzwTGfqoZG0kdLSeV4vm
w2kQqP5yQuPun364cgEi3v1Rn3k20Zi/YSEijPUPEu+f0/lstuJR3NTw0Qft
kS8AtxZhwRHbSlPyQFzXUXNu5pJfGzO6ajrBSTasMkVNaPxNMvZLARttuKTT
atg5hfV+Z8Mp4ZswBjVFiX2nRyzGhorY0kWXxuBCwS+depvy0O1qxwau7WMh
9O758hFcm9NMGTEOXQS/pACx6m+ph8tSYfDrb8ee1jrhTWkYKBtudSBrhY5c
k4Y1+rJyxzJ4RTclDUt0+GiTEzr66qRRadim07o43Ek9vxiPd3RVMqxO8kkf
y/l9XNis030WNRQjG0V21YqKYZPnuwdDaJVPUdBn+ucjGxX3w8e6fKV93ViX
FFhwyx6Hezt0oYMqegnvhz0gKscu8eBv3V7bPqBp+oD9J6I13Bb9yoZx/TwN
hh0x47jfGg3JOtyTeZPwlviyS2Ode2dBXImr1NBKnu/NhMA40jUIu9ZdsrFG
eGR7EKOUn9xSk8P12SokDTleC7zmjJ/OnlRgb75n+I0jFu6/wcV5xyzQq64q
GO+iL6ct1DXORZ8vW1Cly5/eycW6Iq3optu1o60L03Q5IhNzya91MSRtGW8u
Jp/6Cox49S6gvkE3xzMKqccZFSNuFDbfU+ng+21eiB1ZJhcSJOBVftSKriku
+t8kQF6nXMznkgDaSD70fQx++UHibnJjsKw/FYTOamr4uUqciUHEyPtzHuYh
Joh14qtN4/xQAD0lj7rOBp/bfkwRvp286CXP3/ZjvpyHJl7mfYiP63wa/XB4
mfsCjXme48Uh0dWssZ62XvKPqcOv1jjf6qEPHTSIvKW3VPLI9FDvKBVGrJqr
1LmPG8Yxv6Zwn+o6neco5PGrQl2mK+Rbo3DdVIV1j3bDJ3lYoSBFcveVm/gX
6vAqVcQLvsXNXJ5WIe0q3eYmzyce7tdahdg33K3R9yyVz7t76cOJujpyvfTh
vkq8V308Tyke6jjMRx3meeh/qY86+D3k876f7y946McHAZ7fbz3ECQTJz+lB
reRkaQl59KzDnxxi/U6V+peHiHfUjYFS59MQ85Xqhl90aRnmefhagUd0iQ5T
x2kK6/grxPdVxfz9Dy+rGPMFf2KI+j5ysS81CFGPrS7WV1VCHEfd+Xu9hHXU
dzGfbQJoJud41zK0FR/b+Zi/x0X097qGeMnTK3bqoGroIe/zCyHt8ZpD4/OZ
heR1QMNd6b+WQhyTfa970U0MP1bIfA4NkGeZnXz6BanfyCL2jVAQGXLO7UXU
Ib6E/VktYh3bS6hfRhH1uBYij3t23BQjz4TJRynETTnu9ZbjB+lLxwtgtM/X
lrMPJL0YG/sG8/+fb+BH59O/2jDnz8yjv/vCvF+ci7mvPQyReUWTunGXMPXM
tlGPfSH2wdpc4jqC7CfPrRxXBJjnKVbWe9MP4xpdZaE+mp9+JVt4fp5p1K/x
AvaTdh727aQszn/uZt9OnEu+ihsfyT3z52ziT3Lz/rbMJo+9Cnb+rhPpOBOr
RZA8F76X74Q74yHH7Ub/pbynqs304Xw+773ceOpzIA+lw3WB7g5kXnrZEK3T
bPHZIOrQIRfr5N6uScAAIXRoEb8/zgymn/9Y8VTurTSw/3itqJDnkWa8Ieub
WrFbBPnEzDzttPDexhDI9Ri59cXYOP/rXxrnWpjn1eB9k2LhuTUlUOeKHBiN
pdLEeg9mg8I1LH/5e+pf8dcw3g==
            "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQfevc9+DHkjkODlzXFxfUOjjsmy+lf/cElP/X0aEo
Y+LbmvpcBwHdTXPfs7vC+TL6d1XYCt3g/CtKt3/WvXJzmJYn1HxAL9eBAQQe
uEPkt+c49EwHSlzwABtrK5TlkGJ9379X3c/hAkifXprDN42Y/kNXQx3idnny
MH1Ocjjhbd7pmBDrsMh12+e/LgkOqz5e8k26kOiwTiYqxXp/FET911QHudbX
gTuehTkcA6nPyYTY1x7k8GTp7CMKMbkOVltOlO0rD4C4x6rA4QvQGIEKf4cq
kXXuD8WKHPaUTJZgmebnsANkkFmxw4GvQIMX+TkobACaZFwMcWe4t8MnkL5/
RQ5VL9UMOd44OgB1hfGlFjnkgA2wcjAABkfj0QKHFqBz5FhtHVy6c57/bsyF
yB+xg7hXM9thBcihik4Qf0tlOvjwMGm3H/OAuPdCqoMaW+NU5+RghxmgcDwU
C6Gt4h1OLAQGBK+/QzHIf/uTIfaJujkcB/n7RopDh9jNc983OzuUgOSD0xwW
gMItBRp/69MdOkDuemrvoAfSNzPDIQDk4Y+2Du9q7E3j+DIdZoD802sLUS+f
5fDh75WKl8dsIep9sx1+gPhsdg63ftZl7WnIdjAw5FgjEwXko6UfAIKqB2M=

            "], CompressedData["
1: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
oVjG/cBy4nGgDRiwXxRL///e+xec6JEj
            "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQXZQx8W0Nf77DGpmoFOvyeIcakXXuD0/lOnzTiOk/
FJjgcMzbvNNxQa7DAtdtn/8qJDnsKZkswXIsz0GNrXGq8+0kh3c19qZx7/Ic
FoHkvyQ5tLwO3CF3M99hWp5Q8wG3ZAfLLSfK9qUXQMQnJjssnX1EYYNbkQPX
9cUFtptSHDodE55eaCl2uPOzLmvPllSHapD9k0odnoAUHkmH2O9Q7gAyZn5R
pkP5vvlS+qnlEHubMiHqL5RD1O/IgMgbVziE8Olumvs/3WEGyB1WFQ4TDn3V
iJFOdwAZl/C03GHVx0u+SQFpDgZ3Vdgat5Y7XFC6/bPuXqoD0HdhfKWlDlUg
c/uSHYSbD5xayFsCsT8uyeGBf+/0PKFiB5funOe/OxMh/okpcFABhUd2PMSc
b/kOX0DhZxvvoGbIsUZmWb5Dwi5PHibteIcCW6DPPfIdOED+d4p3QA9/AKEX
tx4=
            "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3fI6cIecZ6YDmL6Y6mBwV4Wt8WCGw61z34Mfi6Y5
FGVMfFtjnwGRv4ngP1k6+4hCQjqcv+VE2b75r6D8/RkOYXy6m+YuznAAmjbV
OT0TwufOhKgry3fwMu90TDib45Dz/PfKj30FDtPyhJoPvMt1UNgANKG92OHQ
V42YfoNCh8kSLGF8R0scHoPskytyeODfOz1vVanDdJD6fUUOO+RaXwdeKIXI
nypyuA+S9ytz4AVa9/59kUMuyPwbZQ7CzQdOLZxY5FC+b76U/usyiD2cRQ6W
IAf9LnOQjUqxvt9b6AD0jGncszKIOysKIfo2ljis+njJN2lJvoNWu9jNc/5F
Dse8gR4QyXEAeev9wwKHBa7bPv8VyIL4/3yewzeg8w8ZZkDEe7IcqkTWuT+s
S3UQAplnmuUADrbIVAf08AcAf4/C6A==
            "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3X/oq0YMe7LDtDyh5gNsuQ7hfLqb5vYnOXzRiOk/
JJvrAJZ/nuiQNfFtjf3VXIe9JZMlWM4lOqz6eMk3KSbPIW6XJw/T/EQHh4Sn
F5TC8x1U2RqnOl9PdPgG0r8y3yEMZN7xZIedcq2vAxcVOGw5UbZvflqaAwMI
7Ch0aHkduEOuMd0BaGoYn2WRQ890oEM2ZDlcVLr9s+5UMdwdO0D6/5Q4HPM2
73RckgtRb14K4XPkOdz3752e51DqIBOVYn3/c54DyNn9YVD+7nwHrXaxm+fk
Sx0sQQ5gL3A4DtK3qcRh2ewjChusChw6HYEe0ClxaAW5x7AAQsuXQN2Z4wBy
1gG/Igh/RiZE36ECh3c19qZxVhkQ9coFDkUZwIBan+pw69z34MeGeQ4zQPrs
UiDuZMl1kAW553EyhH8nxwE9/AFavquU
            "]}]},
         AspectRatio->Automatic,
         ImageSize->25,
         PlotRange->{{0., 1026.}, {0., 914.}}],
        Deploy,
        DefaultBaseStyle->"Deploy"], ",", " ", 
       TagBox[
        GraphicsBox[
         {Thickness[0.0012787723785166241`], 
          FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
            "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
            "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
            "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
            "]}]},
         AspectRatio->Automatic,
         ImageSize->25,
         PlotRange->{{0., 782.}, {0., 668.}}],
        Deploy,
        DefaultBaseStyle->"Deploy"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        GraphicsBox[
         {Thickness[0.0012787723785166241`], 
          FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
            "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
            "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
            "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
            "]}]},
         AspectRatio->Automatic,
         ImageSize->25,
         PlotRange->{{0., 782.}, {0., 668.}}],
        Deploy,
        DefaultBaseStyle->"Deploy"], ",", " ", 
       TagBox[
        GraphicsBox[
         {Thickness[0.0009523809523809524], 
          FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
            0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
            0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
            4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
            0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
            "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
            "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
            "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

            "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
            "]}]},
         AspectRatio->Automatic,
         ImageSize->25,
         PlotRange->{{0., 1050.}, {0., 740.}}],
        Deploy,
        DefaultBaseStyle->"Deploy"], ",", " ", 
       TagBox[
        GraphicsBox[
         {Thickness[0.0012787723785166241`], 
          FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
            "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
            "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
            "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
            "]}]},
         AspectRatio->Automatic,
         ImageSize->25,
         PlotRange->{{0., 782.}, {0., 668.}}],
        Deploy,
        DefaultBaseStyle->"Deploy"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        GraphicsBox[
         {Thickness[0.0009523809523809524], 
          FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
            0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
            0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
            4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
            0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
            "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
            "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
            "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

            "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
            "]}]},
         AspectRatio->Automatic,
         ImageSize->25,
         PlotRange->{{0., 1050.}, {0., 740.}}],
        Deploy,
        DefaultBaseStyle->"Deploy"], ",", " ", 
       TagBox[
        GraphicsBox[
         {Thickness[0.0012787723785166241`], 
          FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
            "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
            "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
            "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
            "]}]},
         AspectRatio->Automatic,
         ImageSize->25,
         PlotRange->{{0., 782.}, {0., 668.}}],
        Deploy,
        DefaultBaseStyle->"Deploy"], ",", " ", 
       TagBox[
        GraphicsBox[
         {Thickness[0.0009523809523809524], 
          FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
            0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
            0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
            4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
            0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
            "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
            "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
            "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

            "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
            "]}]},
         AspectRatio->Automatic,
         ImageSize->25,
         PlotRange->{{0., 1050.}, {0., 740.}}],
        Deploy,
        DefaultBaseStyle->"Deploy"], ",", " ", 
       TagBox[
        GraphicsBox[
         {Thickness[0.0009746588693957114], 
          FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}}, {CompressedData["
1:eJxdVgtwTGcYjUg1VUOosmOUeAyptxnGK5GzEq+oR6Ql3vGahJjYlZVENtZu
7t69+8ou49lSj6JmMKT1bGvSlIwYVZQoatSjaWkrpFpFUb3fPWnNyExm57/3
/89/vnPO//233ayF4+dGRkRErNH/5ff4qH4+c20mIoy/eqjevr4idsRcRJwf
PSvmUktceeyYfyRqFk7klW1qtbA3fj7b/srjjTPgbHH59MN9g3En9XAbddR7
OLFl6ME/ro7BSfntbkbDi1stCYsyYJo8Z9C1sZ2JuzwTGfqoZG0kdLSeV4vm
w2kQqP5yQuPun364cgEi3v1Rn3k20Zi/YSEijPUPEu+f0/lstuJR3NTw0Qft
kS8AtxZhwRHbSlPyQFzXUXNu5pJfGzO6ajrBSTasMkVNaPxNMvZLARttuKTT
atg5hfV+Z8Mp4ZswBjVFiX2nRyzGhorY0kWXxuBCwS+depvy0O1qxwau7WMh
9O758hFcm9NMGTEOXQS/pACx6m+ph8tSYfDrb8ee1jrhTWkYKBtudSBrhY5c
k4Y1+rJyxzJ4RTclDUt0+GiTEzr66qRRadim07o43Ek9vxiPd3RVMqxO8kkf
y/l9XNis030WNRQjG0V21YqKYZPnuwdDaJVPUdBn+ucjGxX3w8e6fKV93ViX
FFhwyx6Hezt0oYMqegnvhz0gKscu8eBv3V7bPqBp+oD9J6I13Bb9yoZx/TwN
hh0x47jfGg3JOtyTeZPwlviyS2Ode2dBXImr1NBKnu/NhMA40jUIu9ZdsrFG
eGR7EKOUn9xSk8P12SokDTleC7zmjJ/OnlRgb75n+I0jFu6/wcV5xyzQq64q
GO+iL6ct1DXORZ8vW1Cly5/eycW6Iq3optu1o60L03Q5IhNzya91MSRtGW8u
Jp/6Cox49S6gvkE3xzMKqccZFSNuFDbfU+ng+21eiB1ZJhcSJOBVftSKriku
+t8kQF6nXMznkgDaSD70fQx++UHibnJjsKw/FYTOamr4uUqciUHEyPtzHuYh
Joh14qtN4/xQAD0lj7rOBp/bfkwRvp286CXP3/ZjvpyHJl7mfYiP63wa/XB4
mfsCjXme48Uh0dWssZ62XvKPqcOv1jjf6qEPHTSIvKW3VPLI9FDvKBVGrJqr
1LmPG8Yxv6Zwn+o6neco5PGrQl2mK+Rbo3DdVIV1j3bDJ3lYoSBFcveVm/gX
6vAqVcQLvsXNXJ5WIe0q3eYmzyce7tdahdg33K3R9yyVz7t76cOJujpyvfTh
vkq8V308Tyke6jjMRx3meeh/qY86+D3k876f7y946McHAZ7fbz3ECQTJz+lB
reRkaQl59KzDnxxi/U6V+peHiHfUjYFS59MQ85Xqhl90aRnmefhagUd0iQ5T
x2kK6/grxPdVxfz9Dy+rGPMFf2KI+j5ysS81CFGPrS7WV1VCHEfd+Xu9hHXU
dzGfbQJoJud41zK0FR/b+Zi/x0X097qGeMnTK3bqoGroIe/zCyHt8ZpD4/OZ
heR1QMNd6b+WQhyTfa970U0MP1bIfA4NkGeZnXz6BanfyCL2jVAQGXLO7UXU
Ib6E/VktYh3bS6hfRhH1uBYij3t23BQjz4TJRynETTnu9ZbjB+lLxwtgtM/X
lrMPJL0YG/sG8/+fb+BH59O/2jDnz8yjv/vCvF+ci7mvPQyReUWTunGXMPXM
tlGPfSH2wdpc4jqC7CfPrRxXBJjnKVbWe9MP4xpdZaE+mp9+JVt4fp5p1K/x
AvaTdh727aQszn/uZt9OnEu+ihsfyT3z52ziT3Lz/rbMJo+9Cnb+rhPpOBOr
RZA8F76X74Q74yHH7Ub/pbynqs304Xw+773ceOpzIA+lw3WB7g5kXnrZEK3T
bPHZIOrQIRfr5N6uScAAIXRoEb8/zgymn/9Y8VTurTSw/3itqJDnkWa8Ieub
WrFbBPnEzDzttPDexhDI9Ri59cXYOP/rXxrnWpjn1eB9k2LhuTUlUOeKHBiN
pdLEeg9mg8I1LH/5e+pf8dcw3g==
            "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQfevc9+DHkjkODlzXFxfUOjjsmy+lf/cElP/X0aEo
Y+LbmvpcBwHdTXPfs7vC+TL6d1XYCt3g/CtKt3/WvXJzmJYn1HxAL9eBAQQe
uEPkt+c49EwHSlzwABtrK5TlkGJ9379X3c/hAkifXprDN42Y/kNXQx3idnny
MH1Ocjjhbd7pmBDrsMh12+e/LgkOqz5e8k26kOiwTiYqxXp/FET911QHudbX
gTuehTkcA6nPyYTY1x7k8GTp7CMKMbkOVltOlO0rD4C4x6rA4QvQGIEKf4cq
kXXuD8WKHPaUTJZgmebnsANkkFmxw4GvQIMX+TkobACaZFwMcWe4t8MnkL5/
RQ5VL9UMOd44OgB1hfGlFjnkgA2wcjAABkfj0QKHFqBz5FhtHVy6c57/bsyF
yB+xg7hXM9thBcihik4Qf0tlOvjwMGm3H/OAuPdCqoMaW+NU5+RghxmgcDwU
C6Gt4h1OLAQGBK+/QzHIf/uTIfaJujkcB/n7RopDh9jNc983OzuUgOSD0xwW
gMItBRp/69MdOkDuemrvoAfSNzPDIQDk4Y+2Du9q7E3j+DIdZoD802sLUS+f
5fDh75WKl8dsIep9sx1+gPhsdg63ftZl7WnIdjAw5FgjEwXko6UfAIKqB2M=

            "], CompressedData["
1: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
oVjG/cBy4nGgDRiwXxRL///e+xec6JEj
            "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQXZQx8W0Nf77DGpmoFOvyeIcakXXuD0/lOnzTiOk/
FJjgcMzbvNNxQa7DAtdtn/8qJDnsKZkswXIsz0GNrXGq8+0kh3c19qZx7/Ic
FoHkvyQ5tLwO3CF3M99hWp5Q8wG3ZAfLLSfK9qUXQMQnJjssnX1EYYNbkQPX
9cUFtptSHDodE55eaCl2uPOzLmvPllSHapD9k0odnoAUHkmH2O9Q7gAyZn5R
pkP5vvlS+qnlEHubMiHqL5RD1O/IgMgbVziE8Olumvs/3WEGyB1WFQ4TDn3V
iJFOdwAZl/C03GHVx0u+SQFpDgZ3Vdgat5Y7XFC6/bPuXqoD0HdhfKWlDlUg
c/uSHYSbD5xayFsCsT8uyeGBf+/0PKFiB5funOe/OxMh/okpcFABhUd2PMSc
b/kOX0DhZxvvoGbIsUZmWb5Dwi5PHibteIcCW6DPPfIdOED+d4p3QA9/AKEX
tx4=
            "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3fI6cIecZ6YDmL6Y6mBwV4Wt8WCGw61z34Mfi6Y5
FGVMfFtjnwGRv4ngP1k6+4hCQjqcv+VE2b75r6D8/RkOYXy6m+YuznAAmjbV
OT0TwufOhKgry3fwMu90TDib45Dz/PfKj30FDtPyhJoPvMt1UNgANKG92OHQ
V42YfoNCh8kSLGF8R0scHoPskytyeODfOz1vVanDdJD6fUUOO+RaXwdeKIXI
nypyuA+S9ytz4AVa9/59kUMuyPwbZQ7CzQdOLZxY5FC+b76U/usyiD2cRQ6W
IAf9LnOQjUqxvt9b6AD0jGncszKIOysKIfo2ljis+njJN2lJvoNWu9jNc/5F
Dse8gR4QyXEAeev9wwKHBa7bPv8VyIL4/3yewzeg8w8ZZkDEe7IcqkTWuT+s
S3UQAplnmuUADrbIVAf08AcAf4/C6A==
            "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3X/oq0YMe7LDtDyh5gNsuQ7hfLqb5vYnOXzRiOk/
JJvrAJZ/nuiQNfFtjf3VXIe9JZMlWM4lOqz6eMk3KSbPIW6XJw/T/EQHh4Sn
F5TC8x1U2RqnOl9PdPgG0r8y3yEMZN7xZIedcq2vAxcVOGw5UbZvflqaAwMI
7Ch0aHkduEOuMd0BaGoYn2WRQ890oEM2ZDlcVLr9s+5UMdwdO0D6/5Q4HPM2
73RckgtRb14K4XPkOdz3752e51DqIBOVYn3/c54DyNn9YVD+7nwHrXaxm+fk
Sx0sQQ5gL3A4DtK3qcRh2ewjChusChw6HYEe0ClxaAW5x7AAQsuXQN2Z4wBy
1gG/Igh/RiZE36ECh3c19qZxVhkQ9coFDkUZwIBan+pw69z34MeGeQ4zQPrs
UiDuZMl1kAW553EyhH8nxwE9/AFavquU
            "]}]},
         AspectRatio->Automatic,
         ImageSize->25,
         PlotRange->{{0., 1026.}, {0., 914.}}],
        Deploy,
        DefaultBaseStyle->"Deploy"]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        GraphicsBox[
         {Thickness[0.0012787723785166241`], 
          FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
            "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
            "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
            "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
            "]}]},
         AspectRatio->Automatic,
         ImageSize->25,
         PlotRange->{{0., 782.}, {0., 668.}}],
        Deploy,
        DefaultBaseStyle->"Deploy"], ",", " ", 
       TagBox[
        GraphicsBox[
         {Thickness[0.0009523809523809524], 
          FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
            0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
            0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
            4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
            0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
            "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
            "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
            "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

            "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
            "]}]},
         AspectRatio->Automatic,
         ImageSize->25,
         PlotRange->{{0., 1050.}, {0., 740.}}],
        Deploy,
        DefaultBaseStyle->"Deploy"], ",", " ", 
       TagBox[
        GraphicsBox[
         {Thickness[0.0009746588693957114], 
          FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}}, {CompressedData["
1:eJxdVgtwTGcYjUg1VUOosmOUeAyptxnGK5GzEq+oR6Ql3vGahJjYlZVENtZu
7t69+8ou49lSj6JmMKT1bGvSlIwYVZQoatSjaWkrpFpFUb3fPWnNyExm57/3
/89/vnPO//233ayF4+dGRkRErNH/5ff4qH4+c20mIoy/eqjevr4idsRcRJwf
PSvmUktceeyYfyRqFk7klW1qtbA3fj7b/srjjTPgbHH59MN9g3En9XAbddR7
OLFl6ME/ro7BSfntbkbDi1stCYsyYJo8Z9C1sZ2JuzwTGfqoZG0kdLSeV4vm
w2kQqP5yQuPun364cgEi3v1Rn3k20Zi/YSEijPUPEu+f0/lstuJR3NTw0Qft
kS8AtxZhwRHbSlPyQFzXUXNu5pJfGzO6ajrBSTasMkVNaPxNMvZLARttuKTT
atg5hfV+Z8Mp4ZswBjVFiX2nRyzGhorY0kWXxuBCwS+depvy0O1qxwau7WMh
9O758hFcm9NMGTEOXQS/pACx6m+ph8tSYfDrb8ee1jrhTWkYKBtudSBrhY5c
k4Y1+rJyxzJ4RTclDUt0+GiTEzr66qRRadim07o43Ek9vxiPd3RVMqxO8kkf
y/l9XNis030WNRQjG0V21YqKYZPnuwdDaJVPUdBn+ucjGxX3w8e6fKV93ViX
FFhwyx6Hezt0oYMqegnvhz0gKscu8eBv3V7bPqBp+oD9J6I13Bb9yoZx/TwN
hh0x47jfGg3JOtyTeZPwlviyS2Ode2dBXImr1NBKnu/NhMA40jUIu9ZdsrFG
eGR7EKOUn9xSk8P12SokDTleC7zmjJ/OnlRgb75n+I0jFu6/wcV5xyzQq64q
GO+iL6ct1DXORZ8vW1Cly5/eycW6Iq3optu1o60L03Q5IhNzya91MSRtGW8u
Jp/6Cox49S6gvkE3xzMKqccZFSNuFDbfU+ng+21eiB1ZJhcSJOBVftSKriku
+t8kQF6nXMznkgDaSD70fQx++UHibnJjsKw/FYTOamr4uUqciUHEyPtzHuYh
Joh14qtN4/xQAD0lj7rOBp/bfkwRvp286CXP3/ZjvpyHJl7mfYiP63wa/XB4
mfsCjXme48Uh0dWssZ62XvKPqcOv1jjf6qEPHTSIvKW3VPLI9FDvKBVGrJqr
1LmPG8Yxv6Zwn+o6neco5PGrQl2mK+Rbo3DdVIV1j3bDJ3lYoSBFcveVm/gX
6vAqVcQLvsXNXJ5WIe0q3eYmzyce7tdahdg33K3R9yyVz7t76cOJujpyvfTh
vkq8V308Tyke6jjMRx3meeh/qY86+D3k876f7y946McHAZ7fbz3ECQTJz+lB
reRkaQl59KzDnxxi/U6V+peHiHfUjYFS59MQ85Xqhl90aRnmefhagUd0iQ5T
x2kK6/grxPdVxfz9Dy+rGPMFf2KI+j5ysS81CFGPrS7WV1VCHEfd+Xu9hHXU
dzGfbQJoJud41zK0FR/b+Zi/x0X097qGeMnTK3bqoGroIe/zCyHt8ZpD4/OZ
heR1QMNd6b+WQhyTfa970U0MP1bIfA4NkGeZnXz6BanfyCL2jVAQGXLO7UXU
Ib6E/VktYh3bS6hfRhH1uBYij3t23BQjz4TJRynETTnu9ZbjB+lLxwtgtM/X
lrMPJL0YG/sG8/+fb+BH59O/2jDnz8yjv/vCvF+ci7mvPQyReUWTunGXMPXM
tlGPfSH2wdpc4jqC7CfPrRxXBJjnKVbWe9MP4xpdZaE+mp9+JVt4fp5p1K/x
AvaTdh727aQszn/uZt9OnEu+ihsfyT3z52ziT3Lz/rbMJo+9Cnb+rhPpOBOr
RZA8F76X74Q74yHH7Ub/pbynqs304Xw+773ceOpzIA+lw3WB7g5kXnrZEK3T
bPHZIOrQIRfr5N6uScAAIXRoEb8/zgymn/9Y8VTurTSw/3itqJDnkWa8Ieub
WrFbBPnEzDzttPDexhDI9Ri59cXYOP/rXxrnWpjn1eB9k2LhuTUlUOeKHBiN
pdLEeg9mg8I1LH/5e+pf8dcw3g==
            "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQfevc9+DHkjkODlzXFxfUOjjsmy+lf/cElP/X0aEo
Y+LbmvpcBwHdTXPfs7vC+TL6d1XYCt3g/CtKt3/WvXJzmJYn1HxAL9eBAQQe
uEPkt+c49EwHSlzwABtrK5TlkGJ9379X3c/hAkifXprDN42Y/kNXQx3idnny
MH1Ocjjhbd7pmBDrsMh12+e/LgkOqz5e8k26kOiwTiYqxXp/FET911QHudbX
gTuehTkcA6nPyYTY1x7k8GTp7CMKMbkOVltOlO0rD4C4x6rA4QvQGIEKf4cq
kXXuD8WKHPaUTJZgmebnsANkkFmxw4GvQIMX+TkobACaZFwMcWe4t8MnkL5/
RQ5VL9UMOd44OgB1hfGlFjnkgA2wcjAABkfj0QKHFqBz5FhtHVy6c57/bsyF
yB+xg7hXM9thBcihik4Qf0tlOvjwMGm3H/OAuPdCqoMaW+NU5+RghxmgcDwU
C6Gt4h1OLAQGBK+/QzHIf/uTIfaJujkcB/n7RopDh9jNc983OzuUgOSD0xwW
gMItBRp/69MdOkDuemrvoAfSNzPDIQDk4Y+2Du9q7E3j+DIdZoD802sLUS+f
5fDh75WKl8dsIep9sx1+gPhsdg63ftZl7WnIdjAw5FgjEwXko6UfAIKqB2M=

            "], CompressedData["
1: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
oVjG/cBy4nGgDRiwXxRL///e+xec6JEj
            "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQXZQx8W0Nf77DGpmoFOvyeIcakXXuD0/lOnzTiOk/
FJjgcMzbvNNxQa7DAtdtn/8qJDnsKZkswXIsz0GNrXGq8+0kh3c19qZx7/Ic
FoHkvyQ5tLwO3CF3M99hWp5Q8wG3ZAfLLSfK9qUXQMQnJjssnX1EYYNbkQPX
9cUFtptSHDodE55eaCl2uPOzLmvPllSHapD9k0odnoAUHkmH2O9Q7gAyZn5R
pkP5vvlS+qnlEHubMiHqL5RD1O/IgMgbVziE8Olumvs/3WEGyB1WFQ4TDn3V
iJFOdwAZl/C03GHVx0u+SQFpDgZ3Vdgat5Y7XFC6/bPuXqoD0HdhfKWlDlUg
c/uSHYSbD5xayFsCsT8uyeGBf+/0PKFiB5funOe/OxMh/okpcFABhUd2PMSc
b/kOX0DhZxvvoGbIsUZmWb5Dwi5PHibteIcCW6DPPfIdOED+d4p3QA9/AKEX
tx4=
            "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3fI6cIecZ6YDmL6Y6mBwV4Wt8WCGw61z34Mfi6Y5
FGVMfFtjnwGRv4ngP1k6+4hCQjqcv+VE2b75r6D8/RkOYXy6m+YuznAAmjbV
OT0TwufOhKgry3fwMu90TDib45Dz/PfKj30FDtPyhJoPvMt1UNgANKG92OHQ
V42YfoNCh8kSLGF8R0scHoPskytyeODfOz1vVanDdJD6fUUOO+RaXwdeKIXI
nypyuA+S9ytz4AVa9/59kUMuyPwbZQ7CzQdOLZxY5FC+b76U/usyiD2cRQ6W
IAf9LnOQjUqxvt9b6AD0jGncszKIOysKIfo2ljis+njJN2lJvoNWu9jNc/5F
Dse8gR4QyXEAeev9wwKHBa7bPv8VyIL4/3yewzeg8w8ZZkDEe7IcqkTWuT+s
S3UQAplnmuUADrbIVAf08AcAf4/C6A==
            "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3X/oq0YMe7LDtDyh5gNsuQ7hfLqb5vYnOXzRiOk/
JJvrAJZ/nuiQNfFtjf3VXIe9JZMlWM4lOqz6eMk3KSbPIW6XJw/T/EQHh4Sn
F5TC8x1U2RqnOl9PdPgG0r8y3yEMZN7xZIedcq2vAxcVOGw5UbZvflqaAwMI
7Ch0aHkduEOuMd0BaGoYn2WRQ890oEM2ZDlcVLr9s+5UMdwdO0D6/5Q4HPM2
73RckgtRb14K4XPkOdz3752e51DqIBOVYn3/c54DyNn9YVD+7nwHrXaxm+fk
Sx0sQQ5gL3A4DtK3qcRh2ewjChusChw6HYEe0ClxaAW5x7AAQsuXQN2Z4wBy
1gG/Igh/RiZE36ECh3c19qZxVhkQ9coFDkUZwIBan+pw69z34MeGeQ4zQPrs
UiDuZMl1kAW553EyhH8nxwE9/AFavquU
            "]}]},
         AspectRatio->Automatic,
         ImageSize->25,
         PlotRange->{{0., 1026.}, {0., 914.}}],
        Deploy,
        DefaultBaseStyle->"Deploy"]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        GraphicsBox[
         {Thickness[0.0012787723785166241`], 
          FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
            "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
            "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
            "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
            "]}]},
         AspectRatio->Automatic,
         ImageSize->25,
         PlotRange->{{0., 782.}, {0., 668.}}],
        Deploy,
        DefaultBaseStyle->"Deploy"], ",", " ", 
       TagBox[
        GraphicsBox[
         {Thickness[0.0009523809523809524], 
          FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
            0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
            0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
            4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
            1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
            0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
            "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
            "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
            "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
            "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

            "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
            "]}]},
         AspectRatio->Automatic,
         ImageSize->25,
         PlotRange->{{0., 1050.}, {0., 740.}}],
        Deploy,
        DefaultBaseStyle->"Deploy"]}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.780154747626994*^9, 3.78015474762787*^9}, {
   3.7801550408264236`*^9, 3.78015506109583*^9}, {3.780155259660273*^9, 
   3.780155265170496*^9}, 3.780155304864932*^9, {3.780194189419746*^9, 
   3.780194190674692*^9}, 3.780197089818823*^9},
 CellLabel->"In[46]:=",ExpressionUUID->"231e6adb-d31d-4c97-8677-a630498533d0"],

Cell[CellGroupData[{

Cell["Task 16", "Subsection",
 CellChangeTimes->{{3.780194467271121*^9, 3.780194468488649*^9}, 
   3.814438193485397*^9},ExpressionUUID->"bffffdde-f692-4fc9-ab6a-\
fa0e45a0c525"],

Cell["Train a sequence predictor using these observed sequences.", "Text",
 CellChangeTimes->{
  3.780154759402529*^9, {3.7802020772739334`*^9, 
   3.7802020921132164`*^9}},ExpressionUUID->"836970b2-c272-4898-a99d-\
c4beb03c2049"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sp", " ", "=", " ", 
  RowBox[{"SequencePredict", "[", "sequences", "]"}]}]], "Input",
 CellChangeTimes->{{3.815305922211527*^9, 3.815305939067358*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"4b6fbf70-5af1-46f0-841d-2f540561a6fd"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SequencePredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{{
                Thickness[0.002], {{
                  FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                   499.}, {1., 499.}, {1., 500.001}, {0., 500.001}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{499.,
                    499.}, {500.001, 499.}, {500.001, 500.001}, {499., 
                   500.001}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                   0.}, {1., 0.}, {1., 1.}, {0., 1.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{499.,
                    0.}, {500.001, 0.}, {500.001, 1.}, {499., 1.}}}]}}, {{
                  FaceForm[{
                    RGBColor[0.604, 0.604, 0.604], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{72., 
                   426.}, {150., 426.}, {150., 348.}, {72., 348.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{347.,
                    288.}, {425., 288.}, {425., 210.}, {347., 210.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{130.55, 132.031}, {
                   91.46900000000002, 132.031}, {91.46900000000002, 
                   92.95000000000002}, {130.55, 92.95000000000002}}, {{72., 
                   152.}, {150., 152.}, {150., 74.}, {72., 74.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{267.55, 
                   268.03099999999995`}, {228.46900000000002`, 
                   268.03099999999995`}, {228.46900000000002`, 
                   228.94999999999996`}, {267.55, 228.94999999999996`}}, {{
                   209., 288.}, {287., 288.}, {287., 210.}, {209., 210.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{267.55, 
                   405.03099999999995`}, {228.46900000000002`, 
                   405.03099999999995`}, {228.46900000000002`, 
                   365.94999999999993`}, {267.55, 365.94999999999993`}}, {{
                   209., 425.}, {287., 425.}, {287., 347.}, {209., 347.}}}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{155., 250.}, {155., 225.147}, {134.853, 205.}, {
                   110., 205.}, {85.147, 205.}, {65., 225.147}, {65., 250.}, {
                   65., 274.853}, {85.147, 295.}, {110., 295.}, {134.853, 
                   295.}, {155., 274.853}, {155., 250.}}}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJeKA0GChUOYPpBlYMhxxqZqEllcD6YDih1OP89+PHS
uZVwPpgWqIDzwfqaylD1O0DVwcx3gJqzthJV/kMVXD+Mj2I+kA+zH0U/zH1I
7kfhL6h0OPxVI6b/D4IPpjdAxd9UwPko9gH5tlzXFxcYl6PqbyhDNR/IB6tz
LkeVn1AG1w/jo5gP5MPsR9EPcx+S+wFHkGkl
                   "]]}}, {{
                  FaceForm[{
                    RGBColor[0.267, 0.267, 0.267], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxlk21IU2EUx5eI2NLsTVYULBMLE5GsD2UZf6P8oCJqZrrNud1tllqIxu7L
JExULN+QihQblGKi5dLENLWiF0RKxA0xS/ElE83SFSJSJtXzeGn70IfLc3/c
/3nOOf9zrg+TGWdwkUgkh8lDz1rfztWiRzysQwnzQbnxiMZW7evd3H/Mm4ny
qhKtOYstMcEczrxsqIs2K3HsWdwtHy2Hm8tuKVVWpagv5bC9wyYZd1OhnRwu
bRxOpWV+LwxVIcCwYypxmkM6wTdXVBgdzrsULuMRm1HNme0quKwvlusiebwj
6bvzk/ExUdZhu8zjD03soUYM1d3jcZsjBVnUoLJ9r3iwWTs9J7UpYj0TPN5v
WQwb8NCI8Qvkvtn0gGWjk0N8I3Ly55xMKCiqSgvVxZ7frVYee+RLFxJkDOJp
n5U8FINPP23TMSDZvDZoeBQERdVLmxis0IDNPPYaXardbQyuyXV2RTPnYLvi
xPHP2U52J+3ZA4lfRYWKwXYGddSwKVa8P58BtTHKzCJNkpnneppBr3/I9T4F
C0vJ6HmJNwPadqecxf6+Tb1db7U4d5IYu2JEvTTcz2h28ppe0INU+7heyoKo
n5QV6NF/f2AoIZQFvb6nUS/2V8hiZeHriyM2PQSacJKFl/lgbdtPvVhvJIfx
G6RgfwOIu+XGLk70L8wAWq63P+9gaqfkm5Mr7v44MFMmwJo6NJs+p0c4XZR1
JoyECokNR/UoN5LBGU2om3i+0VymE/fBYkLVGEnYwji4uZ3J/VCpdfCaf8sa
0HXMqDHBM6upZDRVI86n2ITgmYd+08Mp4jyzTViigVNqMT7WhDvUCKla/L7X
BLpGXmeT0UQH+kvACH2pUYl+9QrIJusVuKoExfliAQ/omaEEXWdZtAALjRtR
iPN0F7CLyCviFeK8unk00g9jSfj3v5VGfHE91J+Ev8kFnlk=
                    "], {{397.24569999999994`, 52.252300000000005`}, {
                    368.20269999999994`, 52.252300000000005`}, {
                    368.20269999999994`, 73.5373}, {397.24569999999994`, 
                    73.5373}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxlk3swVFEcx3ckGqEHUpNq5FFRKdNMD8m3l5EalRBr19prNdlr995L6zH+
iPQwFWOmB2kV2hFFykykZFKDRgkZ8ogkeaWmMVIM6dx2Wn/0x51zP+d8f+f3
O7/zPdYU4x2qJxAItpCPH3NsyibPWbNoaPYbdnLzgTre/vlZa8V/HKMmyqRA
hP7slWbvUcC3Mk/jpQ7E2dtHa51zFLg8ZiBJbwjEncJWSdS4Ava9iTfqDETo
u7j6q4mHEnvDmO9nXEXwyCQb5ikh2rVjoC1ehLxTh/dlmjI4TGdEq7+JMHuh
uVt1FIMWkv5JohgvHqxX3upgMF0cN3LfOAiHeJ0Fi+vRpKDCIPCyVc4soril
Jt1SCbY/9b5qfZBF68KRnfXGwfjob1naKGbR0i93HFPN8DYbz7jEwRkm5HQg
XQqRoup3MVisXDEa7mdJwYc/pyELYVP5J/MQCpKog8sXZTE47XQg16iAwmhZ
+/mpWQzsVXoZcxopmLlVv3+4Q6njkNfi/S+rFDpeQI733oX069wZYVMJpe2H
Jly7fyKFSNu06dTF4QgTMAn6RyikHDlhm3aFRuGFjuMCCwoqkl6+gobDq/k1
j2ulqEt629XdLEeukbudSj3Df/WxMtQYul73/SEHUT9KPi3DQGnRrH4hDdpx
LK0zXwbmDQkYojH8bKuNZ6MM5HZbNmWHI4mUVz4u09YbrUDXJVLwmlBo1u62
+uKj1PZvZyhMKjZcc3BmdMy3UyBhdZya9Wtj3xTx17HmfvmgDO68UTgO7a6x
/nkuMqSoyMV95qD5UGGqTg5Bx7uESPdlEUjvJAnvUzouKqFOtqVJdfy3f2PB
IK44RC+IgAlXcKHjWDCIG+bNneDg3HfPrvedRHufPRxG+cCeIG18JYebdXfq
m42CtOtXOfA2mndUjIIJMkOT+vifbBF4md9mDhHEXusmib8JDk+wuMuPNHkP
S3r8LStYFPJx7UJovGAmjWFhReSpPkLwNi1zZJHPL3QG4N97u+g5pL+pLgB/
AIGeoHU=
                    "], {{260.24569999999994`, 52.252300000000005`}, {
                    231.20369999999997`, 52.252300000000005`}, {
                    231.20369999999997`, 73.5373}, {260.24569999999994`, 
                    73.5373}}}]}}}}}, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Background -> GrayLevel[0.94], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NominalSequence\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{{
                Thickness[0.002], {{
                  FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                   499.}, {1., 499.}, {1., 500.001}, {0., 500.001}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{499.,
                    499.}, {500.001, 499.}, {500.001, 500.001}, {499., 
                   500.001}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                   0.}, {1., 0.}, {1., 1.}, {0., 1.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{499.,
                    0.}, {500.001, 0.}, {500.001, 1.}, {499., 1.}}}]}}, {{
                  FaceForm[{
                    RGBColor[0.604, 0.604, 0.604], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{72., 
                   426.}, {150., 426.}, {150., 348.}, {72., 348.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{347.,
                    288.}, {425., 288.}, {425., 210.}, {347., 210.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{130.55, 132.031}, {
                   91.46900000000002, 132.031}, {91.46900000000002, 
                   92.95000000000002}, {130.55, 92.95000000000002}}, {{72., 
                   152.}, {150., 152.}, {150., 74.}, {72., 74.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{267.55, 
                   268.03099999999995`}, {228.46900000000002`, 
                   268.03099999999995`}, {228.46900000000002`, 
                   228.94999999999996`}, {267.55, 228.94999999999996`}}, {{
                   209., 288.}, {287., 288.}, {287., 210.}, {209., 210.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{267.55, 
                   405.03099999999995`}, {228.46900000000002`, 
                   405.03099999999995`}, {228.46900000000002`, 
                   365.94999999999993`}, {267.55, 365.94999999999993`}}, {{
                   209., 425.}, {287., 425.}, {287., 347.}, {209., 347.}}}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{155., 250.}, {155., 225.147}, {134.853, 205.}, {
                   110., 205.}, {85.147, 205.}, {65., 225.147}, {65., 250.}, {
                   65., 274.853}, {85.147, 295.}, {110., 295.}, {134.853, 
                   295.}, {155., 274.853}, {155., 250.}}}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJeKA0GChUOYPpBlYMhxxqZqEllcD6YDih1OP89+PHS
uZVwPpgWqIDzwfqaylD1O0DVwcx3gJqzthJV/kMVXD+Mj2I+kA+zH0U/zH1I
7kfhL6h0OPxVI6b/D4IPpjdAxd9UwPko9gH5tlzXFxcYl6PqbyhDNR/IB6tz
LkeVn1AG1w/jo5gP5MPsR9EPcx+S+wFHkGkl
                   "]]}}, {{
                  FaceForm[{
                    RGBColor[0.267, 0.267, 0.267], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxlk21IU2EUx5eI2NLsTVYULBMLE5GsD2UZf6P8oCJqZrrNud1tllqIxu7L
JExULN+QihQblGKi5dLENLWiF0RKxA0xS/ElE83SFSJSJtXzeGn70IfLc3/c
/3nOOf9zrg+TGWdwkUgkh8lDz1rfztWiRzysQwnzQbnxiMZW7evd3H/Mm4ny
qhKtOYstMcEczrxsqIs2K3HsWdwtHy2Hm8tuKVVWpagv5bC9wyYZd1OhnRwu
bRxOpWV+LwxVIcCwYypxmkM6wTdXVBgdzrsULuMRm1HNme0quKwvlusiebwj
6bvzk/ExUdZhu8zjD03soUYM1d3jcZsjBVnUoLJ9r3iwWTs9J7UpYj0TPN5v
WQwb8NCI8Qvkvtn0gGWjk0N8I3Ly55xMKCiqSgvVxZ7frVYee+RLFxJkDOJp
n5U8FINPP23TMSDZvDZoeBQERdVLmxis0IDNPPYaXardbQyuyXV2RTPnYLvi
xPHP2U52J+3ZA4lfRYWKwXYGddSwKVa8P58BtTHKzCJNkpnneppBr3/I9T4F
C0vJ6HmJNwPadqecxf6+Tb1db7U4d5IYu2JEvTTcz2h28ppe0INU+7heyoKo
n5QV6NF/f2AoIZQFvb6nUS/2V8hiZeHriyM2PQSacJKFl/lgbdtPvVhvJIfx
G6RgfwOIu+XGLk70L8wAWq63P+9gaqfkm5Mr7v44MFMmwJo6NJs+p0c4XZR1
JoyECokNR/UoN5LBGU2om3i+0VymE/fBYkLVGEnYwji4uZ3J/VCpdfCaf8sa
0HXMqDHBM6upZDRVI86n2ITgmYd+08Mp4jyzTViigVNqMT7WhDvUCKla/L7X
BLpGXmeT0UQH+kvACH2pUYl+9QrIJusVuKoExfliAQ/omaEEXWdZtAALjRtR
iPN0F7CLyCviFeK8unk00g9jSfj3v5VGfHE91J+Ev8kFnlk=
                    "], {{397.24569999999994`, 52.252300000000005`}, {
                    368.20269999999994`, 52.252300000000005`}, {
                    368.20269999999994`, 73.5373}, {397.24569999999994`, 
                    73.5373}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxlk3swVFEcx3ckGqEHUpNq5FFRKdNMD8m3l5EalRBr19prNdlr995L6zH+
iPQwFWOmB2kV2hFFykykZFKDRgkZ8ogkeaWmMVIM6dx2Wn/0x51zP+d8f+f3
O7/zPdYU4x2qJxAItpCPH3NsyibPWbNoaPYbdnLzgTre/vlZa8V/HKMmyqRA
hP7slWbvUcC3Mk/jpQ7E2dtHa51zFLg8ZiBJbwjEncJWSdS4Ava9iTfqDETo
u7j6q4mHEnvDmO9nXEXwyCQb5ikh2rVjoC1ehLxTh/dlmjI4TGdEq7+JMHuh
uVt1FIMWkv5JohgvHqxX3upgMF0cN3LfOAiHeJ0Fi+vRpKDCIPCyVc4soril
Jt1SCbY/9b5qfZBF68KRnfXGwfjob1naKGbR0i93HFPN8DYbz7jEwRkm5HQg
XQqRoup3MVisXDEa7mdJwYc/pyELYVP5J/MQCpKog8sXZTE47XQg16iAwmhZ
+/mpWQzsVXoZcxopmLlVv3+4Q6njkNfi/S+rFDpeQI733oX069wZYVMJpe2H
Jly7fyKFSNu06dTF4QgTMAn6RyikHDlhm3aFRuGFjuMCCwoqkl6+gobDq/k1
j2ulqEt629XdLEeukbudSj3Df/WxMtQYul73/SEHUT9KPi3DQGnRrH4hDdpx
LK0zXwbmDQkYojH8bKuNZ6MM5HZbNmWHI4mUVz4u09YbrUDXJVLwmlBo1u62
+uKj1PZvZyhMKjZcc3BmdMy3UyBhdZya9Wtj3xTx17HmfvmgDO68UTgO7a6x
/nkuMqSoyMV95qD5UGGqTg5Bx7uESPdlEUjvJAnvUzouKqFOtqVJdfy3f2PB
IK44RC+IgAlXcKHjWDCIG+bNneDg3HfPrvedRHufPRxG+cCeIG18JYebdXfq
m42CtOtXOfA2mndUjIIJMkOT+vifbBF4md9mDhHEXusmib8JDk+wuMuPNHkP
S3r8LStYFPJx7UJovGAmjWFhReSpPkLwNi1zZJHPL3QG4N97u+g5pL+pLgB/
AIGeoHU=
                    "], {{260.24569999999994`, 52.252300000000005`}, {
                    231.20369999999997`, 52.252300000000005`}, {
                    231.20369999999997`, 73.5373}, {260.24569999999994`, 
                    73.5373}}}]}}}}}, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Background -> GrayLevel[0.94], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NominalSequence\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of tokens: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["3", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Markov order: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SequencePredictorFunction[
   Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
      Association[
      "Input" -> Association[
        "f1" -> Association["Type" -> "NominalSequence"]], "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
       "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
         Association["Processors" -> {
            MachineLearning`MLProcessor["List"], 
            MachineLearning`MLProcessor["WrapMLDataset", 
             Association[
             "FeatureTypes" -> {"NominalSequence"}, "FeatureKeys" -> {"f1"}, 
              "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
              "RawExample" -> Missing["KeyAbsent", "RawExample"], 
              "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
       "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
       "Missing" -> "Allowed"]], "Processor" -> 
    MachineLearning`MLProcessor["IntegerEncodeNominalSequence", 
      Association[
      "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
       "StructurePreserving" -> True, "Input" -> 
       Association[
        "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
       "Index" -> MachineLearning`SortedHashAssociation[
         Association[
         "KeyHashes" -> {6718995105138802, 5995226068745761510, 
           8722508975039349022}, "Values" -> None, "DefaultValue" -> -1, 
          "HashFunction" -> 
          Function[{
            MachineLearning`file155SortedHashAssociation`PackagePrivate`keys$}\
, 
            Switch[
            MachineLearning`file155SortedHashAssociation`PackagePrivate`keys$,\
 {
              BlankSequence[String]}, 
             Data`StringHash[
             MachineLearning`file155SortedHashAssociation`PackagePrivate`keys$\
, "Murmur3-64"], 
             PatternTest[
              Blank[], 
              MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
             MachineLearning`file155SortedHashAssociation`PackagePrivate`keys$\
, 
             PatternTest[
              Blank[], 
              MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
             
             Block[{MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q}, 
              MachineLearning`file155SortedHashAssociation`PackagePrivate`q = {
                 Quotient[
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 
                 Quotient[
                  Mod[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 2^32], 
                 Quotient[
                  Mod[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 2^32], 2^16], 
                 Mod[
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 2^16]}; 
              MachineLearning`file155SortedHashAssociation`PackagePrivate`q = 
               Transpose[
                 MachineLearning`PackageScope`ToPackedArray[
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q], {1, 3, 2}]; 
              MachineLearning`file155SortedHashAssociation`PackagePrivate`q = 
               Transpose[
                 Flatten[
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q, 1]]; Data`StringHash[
                FromCharacterCode[
                 Abs[
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q]], "Murmur3-64"]], 
             Blank[List], 
             Map[Switch[#, 
               Blank[String], 
               Data`StringHash[#, "Murmur3-64"], 
               PatternTest[
                Blank[], Developer`MachineIntegerQ], #, {
                PatternTest[
                 BlankSequence[], Developer`MachineIntegerQ]}, 
               
               Block[{MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q}, 
                MachineLearning`file155SortedHashAssociation`PackagePrivate`q = {
                   Quotient[#, 2^48], 
                   Quotient[
                    Mod[#, 2^48], 2^32], 
                   Quotient[
                    Mod[#, 2^32], 2^16], 
                   Mod[#, 2^16]}; 
                MachineLearning`file155SortedHashAssociation`PackagePrivate`q = 
                 Flatten[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q]; Data`StringHash[
                  FromCharacterCode[
                   Abs[
                   MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
               Blank[], 
               Data`StringHash[
                StringJoin[
                 ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
              MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$]]], "Version" -> {12.1, 1}]], "Labels" -> {
         Deploy[
          Graphics[{
            Thickness[0.0009746588693957114], 
            
            FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1,
               3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}}}, {CompressedData["
1:eJxdVgtwTGcYjUg1VUOosmOUeAyptxnGK5GzEq+oR6Ql3vGahJjYlZVENtZu
7t69+8ou49lSj6JmMKT1bGvSlIwYVZQoatSjaWkrpFpFUb3fPWnNyExm57/3
/89/vnPO//233ayF4+dGRkRErNH/5ff4qH4+c20mIoy/eqjevr4idsRcRJwf
PSvmUktceeyYfyRqFk7klW1qtbA3fj7b/srjjTPgbHH59MN9g3En9XAbddR7
OLFl6ME/ro7BSfntbkbDi1stCYsyYJo8Z9C1sZ2JuzwTGfqoZG0kdLSeV4vm
w2kQqP5yQuPun364cgEi3v1Rn3k20Zi/YSEijPUPEu+f0/lstuJR3NTw0Qft
kS8AtxZhwRHbSlPyQFzXUXNu5pJfGzO6ajrBSTasMkVNaPxNMvZLARttuKTT
atg5hfV+Z8Mp4ZswBjVFiX2nRyzGhorY0kWXxuBCwS+depvy0O1qxwau7WMh
9O758hFcm9NMGTEOXQS/pACx6m+ph8tSYfDrb8ee1jrhTWkYKBtudSBrhY5c
k4Y1+rJyxzJ4RTclDUt0+GiTEzr66qRRadim07o43Ek9vxiPd3RVMqxO8kkf
y/l9XNis030WNRQjG0V21YqKYZPnuwdDaJVPUdBn+ucjGxX3w8e6fKV93ViX
FFhwyx6Hezt0oYMqegnvhz0gKscu8eBv3V7bPqBp+oD9J6I13Bb9yoZx/TwN
hh0x47jfGg3JOtyTeZPwlviyS2Ode2dBXImr1NBKnu/NhMA40jUIu9ZdsrFG
eGR7EKOUn9xSk8P12SokDTleC7zmjJ/OnlRgb75n+I0jFu6/wcV5xyzQq64q
GO+iL6ct1DXORZ8vW1Cly5/eycW6Iq3optu1o60L03Q5IhNzya91MSRtGW8u
Jp/6Cox49S6gvkE3xzMKqccZFSNuFDbfU+ng+21eiB1ZJhcSJOBVftSKriku
+t8kQF6nXMznkgDaSD70fQx++UHibnJjsKw/FYTOamr4uUqciUHEyPtzHuYh
Joh14qtN4/xQAD0lj7rOBp/bfkwRvp286CXP3/ZjvpyHJl7mfYiP63wa/XB4
mfsCjXme48Uh0dWssZ62XvKPqcOv1jjf6qEPHTSIvKW3VPLI9FDvKBVGrJqr
1LmPG8Yxv6Zwn+o6neco5PGrQl2mK+Rbo3DdVIV1j3bDJ3lYoSBFcveVm/gX
6vAqVcQLvsXNXJ5WIe0q3eYmzyce7tdahdg33K3R9yyVz7t76cOJujpyvfTh
vkq8V308Tyke6jjMRx3meeh/qY86+D3k876f7y946McHAZ7fbz3ECQTJz+lB
reRkaQl59KzDnxxi/U6V+peHiHfUjYFS59MQ85Xqhl90aRnmefhagUd0iQ5T
x2kK6/grxPdVxfz9Dy+rGPMFf2KI+j5ysS81CFGPrS7WV1VCHEfd+Xu9hHXU
dzGfbQJoJud41zK0FR/b+Zi/x0X097qGeMnTK3bqoGroIe/zCyHt8ZpD4/OZ
heR1QMNd6b+WQhyTfa970U0MP1bIfA4NkGeZnXz6BanfyCL2jVAQGXLO7UXU
Ib6E/VktYh3bS6hfRhH1uBYij3t23BQjz4TJRynETTnu9ZbjB+lLxwtgtM/X
lrMPJL0YG/sG8/+fb+BH59O/2jDnz8yjv/vCvF+ci7mvPQyReUWTunGXMPXM
tlGPfSH2wdpc4jqC7CfPrRxXBJjnKVbWe9MP4xpdZaE+mp9+JVt4fp5p1K/x
AvaTdh727aQszn/uZt9OnEu+ihsfyT3z52ziT3Lz/rbMJo+9Cnb+rhPpOBOr
RZA8F76X74Q74yHH7Ub/pbynqs304Xw+773ceOpzIA+lw3WB7g5kXnrZEK3T
bPHZIOrQIRfr5N6uScAAIXRoEb8/zgymn/9Y8VTurTSw/3itqJDnkWa8Ieub
WrFbBPnEzDzttPDexhDI9Ri59cXYOP/rXxrnWpjn1eB9k2LhuTUlUOeKHBiN
pdLEeg9mg8I1LH/5e+pf8dcw3g==
              "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQfevc9+DHkjkODlzXFxfUOjjsmy+lf/cElP/X0aEo
Y+LbmvpcBwHdTXPfs7vC+TL6d1XYCt3g/CtKt3/WvXJzmJYn1HxAL9eBAQQe
uEPkt+c49EwHSlzwABtrK5TlkGJ9379X3c/hAkifXprDN42Y/kNXQx3idnny
MH1Ocjjhbd7pmBDrsMh12+e/LgkOqz5e8k26kOiwTiYqxXp/FET911QHudbX
gTuehTkcA6nPyYTY1x7k8GTp7CMKMbkOVltOlO0rD4C4x6rA4QvQGIEKf4cq
kXXuD8WKHPaUTJZgmebnsANkkFmxw4GvQIMX+TkobACaZFwMcWe4t8MnkL5/
RQ5VL9UMOd44OgB1hfGlFjnkgA2wcjAABkfj0QKHFqBz5FhtHVy6c57/bsyF
yB+xg7hXM9thBcihik4Qf0tlOvjwMGm3H/OAuPdCqoMaW+NU5+RghxmgcDwU
C6Gt4h1OLAQGBK+/QzHIf/uTIfaJujkcB/n7RopDh9jNc983OzuUgOSD0xwW
gMItBRp/69MdOkDuemrvoAfSNzPDIQDk4Y+2Du9q7E3j+DIdZoD802sLUS+f
5fDh75WKl8dsIep9sx1+gPhsdg63ftZl7WnIdjAw5FgjEwXko6UfAIKqB2M=

              "], CompressedData["
1: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
oVjG/cBy4nGgDRiwXxRL///e+xec6JEj
              "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQXZQx8W0Nf77DGpmoFOvyeIcakXXuD0/lOnzTiOk/
FJjgcMzbvNNxQa7DAtdtn/8qJDnsKZkswXIsz0GNrXGq8+0kh3c19qZx7/Ic
FoHkvyQ5tLwO3CF3M99hWp5Q8wG3ZAfLLSfK9qUXQMQnJjssnX1EYYNbkQPX
9cUFtptSHDodE55eaCl2uPOzLmvPllSHapD9k0odnoAUHkmH2O9Q7gAyZn5R
pkP5vvlS+qnlEHubMiHqL5RD1O/IgMgbVziE8Olumvs/3WEGyB1WFQ4TDn3V
iJFOdwAZl/C03GHVx0u+SQFpDgZ3Vdgat5Y7XFC6/bPuXqoD0HdhfKWlDlUg
c/uSHYSbD5xayFsCsT8uyeGBf+/0PKFiB5funOe/OxMh/okpcFABhUd2PMSc
b/kOX0DhZxvvoGbIsUZmWb5Dwi5PHibteIcCW6DPPfIdOED+d4p3QA9/AKEX
tx4=
              "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3fI6cIecZ6YDmL6Y6mBwV4Wt8WCGw61z34Mfi6Y5
FGVMfFtjnwGRv4ngP1k6+4hCQjqcv+VE2b75r6D8/RkOYXy6m+YuznAAmjbV
OT0TwufOhKgry3fwMu90TDib45Dz/PfKj30FDtPyhJoPvMt1UNgANKG92OHQ
V42YfoNCh8kSLGF8R0scHoPskytyeODfOz1vVanDdJD6fUUOO+RaXwdeKIXI
nypyuA+S9ytz4AVa9/59kUMuyPwbZQ7CzQdOLZxY5FC+b76U/usyiD2cRQ6W
IAf9LnOQjUqxvt9b6AD0jGncszKIOysKIfo2ljis+njJN2lJvoNWu9jNc/5F
Dse8gR4QyXEAeev9wwKHBa7bPv8VyIL4/3yewzeg8w8ZZkDEe7IcqkTWuT+s
S3UQAplnmuUADrbIVAf08AcAf4/C6A==
              "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3X/oq0YMe7LDtDyh5gNsuQ7hfLqb5vYnOXzRiOk/
JJvrAJZ/nuiQNfFtjf3VXIe9JZMlWM4lOqz6eMk3KSbPIW6XJw/T/EQHh4Sn
F5TC8x1U2RqnOl9PdPgG0r8y3yEMZN7xZIedcq2vAxcVOGw5UbZvflqaAwMI
7Ch0aHkduEOuMd0BaGoYn2WRQ890oEM2ZDlcVLr9s+5UMdwdO0D6/5Q4HPM2
73RckgtRb14K4XPkOdz3752e51DqIBOVYn3/c54DyNn9YVD+7nwHrXaxm+fk
Sx0sQQ5gL3A4DtK3qcRh2ewjChusChw6HYEe0ClxaAW5x7AAQsuXQN2Z4wBy
1gG/Igh/RiZE36ECh3c19qZxVhkQ9coFDkUZwIBan+pw69z34MeGeQ4zQPrs
UiDuZMl1kAW553EyhH8nxwE9/AFavquU
              "]}]}, AspectRatio -> Automatic, ImageSize -> 25, 
           PlotRange -> {{0., 1026.}, {0., 914.}}]], 
         Deploy[
          Graphics[{
            Thickness[0.0012787723785166241`], 
            
            FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1,
               4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1,
               4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
              "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
              "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
              "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
              "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
              "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
              "]}]}, AspectRatio -> Automatic, ImageSize -> 25, 
           PlotRange -> {{0., 782.}, {0., 668.}}]], 
         Deploy[
          Graphics[{
            Thickness[0.0009523809523809524], 
            
            FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
              0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
              0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
              1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1,
               3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
              0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
              "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
              "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
              "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
              "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

              "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
              "]}]}, AspectRatio -> Automatic, ImageSize -> 25, 
           PlotRange -> {{0., 1050.}, {0., 740.}}]]}, "MissingCode" -> -1, 
       "Version" -> {12.1, 1}, "ID" -> 1622650028530212236, "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]]]], 
    "PerformanceGoal" -> Automatic, "Model" -> 
    Association[
     "Method" -> "Markov", "Order" -> 1, "Smoothing" -> "KneserNey", 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NominalSequence", "Weight" -> 1], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
         False, "Missing" -> "Allowed"]], "TokenNumber" -> 3, 
      "VocabularySize" -> 5, "TokenizationMapping" -> 
      Association[
       0 -> 1, DirectedInfinity[-1] -> 2, DirectedInfinity[1] -> 3, 1 -> 4, 2 -> 
        5, 3 -> 6], "UnknownToken" -> 1, "StartToken" -> 2, "StopToken" -> 3, 
      "LogProbabilities" -> 
      Association[
       "1Gram" -> {-1., 0., -0.60206, -0.69897, -0.60206, -0.69897}, "2Gram" -> 
        SparseArray[
         Automatic, {6, 6}, Missing, {
          1, {{0, 2, 2, 5, 5, 8, 10}, {{3}, {5}, {4}, {5}, {6}, {3}, {4}, {
            5}, {3}, {
            6}}}, {-0.5901608, -0.40248767, -0.6446124, -0.4164234, \
-0.6446124, -0.48811665, -0.6917914, -0.61678326, -0.7351166, -0.2986239}}]], 
      "Discounts" -> 
      Association[
       "1Gram" -> Association["D1" -> "0.5", "D2" -> "1", "D3+" -> "1.5"], 
        "2Gram" -> Association[
         "D1" -> "0.333333", "D2" -> "1.75", "D3+" -> "1.66667"]], 
      "LogBackoffWeights" -> 
      Association[
       "1Gram" -> {-0.15836251, 0., -0.33099324, 
         0., -0.11539343, -0.24454866}], "Indexes" -> 
      Association["1Gram" -> MachineLearning`SortedHashAssociation[
          Association[
          "KeyHashes" -> {-2105771519489905399, 663911524999149538, 
            4072388973597673248, 4528882873966812144, 7509189838328008390, 
            8742360237250934914}, "Values" -> None, "DefaultValue" -> -1, 
           "HashFunction" -> 
           Function[{
             MachineLearning`file155SortedHashAssociation`PackagePrivate`keys$\
}, 
             Switch[
             MachineLearning`file155SortedHashAssociation`PackagePrivate`keys$\
, {
               BlankSequence[String]}, 
              Data`StringHash[
              MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, "Murmur3-64"], 
              PatternTest[
               Blank[], 
               MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
              MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 
              PatternTest[
               Blank[], 
               MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
              
              Block[{MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q}, 
               MachineLearning`file155SortedHashAssociation`PackagePrivate`q = {
                  Quotient[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 
                  Quotient[
                   Mod[
                   MachineLearning`file155SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                  Quotient[
                   Mod[
                   MachineLearning`file155SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                  Mod[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 2^16]}; 
               MachineLearning`file155SortedHashAssociation`PackagePrivate`q = 
                Transpose[
                  MachineLearning`PackageScope`ToPackedArray[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q], {1, 3, 2}]; 
               MachineLearning`file155SortedHashAssociation`PackagePrivate`q = 
                Transpose[
                  Flatten[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q, 1]]; Data`StringHash[
                 FromCharacterCode[
                  Abs[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q]], "Murmur3-64"]], 
              Blank[List], 
              Map[Switch[#, 
                Blank[String], 
                Data`StringHash[#, "Murmur3-64"], 
                PatternTest[
                 Blank[], Developer`MachineIntegerQ], #, {
                 PatternTest[
                  BlankSequence[], Developer`MachineIntegerQ]}, 
                
                Block[{MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q}, 
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q = Flatten[MachineLearning`file155SortedHashAssociation`PackagePrivate`q]; 
                 Data`StringHash[
                   FromCharacterCode[
                    Abs[
                    MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                Blank[], 
                Data`StringHash[
                 StringJoin[
                  ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
               MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$]]], "Version" -> {12.1, 1}]]], "RestLogProbabilities" -> 
      Association[
       "1Gram" -> {-1.1995723, 
         0., -0.6066557, -0.8473899, -0.5228787, -0.6066557}]]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.815305942102944*^9, 3.815317061941555*^9, 
  3.815319276738393*^9, 3.8153218411459928`*^9, 3.815321996369356*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"860e8965-4c0e-4cc4-a136-b581b61ba283"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 17", "Subsection",
 CellChangeTimes->{{3.7801944894038343`*^9, 3.7801944911663017`*^9}, {
  3.8144381948946314`*^9, 
  3.814438195556856*^9}},ExpressionUUID->"1fa4b2e6-e8be-4c5c-a723-\
440ae060dba1"],

Cell["\<\
Use the trained predictor to predict an opponent\[CloseCurlyQuote]s next \
action given their last action (i.e. do this for rock, paper and scissors \
actions).\
\>", "Text",
 CellChangeTimes->{
  3.7801547999786673`*^9, {3.780194497362796*^9, 
   3.780194551166503*^9}},ExpressionUUID->"2c6f60d7-2d28-4731-a31a-\
542a01daa2a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sp", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", " ", 
     TagBox[
      GraphicsBox[
       {Thickness[0.0012787723785166241`], 
        FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
          "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
          "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
          "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
          "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
          "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
          "]}]},
       AspectRatio->Automatic,
       ImageSize->25,
       PlotRange->{{0., 782.}, {0., 668.}}],
      Deploy,
      DefaultBaseStyle->"Deploy"], "}"}], ",", " ", 
    RowBox[{"{", " ", 
     TagBox[
      GraphicsBox[
       {Thickness[0.0009746588693957114], 
        FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVgtwTGcYjUg1VUOosmOUeAyptxnGK5GzEq+oR6Ql3vGahJjYlZVENtZu
7t69+8ou49lSj6JmMKT1bGvSlIwYVZQoatSjaWkrpFpFUb3fPWnNyExm57/3
/89/vnPO//233ayF4+dGRkRErNH/5ff4qH4+c20mIoy/eqjevr4idsRcRJwf
PSvmUktceeyYfyRqFk7klW1qtbA3fj7b/srjjTPgbHH59MN9g3En9XAbddR7
OLFl6ME/ro7BSfntbkbDi1stCYsyYJo8Z9C1sZ2JuzwTGfqoZG0kdLSeV4vm
w2kQqP5yQuPun364cgEi3v1Rn3k20Zi/YSEijPUPEu+f0/lstuJR3NTw0Qft
kS8AtxZhwRHbSlPyQFzXUXNu5pJfGzO6ajrBSTasMkVNaPxNMvZLARttuKTT
atg5hfV+Z8Mp4ZswBjVFiX2nRyzGhorY0kWXxuBCwS+depvy0O1qxwau7WMh
9O758hFcm9NMGTEOXQS/pACx6m+ph8tSYfDrb8ee1jrhTWkYKBtudSBrhY5c
k4Y1+rJyxzJ4RTclDUt0+GiTEzr66qRRadim07o43Ek9vxiPd3RVMqxO8kkf
y/l9XNis030WNRQjG0V21YqKYZPnuwdDaJVPUdBn+ucjGxX3w8e6fKV93ViX
FFhwyx6Hezt0oYMqegnvhz0gKscu8eBv3V7bPqBp+oD9J6I13Bb9yoZx/TwN
hh0x47jfGg3JOtyTeZPwlviyS2Ode2dBXImr1NBKnu/NhMA40jUIu9ZdsrFG
eGR7EKOUn9xSk8P12SokDTleC7zmjJ/OnlRgb75n+I0jFu6/wcV5xyzQq64q
GO+iL6ct1DXORZ8vW1Cly5/eycW6Iq3optu1o60L03Q5IhNzya91MSRtGW8u
Jp/6Cox49S6gvkE3xzMKqccZFSNuFDbfU+ng+21eiB1ZJhcSJOBVftSKriku
+t8kQF6nXMznkgDaSD70fQx++UHibnJjsKw/FYTOamr4uUqciUHEyPtzHuYh
Joh14qtN4/xQAD0lj7rOBp/bfkwRvp286CXP3/ZjvpyHJl7mfYiP63wa/XB4
mfsCjXme48Uh0dWssZ62XvKPqcOv1jjf6qEPHTSIvKW3VPLI9FDvKBVGrJqr
1LmPG8Yxv6Zwn+o6neco5PGrQl2mK+Rbo3DdVIV1j3bDJ3lYoSBFcveVm/gX
6vAqVcQLvsXNXJ5WIe0q3eYmzyce7tdahdg33K3R9yyVz7t76cOJujpyvfTh
vkq8V308Tyke6jjMRx3meeh/qY86+D3k876f7y946McHAZ7fbz3ECQTJz+lB
reRkaQl59KzDnxxi/U6V+peHiHfUjYFS59MQ85Xqhl90aRnmefhagUd0iQ5T
x2kK6/grxPdVxfz9Dy+rGPMFf2KI+j5ysS81CFGPrS7WV1VCHEfd+Xu9hHXU
dzGfbQJoJud41zK0FR/b+Zi/x0X097qGeMnTK3bqoGroIe/zCyHt8ZpD4/OZ
heR1QMNd6b+WQhyTfa970U0MP1bIfA4NkGeZnXz6BanfyCL2jVAQGXLO7UXU
Ib6E/VktYh3bS6hfRhH1uBYij3t23BQjz4TJRynETTnu9ZbjB+lLxwtgtM/X
lrMPJL0YG/sG8/+fb+BH59O/2jDnz8yjv/vCvF+ci7mvPQyReUWTunGXMPXM
tlGPfSH2wdpc4jqC7CfPrRxXBJjnKVbWe9MP4xpdZaE+mp9+JVt4fp5p1K/x
AvaTdh727aQszn/uZt9OnEu+ihsfyT3z52ziT3Lz/rbMJo+9Cnb+rhPpOBOr
RZA8F76X74Q74yHH7Ub/pbynqs304Xw+773ceOpzIA+lw3WB7g5kXnrZEK3T
bPHZIOrQIRfr5N6uScAAIXRoEb8/zgymn/9Y8VTurTSw/3itqJDnkWa8Ieub
WrFbBPnEzDzttPDexhDI9Ri59cXYOP/rXxrnWpjn1eB9k2LhuTUlUOeKHBiN
pdLEeg9mg8I1LH/5e+pf8dcw3g==
          "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQfevc9+DHkjkODlzXFxfUOjjsmy+lf/cElP/X0aEo
Y+LbmvpcBwHdTXPfs7vC+TL6d1XYCt3g/CtKt3/WvXJzmJYn1HxAL9eBAQQe
uEPkt+c49EwHSlzwABtrK5TlkGJ9379X3c/hAkifXprDN42Y/kNXQx3idnny
MH1Ocjjhbd7pmBDrsMh12+e/LgkOqz5e8k26kOiwTiYqxXp/FET911QHudbX
gTuehTkcA6nPyYTY1x7k8GTp7CMKMbkOVltOlO0rD4C4x6rA4QvQGIEKf4cq
kXXuD8WKHPaUTJZgmebnsANkkFmxw4GvQIMX+TkobACaZFwMcWe4t8MnkL5/
RQ5VL9UMOd44OgB1hfGlFjnkgA2wcjAABkfj0QKHFqBz5FhtHVy6c57/bsyF
yB+xg7hXM9thBcihik4Qf0tlOvjwMGm3H/OAuPdCqoMaW+NU5+RghxmgcDwU
C6Gt4h1OLAQGBK+/QzHIf/uTIfaJujkcB/n7RopDh9jNc983OzuUgOSD0xwW
gMItBRp/69MdOkDuemrvoAfSNzPDIQDk4Y+2Du9q7E3j+DIdZoD802sLUS+f
5fDh75WKl8dsIep9sx1+gPhsdg63ftZl7WnIdjAw5FgjEwXko6UfAIKqB2M=

          "], CompressedData["
1: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
oVjG/cBy4nGgDRiwXxRL///e+xec6JEj
          "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQXZQx8W0Nf77DGpmoFOvyeIcakXXuD0/lOnzTiOk/
FJjgcMzbvNNxQa7DAtdtn/8qJDnsKZkswXIsz0GNrXGq8+0kh3c19qZx7/Ic
FoHkvyQ5tLwO3CF3M99hWp5Q8wG3ZAfLLSfK9qUXQMQnJjssnX1EYYNbkQPX
9cUFtptSHDodE55eaCl2uPOzLmvPllSHapD9k0odnoAUHkmH2O9Q7gAyZn5R
pkP5vvlS+qnlEHubMiHqL5RD1O/IgMgbVziE8Olumvs/3WEGyB1WFQ4TDn3V
iJFOdwAZl/C03GHVx0u+SQFpDgZ3Vdgat5Y7XFC6/bPuXqoD0HdhfKWlDlUg
c/uSHYSbD5xayFsCsT8uyeGBf+/0PKFiB5funOe/OxMh/okpcFABhUd2PMSc
b/kOX0DhZxvvoGbIsUZmWb5Dwi5PHibteIcCW6DPPfIdOED+d4p3QA9/AKEX
tx4=
          "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3fI6cIecZ6YDmL6Y6mBwV4Wt8WCGw61z34Mfi6Y5
FGVMfFtjnwGRv4ngP1k6+4hCQjqcv+VE2b75r6D8/RkOYXy6m+YuznAAmjbV
OT0TwufOhKgry3fwMu90TDib45Dz/PfKj30FDtPyhJoPvMt1UNgANKG92OHQ
V42YfoNCh8kSLGF8R0scHoPskytyeODfOz1vVanDdJD6fUUOO+RaXwdeKIXI
nypyuA+S9ytz4AVa9/59kUMuyPwbZQ7CzQdOLZxY5FC+b76U/usyiD2cRQ6W
IAf9LnOQjUqxvt9b6AD0jGncszKIOysKIfo2ljis+njJN2lJvoNWu9jNc/5F
Dse8gR4QyXEAeev9wwKHBa7bPv8VyIL4/3yewzeg8w8ZZkDEe7IcqkTWuT+s
S3UQAplnmuUADrbIVAf08AcAf4/C6A==
          "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3X/oq0YMe7LDtDyh5gNsuQ7hfLqb5vYnOXzRiOk/
JJvrAJZ/nuiQNfFtjf3VXIe9JZMlWM4lOqz6eMk3KSbPIW6XJw/T/EQHh4Sn
F5TC8x1U2RqnOl9PdPgG0r8y3yEMZN7xZIedcq2vAxcVOGw5UbZvflqaAwMI
7Ch0aHkduEOuMd0BaGoYn2WRQ890oEM2ZDlcVLr9s+5UMdwdO0D6/5Q4HPM2
73RckgtRb14K4XPkOdz3752e51DqIBOVYn3/c54DyNn9YVD+7nwHrXaxm+fk
Sx0sQQ5gL3A4DtK3qcRh2ewjChusChw6HYEe0ClxaAW5x7AAQsuXQN2Z4wBy
1gG/Igh/RiZE36ECh3c19qZxVhkQ9coFDkUZwIBan+pw69z34MeGeQ4zQPrs
UiDuZMl1kAW553EyhH8nxwE9/AFavquU
          "]}]},
       AspectRatio->Automatic,
       ImageSize->25,
       PlotRange->{{0., 1026.}, {0., 914.}}],
      Deploy,
      DefaultBaseStyle->"Deploy"], "}"}], ",", " ", 
    RowBox[{"{", " ", 
     TagBox[
      GraphicsBox[
       {Thickness[0.0009523809523809524], 
        FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
          0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
          0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
          3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
          "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
          "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
          "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
          "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

          "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
          "]}]},
       AspectRatio->Automatic,
       ImageSize->25,
       PlotRange->{{0., 1050.}, {0., 740.}}],
      Deploy,
      DefaultBaseStyle->"Deploy"], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.815306009724152*^9, 3.815306039394683*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"b2519cdd-cc10-4684-9af6-d36070c346a1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    GraphicsBox[
     {Thickness[0.0009523809523809524], 
      FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
        0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
        0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
        "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
        "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
        "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
        "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

        "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
        "]}]},
     AspectRatio->Automatic,
     ImageSize->25,
     PlotRange->{{0., 1050.}, {0., 740.}}],
    Deploy,
    DefaultBaseStyle->"Deploy"], ",", 
   TagBox[
    GraphicsBox[
     {Thickness[0.0012787723785166241`], 
      FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
        "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
        "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
        "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
        "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
        "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
        "]}]},
     AspectRatio->Automatic,
     ImageSize->25,
     PlotRange->{{0., 782.}, {0., 668.}}],
    Deploy,
    DefaultBaseStyle->"Deploy"], ",", 
   TagBox[
    GraphicsBox[
     {Thickness[0.0012787723785166241`], 
      FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
        "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
        "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
        "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
        "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
        "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
        "]}]},
     AspectRatio->Automatic,
     ImageSize->25,
     PlotRange->{{0., 782.}, {0., 668.}}],
    Deploy,
    DefaultBaseStyle->"Deploy"]}], "}"}]], "Output",
 CellChangeTimes->{3.815306040186226*^9, 3.8153170621014996`*^9, 
  3.8153192768186955`*^9, 3.8153218412439594`*^9, 3.815321996494313*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"67c9297b-119a-4f77-a17b-0118044dfd4d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 18", "Subsection",
 CellChangeTimes->{{3.780194602090464*^9, 3.7801946037242393`*^9}, {
  3.814438197980375*^9, 
  3.8144381984461317`*^9}},ExpressionUUID->"a2dbf676-8052-438e-9acc-\
65a9ceeec1dd"],

Cell["\<\
What are the probabilities of next action for each of the three possible \
actions of your opponent in the previous round?\
\>", "Text",
 CellChangeTimes->{{3.780194607050861*^9, 
  3.780194635980891*^9}},ExpressionUUID->"38335859-85b8-4c5b-bab3-\
080a3f73164d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sp", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", " ", 
      TagBox[
       GraphicsBox[
        {Thickness[0.0012787723785166241`], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
           4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
           3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{
           1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
           1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
           "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
           "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
           "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
           "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
           "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
           "]}]},
        AspectRatio->Automatic,
        ImageSize->25,
        PlotRange->{{0., 782.}, {0., 668.}}],
       Deploy,
       DefaultBaseStyle->"Deploy"], "}"}], ",", " ", 
     RowBox[{"{", " ", 
      TagBox[
       GraphicsBox[
        {Thickness[0.0009746588693957114], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
           4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
           3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVgtwTGcYjUg1VUOosmOUeAyptxnGK5GzEq+oR6Ql3vGahJjYlZVENtZu
7t69+8ou49lSj6JmMKT1bGvSlIwYVZQoatSjaWkrpFpFUb3fPWnNyExm57/3
/89/vnPO//233ayF4+dGRkRErNH/5ff4qH4+c20mIoy/eqjevr4idsRcRJwf
PSvmUktceeyYfyRqFk7klW1qtbA3fj7b/srjjTPgbHH59MN9g3En9XAbddR7
OLFl6ME/ro7BSfntbkbDi1stCYsyYJo8Z9C1sZ2JuzwTGfqoZG0kdLSeV4vm
w2kQqP5yQuPun364cgEi3v1Rn3k20Zi/YSEijPUPEu+f0/lstuJR3NTw0Qft
kS8AtxZhwRHbSlPyQFzXUXNu5pJfGzO6ajrBSTasMkVNaPxNMvZLARttuKTT
atg5hfV+Z8Mp4ZswBjVFiX2nRyzGhorY0kWXxuBCwS+depvy0O1qxwau7WMh
9O758hFcm9NMGTEOXQS/pACx6m+ph8tSYfDrb8ee1jrhTWkYKBtudSBrhY5c
k4Y1+rJyxzJ4RTclDUt0+GiTEzr66qRRadim07o43Ek9vxiPd3RVMqxO8kkf
y/l9XNis030WNRQjG0V21YqKYZPnuwdDaJVPUdBn+ucjGxX3w8e6fKV93ViX
FFhwyx6Hezt0oYMqegnvhz0gKscu8eBv3V7bPqBp+oD9J6I13Bb9yoZx/TwN
hh0x47jfGg3JOtyTeZPwlviyS2Ode2dBXImr1NBKnu/NhMA40jUIu9ZdsrFG
eGR7EKOUn9xSk8P12SokDTleC7zmjJ/OnlRgb75n+I0jFu6/wcV5xyzQq64q
GO+iL6ct1DXORZ8vW1Cly5/eycW6Iq3optu1o60L03Q5IhNzya91MSRtGW8u
Jp/6Cox49S6gvkE3xzMKqccZFSNuFDbfU+ng+21eiB1ZJhcSJOBVftSKriku
+t8kQF6nXMznkgDaSD70fQx++UHibnJjsKw/FYTOamr4uUqciUHEyPtzHuYh
Joh14qtN4/xQAD0lj7rOBp/bfkwRvp286CXP3/ZjvpyHJl7mfYiP63wa/XB4
mfsCjXme48Uh0dWssZ62XvKPqcOv1jjf6qEPHTSIvKW3VPLI9FDvKBVGrJqr
1LmPG8Yxv6Zwn+o6neco5PGrQl2mK+Rbo3DdVIV1j3bDJ3lYoSBFcveVm/gX
6vAqVcQLvsXNXJ5WIe0q3eYmzyce7tdahdg33K3R9yyVz7t76cOJujpyvfTh
vkq8V308Tyke6jjMRx3meeh/qY86+D3k876f7y946McHAZ7fbz3ECQTJz+lB
reRkaQl59KzDnxxi/U6V+peHiHfUjYFS59MQ85Xqhl90aRnmefhagUd0iQ5T
x2kK6/grxPdVxfz9Dy+rGPMFf2KI+j5ysS81CFGPrS7WV1VCHEfd+Xu9hHXU
dzGfbQJoJud41zK0FR/b+Zi/x0X097qGeMnTK3bqoGroIe/zCyHt8ZpD4/OZ
heR1QMNd6b+WQhyTfa970U0MP1bIfA4NkGeZnXz6BanfyCL2jVAQGXLO7UXU
Ib6E/VktYh3bS6hfRhH1uBYij3t23BQjz4TJRynETTnu9ZbjB+lLxwtgtM/X
lrMPJL0YG/sG8/+fb+BH59O/2jDnz8yjv/vCvF+ci7mvPQyReUWTunGXMPXM
tlGPfSH2wdpc4jqC7CfPrRxXBJjnKVbWe9MP4xpdZaE+mp9+JVt4fp5p1K/x
AvaTdh727aQszn/uZt9OnEu+ihsfyT3z52ziT3Lz/rbMJo+9Cnb+rhPpOBOr
RZA8F76X74Q74yHH7Ub/pbynqs304Xw+773ceOpzIA+lw3WB7g5kXnrZEK3T
bPHZIOrQIRfr5N6uScAAIXRoEb8/zgymn/9Y8VTurTSw/3itqJDnkWa8Ieub
WrFbBPnEzDzttPDexhDI9Ri59cXYOP/rXxrnWpjn1eB9k2LhuTUlUOeKHBiN
pdLEeg9mg8I1LH/5e+pf8dcw3g==
           "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQfevc9+DHkjkODlzXFxfUOjjsmy+lf/cElP/X0aEo
Y+LbmvpcBwHdTXPfs7vC+TL6d1XYCt3g/CtKt3/WvXJzmJYn1HxAL9eBAQQe
uEPkt+c49EwHSlzwABtrK5TlkGJ9379X3c/hAkifXprDN42Y/kNXQx3idnny
MH1Ocjjhbd7pmBDrsMh12+e/LgkOqz5e8k26kOiwTiYqxXp/FET911QHudbX
gTuehTkcA6nPyYTY1x7k8GTp7CMKMbkOVltOlO0rD4C4x6rA4QvQGIEKf4cq
kXXuD8WKHPaUTJZgmebnsANkkFmxw4GvQIMX+TkobACaZFwMcWe4t8MnkL5/
RQ5VL9UMOd44OgB1hfGlFjnkgA2wcjAABkfj0QKHFqBz5FhtHVy6c57/bsyF
yB+xg7hXM9thBcihik4Qf0tlOvjwMGm3H/OAuPdCqoMaW+NU5+RghxmgcDwU
C6Gt4h1OLAQGBK+/QzHIf/uTIfaJujkcB/n7RopDh9jNc983OzuUgOSD0xwW
gMItBRp/69MdOkDuemrvoAfSNzPDIQDk4Y+2Du9q7E3j+DIdZoD802sLUS+f
5fDh75WKl8dsIep9sx1+gPhsdg63ftZl7WnIdjAw5FgjEwXko6UfAIKqB2M=

           "], CompressedData["
1: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
oVjG/cBy4nGgDRiwXxRL///e+xec6JEj
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQXZQx8W0Nf77DGpmoFOvyeIcakXXuD0/lOnzTiOk/
FJjgcMzbvNNxQa7DAtdtn/8qJDnsKZkswXIsz0GNrXGq8+0kh3c19qZx7/Ic
FoHkvyQ5tLwO3CF3M99hWp5Q8wG3ZAfLLSfK9qUXQMQnJjssnX1EYYNbkQPX
9cUFtptSHDodE55eaCl2uPOzLmvPllSHapD9k0odnoAUHkmH2O9Q7gAyZn5R
pkP5vvlS+qnlEHubMiHqL5RD1O/IgMgbVziE8Olumvs/3WEGyB1WFQ4TDn3V
iJFOdwAZl/C03GHVx0u+SQFpDgZ3Vdgat5Y7XFC6/bPuXqoD0HdhfKWlDlUg
c/uSHYSbD5xayFsCsT8uyeGBf+/0PKFiB5funOe/OxMh/okpcFABhUd2PMSc
b/kOX0DhZxvvoGbIsUZmWb5Dwi5PHibteIcCW6DPPfIdOED+d4p3QA9/AKEX
tx4=
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3fI6cIecZ6YDmL6Y6mBwV4Wt8WCGw61z34Mfi6Y5
FGVMfFtjnwGRv4ngP1k6+4hCQjqcv+VE2b75r6D8/RkOYXy6m+YuznAAmjbV
OT0TwufOhKgry3fwMu90TDib45Dz/PfKj30FDtPyhJoPvMt1UNgANKG92OHQ
V42YfoNCh8kSLGF8R0scHoPskytyeODfOz1vVanDdJD6fUUOO+RaXwdeKIXI
nypyuA+S9ytz4AVa9/59kUMuyPwbZQ7CzQdOLZxY5FC+b76U/usyiD2cRQ6W
IAf9LnOQjUqxvt9b6AD0jGncszKIOysKIfo2ljis+njJN2lJvoNWu9jNc/5F
Dse8gR4QyXEAeev9wwKHBa7bPv8VyIL4/3yewzeg8w8ZZkDEe7IcqkTWuT+s
S3UQAplnmuUADrbIVAf08AcAf4/C6A==
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3X/oq0YMe7LDtDyh5gNsuQ7hfLqb5vYnOXzRiOk/
JJvrAJZ/nuiQNfFtjf3VXIe9JZMlWM4lOqz6eMk3KSbPIW6XJw/T/EQHh4Sn
F5TC8x1U2RqnOl9PdPgG0r8y3yEMZN7xZIedcq2vAxcVOGw5UbZvflqaAwMI
7Ch0aHkduEOuMd0BaGoYn2WRQ890oEM2ZDlcVLr9s+5UMdwdO0D6/5Q4HPM2
73RckgtRb14K4XPkOdz3752e51DqIBOVYn3/c54DyNn9YVD+7nwHrXaxm+fk
Sx0sQQ5gL3A4DtK3qcRh2ewjChusChw6HYEe0ClxaAW5x7AAQsuXQN2Z4wBy
1gG/Igh/RiZE36ECh3c19qZxVhkQ9coFDkUZwIBan+pw69z34MeGeQ4zQPrs
UiDuZMl1kAW553EyhH8nxwE9/AFavquU
           "]}]},
        AspectRatio->Automatic,
        ImageSize->25,
        PlotRange->{{0., 1026.}, {0., 914.}}],
       Deploy,
       DefaultBaseStyle->"Deploy"], "}"}], ",", " ", 
     RowBox[{"{", " ", 
      TagBox[
       GraphicsBox[
        {Thickness[0.0009523809523809524], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
           0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
           0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
           3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
           3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
           0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
           "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
           "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
           "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

           "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
           "]}]},
        AspectRatio->Automatic,
        ImageSize->25,
        PlotRange->{{0., 1050.}, {0., 740.}}],
       Deploy,
       DefaultBaseStyle->"Deploy"], "}"}]}], "}"}], ",", " ", 
   "\"\<Probabilities\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8153060482640953`*^9, 3.815306050823316*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"43410fa4-63b8-4532-80c1-b213e49739a6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{
      TagBox[
       GraphicsBox[
        {Thickness[0.0009746588693957114], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
           4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
           3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVgtwTGcYjUg1VUOosmOUeAyptxnGK5GzEq+oR6Ql3vGahJjYlZVENtZu
7t69+8ou49lSj6JmMKT1bGvSlIwYVZQoatSjaWkrpFpFUb3fPWnNyExm57/3
/89/vnPO//233ayF4+dGRkRErNH/5ff4qH4+c20mIoy/eqjevr4idsRcRJwf
PSvmUktceeyYfyRqFk7klW1qtbA3fj7b/srjjTPgbHH59MN9g3En9XAbddR7
OLFl6ME/ro7BSfntbkbDi1stCYsyYJo8Z9C1sZ2JuzwTGfqoZG0kdLSeV4vm
w2kQqP5yQuPun364cgEi3v1Rn3k20Zi/YSEijPUPEu+f0/lstuJR3NTw0Qft
kS8AtxZhwRHbSlPyQFzXUXNu5pJfGzO6ajrBSTasMkVNaPxNMvZLARttuKTT
atg5hfV+Z8Mp4ZswBjVFiX2nRyzGhorY0kWXxuBCwS+depvy0O1qxwau7WMh
9O758hFcm9NMGTEOXQS/pACx6m+ph8tSYfDrb8ee1jrhTWkYKBtudSBrhY5c
k4Y1+rJyxzJ4RTclDUt0+GiTEzr66qRRadim07o43Ek9vxiPd3RVMqxO8kkf
y/l9XNis030WNRQjG0V21YqKYZPnuwdDaJVPUdBn+ucjGxX3w8e6fKV93ViX
FFhwyx6Hezt0oYMqegnvhz0gKscu8eBv3V7bPqBp+oD9J6I13Bb9yoZx/TwN
hh0x47jfGg3JOtyTeZPwlviyS2Ode2dBXImr1NBKnu/NhMA40jUIu9ZdsrFG
eGR7EKOUn9xSk8P12SokDTleC7zmjJ/OnlRgb75n+I0jFu6/wcV5xyzQq64q
GO+iL6ct1DXORZ8vW1Cly5/eycW6Iq3optu1o60L03Q5IhNzya91MSRtGW8u
Jp/6Cox49S6gvkE3xzMKqccZFSNuFDbfU+ng+21eiB1ZJhcSJOBVftSKriku
+t8kQF6nXMznkgDaSD70fQx++UHibnJjsKw/FYTOamr4uUqciUHEyPtzHuYh
Joh14qtN4/xQAD0lj7rOBp/bfkwRvp286CXP3/ZjvpyHJl7mfYiP63wa/XB4
mfsCjXme48Uh0dWssZ62XvKPqcOv1jjf6qEPHTSIvKW3VPLI9FDvKBVGrJqr
1LmPG8Yxv6Zwn+o6neco5PGrQl2mK+Rbo3DdVIV1j3bDJ3lYoSBFcveVm/gX
6vAqVcQLvsXNXJ5WIe0q3eYmzyce7tdahdg33K3R9yyVz7t76cOJujpyvfTh
vkq8V308Tyke6jjMRx3meeh/qY86+D3k876f7y946McHAZ7fbz3ECQTJz+lB
reRkaQl59KzDnxxi/U6V+peHiHfUjYFS59MQ85Xqhl90aRnmefhagUd0iQ5T
x2kK6/grxPdVxfz9Dy+rGPMFf2KI+j5ysS81CFGPrS7WV1VCHEfd+Xu9hHXU
dzGfbQJoJud41zK0FR/b+Zi/x0X097qGeMnTK3bqoGroIe/zCyHt8ZpD4/OZ
heR1QMNd6b+WQhyTfa970U0MP1bIfA4NkGeZnXz6BanfyCL2jVAQGXLO7UXU
Ib6E/VktYh3bS6hfRhH1uBYij3t23BQjz4TJRynETTnu9ZbjB+lLxwtgtM/X
lrMPJL0YG/sG8/+fb+BH59O/2jDnz8yjv/vCvF+ci7mvPQyReUWTunGXMPXM
tlGPfSH2wdpc4jqC7CfPrRxXBJjnKVbWe9MP4xpdZaE+mp9+JVt4fp5p1K/x
AvaTdh727aQszn/uZt9OnEu+ihsfyT3z52ziT3Lz/rbMJo+9Cnb+rhPpOBOr
RZA8F76X74Q74yHH7Ub/pbynqs304Xw+773ceOpzIA+lw3WB7g5kXnrZEK3T
bPHZIOrQIRfr5N6uScAAIXRoEb8/zgymn/9Y8VTurTSw/3itqJDnkWa8Ieub
WrFbBPnEzDzttPDexhDI9Ri59cXYOP/rXxrnWpjn1eB9k2LhuTUlUOeKHBiN
pdLEeg9mg8I1LH/5e+pf8dcw3g==
           "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQfevc9+DHkjkODlzXFxfUOjjsmy+lf/cElP/X0aEo
Y+LbmvpcBwHdTXPfs7vC+TL6d1XYCt3g/CtKt3/WvXJzmJYn1HxAL9eBAQQe
uEPkt+c49EwHSlzwABtrK5TlkGJ9379X3c/hAkifXprDN42Y/kNXQx3idnny
MH1Ocjjhbd7pmBDrsMh12+e/LgkOqz5e8k26kOiwTiYqxXp/FET911QHudbX
gTuehTkcA6nPyYTY1x7k8GTp7CMKMbkOVltOlO0rD4C4x6rA4QvQGIEKf4cq
kXXuD8WKHPaUTJZgmebnsANkkFmxw4GvQIMX+TkobACaZFwMcWe4t8MnkL5/
RQ5VL9UMOd44OgB1hfGlFjnkgA2wcjAABkfj0QKHFqBz5FhtHVy6c57/bsyF
yB+xg7hXM9thBcihik4Qf0tlOvjwMGm3H/OAuPdCqoMaW+NU5+RghxmgcDwU
C6Gt4h1OLAQGBK+/QzHIf/uTIfaJujkcB/n7RopDh9jNc983OzuUgOSD0xwW
gMItBRp/69MdOkDuemrvoAfSNzPDIQDk4Y+2Du9q7E3j+DIdZoD802sLUS+f
5fDh75WKl8dsIep9sx1+gPhsdg63ftZl7WnIdjAw5FgjEwXko6UfAIKqB2M=

           "], CompressedData["
1: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
oVjG/cBy4nGgDRiwXxRL///e+xec6JEj
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQXZQx8W0Nf77DGpmoFOvyeIcakXXuD0/lOnzTiOk/
FJjgcMzbvNNxQa7DAtdtn/8qJDnsKZkswXIsz0GNrXGq8+0kh3c19qZx7/Ic
FoHkvyQ5tLwO3CF3M99hWp5Q8wG3ZAfLLSfK9qUXQMQnJjssnX1EYYNbkQPX
9cUFtptSHDodE55eaCl2uPOzLmvPllSHapD9k0odnoAUHkmH2O9Q7gAyZn5R
pkP5vvlS+qnlEHubMiHqL5RD1O/IgMgbVziE8Olumvs/3WEGyB1WFQ4TDn3V
iJFOdwAZl/C03GHVx0u+SQFpDgZ3Vdgat5Y7XFC6/bPuXqoD0HdhfKWlDlUg
c/uSHYSbD5xayFsCsT8uyeGBf+/0PKFiB5funOe/OxMh/okpcFABhUd2PMSc
b/kOX0DhZxvvoGbIsUZmWb5Dwi5PHibteIcCW6DPPfIdOED+d4p3QA9/AKEX
tx4=
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3fI6cIecZ6YDmL6Y6mBwV4Wt8WCGw61z34Mfi6Y5
FGVMfFtjnwGRv4ngP1k6+4hCQjqcv+VE2b75r6D8/RkOYXy6m+YuznAAmjbV
OT0TwufOhKgry3fwMu90TDib45Dz/PfKj30FDtPyhJoPvMt1UNgANKG92OHQ
V42YfoNCh8kSLGF8R0scHoPskytyeODfOz1vVanDdJD6fUUOO+RaXwdeKIXI
nypyuA+S9ytz4AVa9/59kUMuyPwbZQ7CzQdOLZxY5FC+b76U/usyiD2cRQ6W
IAf9LnOQjUqxvt9b6AD0jGncszKIOysKIfo2ljis+njJN2lJvoNWu9jNc/5F
Dse8gR4QyXEAeev9wwKHBa7bPv8VyIL4/3yewzeg8w8ZZkDEe7IcqkTWuT+s
S3UQAplnmuUADrbIVAf08AcAf4/C6A==
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3X/oq0YMe7LDtDyh5gNsuQ7hfLqb5vYnOXzRiOk/
JJvrAJZ/nuiQNfFtjf3VXIe9JZMlWM4lOqz6eMk3KSbPIW6XJw/T/EQHh4Sn
F5TC8x1U2RqnOl9PdPgG0r8y3yEMZN7xZIedcq2vAxcVOGw5UbZvflqaAwMI
7Ch0aHkduEOuMd0BaGoYn2WRQ890oEM2ZDlcVLr9s+5UMdwdO0D6/5Q4HPM2
73RckgtRb14K4XPkOdz3752e51DqIBOVYn3/c54DyNn9YVD+7nwHrXaxm+fk
Sx0sQQ5gL3A4DtK3qcRh2ewjChusChw6HYEe0ClxaAW5x7AAQsuXQN2Z4wBy
1gG/Igh/RiZE36ECh3c19qZxVhkQ9coFDkUZwIBan+pw69z34MeGeQ4zQPrs
UiDuZMl1kAW553EyhH8nxwE9/AFavquU
           "]}]},
        AspectRatio->Automatic,
        ImageSize->25,
        PlotRange->{{0., 1026.}, {0., 914.}},
        ImageCache->GraphicsData["CompressedBitmap", "\<\
eJxFkyGQ2lAQhvcl4YDrtXUdzp1EIpGoFtMZJBLmpjM50TnmegKHRCKRSCQS
iUQikUgkEpl+u/uSZCbJe2/33/33332/p5/5n7/Tz7fX6cuvj+ksf3v99/Lz
/YOjNIjIM++PjrAuWNmbFEUhD9frdTAYXC6X4/HY6/XG43GyWCwkm0wmw+Fw
Pp9j+qKeIk1+9/udY0D7/X40GrGVhlpT4ECWy6U8uneb32q12m635/OZFLie
Ticwu90uYoiBAbO0HPN4u908Kl+SrNdrfFgQF2aGyvABBUncHmIuvDwXXwhj
gTl8lJ/FzrBRHmaOspgN1GazyfOcM5wxYnBSBGkbDge25IdF4riUHyJAUeyk
QS4cWEINYKyOugp7DCApdYMijwR18jhecPSoEVZXitHJWURFBXX2rCnL6G39
abi68D0cDorRmIF16U/y6P+knybhut0uskIJIIvZbCYBtxLBnqp12Sp7HCP4
7LhsXjqO0A+mkFt9dhyAqIBdFyh5oWJ9SGFMTp2CpEY3+/1+UT4koQfEiMpC
NfLyCGx8ViXUHUJuGurKZiAgi5gEycpaOp2OeqjWiS6qzhLPcY1KM4d6vozZ
wwAlStGTQGzXrYxQaZQ6jXpPLaCqfRuojxv0YUkTXUzWEhjaeO/o1MEeghG/
7K+krJBKB8r2LerywSAG/SM27lCPyqiAOC/s0Zvok8aRX1GLomr4zXoq7yl0
6kl2iSr95audMgfErCtl4wMTvb6ZooT22ws57Zjn+V7OOxUCspJhG/4Dj52v
iw==\
\>"]],
       Deploy,
       DefaultBaseStyle->"Deploy"], "\[Rule]", "0.15004573691943127`"}], ",", 
     RowBox[{
      TagBox[
       GraphicsBox[
        {Thickness[0.0012787723785166241`], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
           4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
           3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{
           1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
           1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
           "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
           "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
           "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
           "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
           "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
           "]}]},
        AspectRatio->Automatic,
        ImageSize->25,
        PlotRange->{{0., 782.}, {0., 668.}},
        ImageCache->GraphicsData["CompressedBitmap", "\<\
eJxFky1sAkEQhXc5/tM2tEkT6k4ikUhUi2mCRHIhTQ7RlNAKHBKJRCKRSCQS
iUQikUjk9ZuZBUi4zM3Pm/fe7X4mf+nXd/I3HCTxxzgZpcPBb/z+MyYVeefc
G//XuiPOiPSfz7LM5ReLRaPRWC6Xl8tFM8X9fr9arfr9fr1e53k4HEqSd5E8
I6r0n89nV9F5xoCgdTabFbUvpyjke71eu92mut1ud7ud9TMJaKvVItB9zskY
sM1mczQaTadTtucYcRGrM/25su6m1ul0QDYuRomx+Xzunq8doEuYCx2bzQYS
8vKiHbzQDrLzoQPtjMnLo3YYvfV6bRiiuFardbtd5+EXMMOWJ3mUIEsZIrSS
wAxJe1CCOqpsMZk4YWqQSfJ4PNqeAiikCOM41nkcZb5sY0T4zlq4wg0B6naV
kTRN2W0ccft0Ot1APBuYFKPpmkwmmKcqSwTIIAMY8XUn86IQ+JAx1yANuHZA
QTpMs2Qe9HszgW4qqMZjSOTgLx57kGSCFBzF+ZrqNbMQRUEEesLAFRYoglmk
5wCPwjmo6hlClO1Gk5ePbw5WEGRnDiaAWYBfcmLU8wJIpHjSKuu8HGRXUEdI
wd0WoZc5KRavd4I5yuAjBxF2erQame+3UxeZsvs7OKChSG2L7pN5gKCBhOtt
KJChlyTuCW+7U3oDq3Z3MNGOAVzou310VagOmWt0BxYVO+n+H/KAG8A=\
\>"]],
       Deploy,
       DefaultBaseStyle->"Deploy"], "\[Rule]", "0.18755716553154733`"}], ",", 
     RowBox[{
      TagBox[
       GraphicsBox[
        {Thickness[0.0009523809523809524], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
           0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
           0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
           3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
           3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
           0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
           "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
           "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
           "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

           "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
           "]}]},
        AspectRatio->Automatic,
        ImageSize->25,
        PlotRange->{{0., 1050.}, {0., 740.}},
        ImageCache->GraphicsData["CompressedBitmap", "\<\
eJxNk61vAkEQxWfvOL5C06Q1reNPQCJRLaYJEsmFNLmKpheKwCGRSCQSiURW
IpFIJBKJvP5mBko3YdibfW/mzbu9t3ScvX+m449h2nwdpXn2MfxuvnyNSMVB
RJ75PTwJ+4Kd/R6LopDkcDhkWTYYDIjT6VSCZqVqZ+fz+ccWB0QpabZ0PB7z
PIcBNSITer2es8p2fjqdOG+327PZLFJaBbpX32638Pr9/m63s2qh2+06N9EY
k+90Ouv12nsl1FosFqTg7/d7QwX63noaLt5sNlRF76UObQtbrimmMQyIl/ni
azeyyrq7Ks9ssYn+4cgA0m3DSi6XS3RTkyfcoFngT8Q4CVWZ39uDkYpm6+7l
fD5vtVq4z0iAPGKM+kBWoYyCd9SDgVkwLK0jSewyTKw6oZaI1JiLOShMzs1l
AIi8ALlX3Gq1Qh2ypezvjcWhW20IhAYetRoCOCOCJ4IAQGNq+r2o+MycoRz9
aCdKUACXACgZjz5PhDqJ6XnRbj7VQKDLhU8mE2rRirpqpfnuflCaJEguArW0
SXK9nZzBQafemKpzyq6WYYhUh2N3IAHj9pH8m8W1lDlz46ChBanqb6RXI+YZ
PxRWvd2Jhn8FLgBPmcH3aIXAI3Lrhq/Z66K2f0s43XCl4RdWmQo4\
\>"]],
       Deploy,
       DefaultBaseStyle->"Deploy"], "\[Rule]", "0.6623970975490213`"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{
      TagBox[
       GraphicsBox[
        {Thickness[0.0009746588693957114], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
           4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
           3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVgtwTGcYjUg1VUOosmOUeAyptxnGK5GzEq+oR6Ql3vGahJjYlZVENtZu
7t69+8ou49lSj6JmMKT1bGvSlIwYVZQoatSjaWkrpFpFUb3fPWnNyExm57/3
/89/vnPO//233ayF4+dGRkRErNH/5ff4qH4+c20mIoy/eqjevr4idsRcRJwf
PSvmUktceeyYfyRqFk7klW1qtbA3fj7b/srjjTPgbHH59MN9g3En9XAbddR7
OLFl6ME/ro7BSfntbkbDi1stCYsyYJo8Z9C1sZ2JuzwTGfqoZG0kdLSeV4vm
w2kQqP5yQuPun364cgEi3v1Rn3k20Zi/YSEijPUPEu+f0/lstuJR3NTw0Qft
kS8AtxZhwRHbSlPyQFzXUXNu5pJfGzO6ajrBSTasMkVNaPxNMvZLARttuKTT
atg5hfV+Z8Mp4ZswBjVFiX2nRyzGhorY0kWXxuBCwS+depvy0O1qxwau7WMh
9O758hFcm9NMGTEOXQS/pACx6m+ph8tSYfDrb8ee1jrhTWkYKBtudSBrhY5c
k4Y1+rJyxzJ4RTclDUt0+GiTEzr66qRRadim07o43Ek9vxiPd3RVMqxO8kkf
y/l9XNis030WNRQjG0V21YqKYZPnuwdDaJVPUdBn+ucjGxX3w8e6fKV93ViX
FFhwyx6Hezt0oYMqegnvhz0gKscu8eBv3V7bPqBp+oD9J6I13Bb9yoZx/TwN
hh0x47jfGg3JOtyTeZPwlviyS2Ode2dBXImr1NBKnu/NhMA40jUIu9ZdsrFG
eGR7EKOUn9xSk8P12SokDTleC7zmjJ/OnlRgb75n+I0jFu6/wcV5xyzQq64q
GO+iL6ct1DXORZ8vW1Cly5/eycW6Iq3optu1o60L03Q5IhNzya91MSRtGW8u
Jp/6Cox49S6gvkE3xzMKqccZFSNuFDbfU+ng+21eiB1ZJhcSJOBVftSKriku
+t8kQF6nXMznkgDaSD70fQx++UHibnJjsKw/FYTOamr4uUqciUHEyPtzHuYh
Joh14qtN4/xQAD0lj7rOBp/bfkwRvp286CXP3/ZjvpyHJl7mfYiP63wa/XB4
mfsCjXme48Uh0dWssZ62XvKPqcOv1jjf6qEPHTSIvKW3VPLI9FDvKBVGrJqr
1LmPG8Yxv6Zwn+o6neco5PGrQl2mK+Rbo3DdVIV1j3bDJ3lYoSBFcveVm/gX
6vAqVcQLvsXNXJ5WIe0q3eYmzyce7tdahdg33K3R9yyVz7t76cOJujpyvfTh
vkq8V308Tyke6jjMRx3meeh/qY86+D3k876f7y946McHAZ7fbz3ECQTJz+lB
reRkaQl59KzDnxxi/U6V+peHiHfUjYFS59MQ85Xqhl90aRnmefhagUd0iQ5T
x2kK6/grxPdVxfz9Dy+rGPMFf2KI+j5ysS81CFGPrS7WV1VCHEfd+Xu9hHXU
dzGfbQJoJud41zK0FR/b+Zi/x0X097qGeMnTK3bqoGroIe/zCyHt8ZpD4/OZ
heR1QMNd6b+WQhyTfa970U0MP1bIfA4NkGeZnXz6BanfyCL2jVAQGXLO7UXU
Ib6E/VktYh3bS6hfRhH1uBYij3t23BQjz4TJRynETTnu9ZbjB+lLxwtgtM/X
lrMPJL0YG/sG8/+fb+BH59O/2jDnz8yjv/vCvF+ci7mvPQyReUWTunGXMPXM
tlGPfSH2wdpc4jqC7CfPrRxXBJjnKVbWe9MP4xpdZaE+mp9+JVt4fp5p1K/x
AvaTdh727aQszn/uZt9OnEu+ihsfyT3z52ziT3Lz/rbMJo+9Cnb+rhPpOBOr
RZA8F76X74Q74yHH7Ub/pbynqs304Xw+773ceOpzIA+lw3WB7g5kXnrZEK3T
bPHZIOrQIRfr5N6uScAAIXRoEb8/zgymn/9Y8VTurTSw/3itqJDnkWa8Ieub
WrFbBPnEzDzttPDexhDI9Ri59cXYOP/rXxrnWpjn1eB9k2LhuTUlUOeKHBiN
pdLEeg9mg8I1LH/5e+pf8dcw3g==
           "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQfevc9+DHkjkODlzXFxfUOjjsmy+lf/cElP/X0aEo
Y+LbmvpcBwHdTXPfs7vC+TL6d1XYCt3g/CtKt3/WvXJzmJYn1HxAL9eBAQQe
uEPkt+c49EwHSlzwABtrK5TlkGJ9379X3c/hAkifXprDN42Y/kNXQx3idnny
MH1Ocjjhbd7pmBDrsMh12+e/LgkOqz5e8k26kOiwTiYqxXp/FET911QHudbX
gTuehTkcA6nPyYTY1x7k8GTp7CMKMbkOVltOlO0rD4C4x6rA4QvQGIEKf4cq
kXXuD8WKHPaUTJZgmebnsANkkFmxw4GvQIMX+TkobACaZFwMcWe4t8MnkL5/
RQ5VL9UMOd44OgB1hfGlFjnkgA2wcjAABkfj0QKHFqBz5FhtHVy6c57/bsyF
yB+xg7hXM9thBcihik4Qf0tlOvjwMGm3H/OAuPdCqoMaW+NU5+RghxmgcDwU
C6Gt4h1OLAQGBK+/QzHIf/uTIfaJujkcB/n7RopDh9jNc983OzuUgOSD0xwW
gMItBRp/69MdOkDuemrvoAfSNzPDIQDk4Y+2Du9q7E3j+DIdZoD802sLUS+f
5fDh75WKl8dsIep9sx1+gPhsdg63ftZl7WnIdjAw5FgjEwXko6UfAIKqB2M=

           "], CompressedData["
1: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
oVjG/cBy4nGgDRiwXxRL///e+xec6JEj
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQXZQx8W0Nf77DGpmoFOvyeIcakXXuD0/lOnzTiOk/
FJjgcMzbvNNxQa7DAtdtn/8qJDnsKZkswXIsz0GNrXGq8+0kh3c19qZx7/Ic
FoHkvyQ5tLwO3CF3M99hWp5Q8wG3ZAfLLSfK9qUXQMQnJjssnX1EYYNbkQPX
9cUFtptSHDodE55eaCl2uPOzLmvPllSHapD9k0odnoAUHkmH2O9Q7gAyZn5R
pkP5vvlS+qnlEHubMiHqL5RD1O/IgMgbVziE8Olumvs/3WEGyB1WFQ4TDn3V
iJFOdwAZl/C03GHVx0u+SQFpDgZ3Vdgat5Y7XFC6/bPuXqoD0HdhfKWlDlUg
c/uSHYSbD5xayFsCsT8uyeGBf+/0PKFiB5funOe/OxMh/okpcFABhUd2PMSc
b/kOX0DhZxvvoGbIsUZmWb5Dwi5PHibteIcCW6DPPfIdOED+d4p3QA9/AKEX
tx4=
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3fI6cIecZ6YDmL6Y6mBwV4Wt8WCGw61z34Mfi6Y5
FGVMfFtjnwGRv4ngP1k6+4hCQjqcv+VE2b75r6D8/RkOYXy6m+YuznAAmjbV
OT0TwufOhKgry3fwMu90TDib45Dz/PfKj30FDtPyhJoPvMt1UNgANKG92OHQ
V42YfoNCh8kSLGF8R0scHoPskytyeODfOz1vVanDdJD6fUUOO+RaXwdeKIXI
nypyuA+S9ytz4AVa9/59kUMuyPwbZQ7CzQdOLZxY5FC+b76U/usyiD2cRQ6W
IAf9LnOQjUqxvt9b6AD0jGncszKIOysKIfo2ljis+njJN2lJvoNWu9jNc/5F
Dse8gR4QyXEAeev9wwKHBa7bPv8VyIL4/3yewzeg8w8ZZkDEe7IcqkTWuT+s
S3UQAplnmuUADrbIVAf08AcAf4/C6A==
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3X/oq0YMe7LDtDyh5gNsuQ7hfLqb5vYnOXzRiOk/
JJvrAJZ/nuiQNfFtjf3VXIe9JZMlWM4lOqz6eMk3KSbPIW6XJw/T/EQHh4Sn
F5TC8x1U2RqnOl9PdPgG0r8y3yEMZN7xZIedcq2vAxcVOGw5UbZvflqaAwMI
7Ch0aHkduEOuMd0BaGoYn2WRQ890oEM2ZDlcVLr9s+5UMdwdO0D6/5Q4HPM2
73RckgtRb14K4XPkOdz3752e51DqIBOVYn3/c54DyNn9YVD+7nwHrXaxm+fk
Sx0sQQ5gL3A4DtK3qcRh2ewjChusChw6HYEe0ClxaAW5x7AAQsuXQN2Z4wBy
1gG/Igh/RiZE36ECh3c19qZxVhkQ9coFDkUZwIBan+pw69z34MeGeQ4zQPrs
UiDuZMl1kAW553EyhH8nxwE9/AFavquU
           "]}]},
        AspectRatio->Automatic,
        ImageSize->25,
        PlotRange->{{0., 1026.}, {0., 914.}},
        ImageCache->GraphicsData["CompressedBitmap", "\<\
eJxNlCFsYkEQhnfZRwvX66XqQqoqkUgk6oq5BImEkEteRVPSVuCQSCQSiUQi
kUgkEolEIt99M7PLg4Rldnbmn3/+2eXv8Dv/9z78fhsNX14/h+P8bfT18ufj
E1fwzrlnvr8bDrvA0m8oisLdzWaz6XR6uVzyPG+325PJpMLehW632+/3l8ul
+ylxriJrdbVaWXSv19tsNq4q3ux0OhGI63A4/NBoJz+EgcI6GAzW6zWe8XhM
AcIziQrn85kjKVe3rAd+2G63W+IxCCCFlVqwuVYMlOt0Orvdzt1bpgBQjBX/
8XikKqfYYLlaYgkGLPf7fbVkiQ/ayIDbco0WHmWV4WFr5UOZhxStVgt4bABI
pQA2MHfKEWehH9NO6tM8GkPel5rKBEC2UGKornzDYrEwv/bs2Xp4xKyAQOCI
qfPJGB/o0KGsqOshlGJRAjHFfNQ9FRuNhuheQTNPnkcWP5/PUwYkABTTuNAU
iqqpnKlDpnUIOmc3Hd3byK0jbHBZ4+RoI6qiSIGOqQ0j2xtCjdaugejfbDbR
H5As9Q5mUkZvA7LC0d2wqNvdMwyY0iURBuMMh8LWhSkMFVHNS4BTOrSGDLFn
qjBzm7DBqL9KGhcBICqgm2KrpnI9DYde4BxxbnkBBQllUwefkZBEgEmGmzQZ
ZOQkl50wODEALge5UIrdcMBjuSpb4xAwwwASGHtLNxplVpNqiGy3lhjrsrwJ
ZEpfem63LdjTFsVtitCJte1lPabZ2ouKWPa/UUb9Uj04B4ueYIKu6f24p3Tz
AAcpvXT/H4jvypM=\
\>"]],
       Deploy,
       DefaultBaseStyle->"Deploy"], "\[Rule]", "0.2061855725923349`"}], ",", 
     RowBox[{
      TagBox[
       GraphicsBox[
        {Thickness[0.0012787723785166241`], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
           4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
           3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{
           1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
           1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
           "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
           "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
           "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
           "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
           "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
           "]}]},
        AspectRatio->Automatic,
        ImageSize->25,
        PlotRange->{{0., 782.}, {0., 668.}},
        ImageCache->GraphicsData["CompressedBitmap", "\<\
eJxFky1sAkEQhXc5fo6WNpc2TUjVSSQSiWoxTZBISNPkKpqSFoFDIpFIJBKJ
RCKRSCQSibx+M7OXkkB2Z9/MvPdmeBtNso+v0eTzfZS+/ozG2ef7b/ry/UMo
8s65Z75PTcc556Tfcp7nrnw+n9vtdpZlx+NRI9XL5bLb7ebzeavV4mm5XMYS
d/oa9ft9InKsaz5pvV6v0+lwqCou0ir7/T6O49lstt1uKUcbxUdc0zRdrVau
ouiSVplOp5QATdsIuIuu12uuH1fTvNPpBB+yjYfR2Ww2FINwUmAgfDgcjINR
oa4UfNA+nEDwS3n/j6GIXO4UQ5UkScbjMZyFXQnJvtlseu7/NUG5e8HHtIc1
JRBBAHdMtScv4KFEW1cC6iJzQ01S1lxIEI6lwv/FYkEUk3gQpvAJTtUoiq/d
bpcnYCbFvLy1SowDPP2QwDMvVkggHprBOzOLMamKGuODOXvADSGkKB7dQcNg
MJCpPSpneqBJPPBMJSAgJd6ri3WaEyadKPZAkrNxcX44HIYcYHJJCuWUXK/X
RkN85xL48kgrdMgQG4KvUJQQPREuRL1YYT7VCdGW5szKDAPKL4Jtcyu0pg8p
iMFJZ/ugM6mSxAStK7awZ7qFFRKgQ6aN23qFOcKDqFDQrYGA/Z+gSzlysJgz
Cm07ba+J019YlQtNaEZ6cFNRTv+BdSghk6nhAt1Nk03ZNLmbYoN3+qFAw7bc
/wHtYxUN\
\>"]],
       Deploy,
       DefaultBaseStyle->"Deploy"], "\[Rule]", "0.5876288548153301`"}], ",", 
     RowBox[{
      TagBox[
       GraphicsBox[
        {Thickness[0.0009523809523809524], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
           0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
           0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
           3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
           3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
           0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
           "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
           "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
           "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

           "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
           "]}]},
        AspectRatio->Automatic,
        ImageSize->25,
        PlotRange->{{0., 1050.}, {0., 740.}},
        ImageCache->GraphicsData["CompressedBitmap", "\<\
eJxNky9swlAQxl//QUfYxDKxTFUikUjUhlmCRELIkiKWNQyBQyKRSCQSiaxE
IpFIJBLJfndHO5r05Xp3333f3bt+Dibp1/dgMhoOko/xIEtHw9/k/WeMK/Cc
c2+8z68O+4ql78v1enXRarXqdDqz2azdbp9OJ+eJ1z1o7HA45HlOxnK5lFgo
3mCz2YDA63y+ve126xE3XFXOCq5Wq5Wm6Xq9tgJ+lmUuAokN0WKxuFwuLijw
fBu+ogwkAy4Zo91u1+/3jVRwkeDI8AgYzpQR6/V6FNQM/3g8Vgv/TB9VXGRT
klQxH/WbD6QJOtAsPYP9fo86MeuqBVVwTKdTiorDLzVofkSQFExOBNhEakyS
5pEcx3GSJN1uF3ZONNGsRzluJDbUfD4nEZvR0TNFdCohRq4PxaSqBxWoGibF
rEGihrWRAXmSTLTesuVi6ZIAYchoDw40yLTLXJktd3rLJ8Emiw1H2Z5tSQgV
tKQT8+lJb1QnoglMj9btPJ/PtGoLoHfkYprB1Ww2qU8BAhSjZGgVqkZVSkAv
QduTECKwhGFVLXa/EUXYFOrgL/ZFbw6XzUYGfoeoWHF6QGSj0eC0zbNLhvT2
dzz870+d5QbDCR364TLxUGOjGEDt7m+i+bx4pFbdOvT+AKT6DGE=\
\>"]],
       Deploy,
       DefaultBaseStyle->"Deploy"], "\[Rule]", "0.2061855725923349`"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{
      TagBox[
       GraphicsBox[
        {Thickness[0.0009746588693957114], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
           4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
           3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVgtwTGcYjUg1VUOosmOUeAyptxnGK5GzEq+oR6Ql3vGahJjYlZVENtZu
7t69+8ou49lSj6JmMKT1bGvSlIwYVZQoatSjaWkrpFpFUb3fPWnNyExm57/3
/89/vnPO//233ayF4+dGRkRErNH/5ff4qH4+c20mIoy/eqjevr4idsRcRJwf
PSvmUktceeyYfyRqFk7klW1qtbA3fj7b/srjjTPgbHH59MN9g3En9XAbddR7
OLFl6ME/ro7BSfntbkbDi1stCYsyYJo8Z9C1sZ2JuzwTGfqoZG0kdLSeV4vm
w2kQqP5yQuPun364cgEi3v1Rn3k20Zi/YSEijPUPEu+f0/lstuJR3NTw0Qft
kS8AtxZhwRHbSlPyQFzXUXNu5pJfGzO6ajrBSTasMkVNaPxNMvZLARttuKTT
atg5hfV+Z8Mp4ZswBjVFiX2nRyzGhorY0kWXxuBCwS+depvy0O1qxwau7WMh
9O758hFcm9NMGTEOXQS/pACx6m+ph8tSYfDrb8ee1jrhTWkYKBtudSBrhY5c
k4Y1+rJyxzJ4RTclDUt0+GiTEzr66qRRadim07o43Ek9vxiPd3RVMqxO8kkf
y/l9XNis030WNRQjG0V21YqKYZPnuwdDaJVPUdBn+ucjGxX3w8e6fKV93ViX
FFhwyx6Hezt0oYMqegnvhz0gKscu8eBv3V7bPqBp+oD9J6I13Bb9yoZx/TwN
hh0x47jfGg3JOtyTeZPwlviyS2Ode2dBXImr1NBKnu/NhMA40jUIu9ZdsrFG
eGR7EKOUn9xSk8P12SokDTleC7zmjJ/OnlRgb75n+I0jFu6/wcV5xyzQq64q
GO+iL6ct1DXORZ8vW1Cly5/eycW6Iq3optu1o60L03Q5IhNzya91MSRtGW8u
Jp/6Cox49S6gvkE3xzMKqccZFSNuFDbfU+ng+21eiB1ZJhcSJOBVftSKriku
+t8kQF6nXMznkgDaSD70fQx++UHibnJjsKw/FYTOamr4uUqciUHEyPtzHuYh
Joh14qtN4/xQAD0lj7rOBp/bfkwRvp286CXP3/ZjvpyHJl7mfYiP63wa/XB4
mfsCjXme48Uh0dWssZ62XvKPqcOv1jjf6qEPHTSIvKW3VPLI9FDvKBVGrJqr
1LmPG8Yxv6Zwn+o6neco5PGrQl2mK+Rbo3DdVIV1j3bDJ3lYoSBFcveVm/gX
6vAqVcQLvsXNXJ5WIe0q3eYmzyce7tdahdg33K3R9yyVz7t76cOJujpyvfTh
vkq8V308Tyke6jjMRx3meeh/qY86+D3k876f7y946McHAZ7fbz3ECQTJz+lB
reRkaQl59KzDnxxi/U6V+peHiHfUjYFS59MQ85Xqhl90aRnmefhagUd0iQ5T
x2kK6/grxPdVxfz9Dy+rGPMFf2KI+j5ysS81CFGPrS7WV1VCHEfd+Xu9hHXU
dzGfbQJoJud41zK0FR/b+Zi/x0X097qGeMnTK3bqoGroIe/zCyHt8ZpD4/OZ
heR1QMNd6b+WQhyTfa970U0MP1bIfA4NkGeZnXz6BanfyCL2jVAQGXLO7UXU
Ib6E/VktYh3bS6hfRhH1uBYij3t23BQjz4TJRynETTnu9ZbjB+lLxwtgtM/X
lrMPJL0YG/sG8/+fb+BH59O/2jDnz8yjv/vCvF+ci7mvPQyReUWTunGXMPXM
tlGPfSH2wdpc4jqC7CfPrRxXBJjnKVbWe9MP4xpdZaE+mp9+JVt4fp5p1K/x
AvaTdh727aQszn/uZt9OnEu+ihsfyT3z52ziT3Lz/rbMJo+9Cnb+rhPpOBOr
RZA8F76X74Q74yHH7Ub/pbynqs304Xw+773ceOpzIA+lw3WB7g5kXnrZEK3T
bPHZIOrQIRfr5N6uScAAIXRoEb8/zgymn/9Y8VTurTSw/3itqJDnkWa8Ieub
WrFbBPnEzDzttPDexhDI9Ri59cXYOP/rXxrnWpjn1eB9k2LhuTUlUOeKHBiN
pdLEeg9mg8I1LH/5e+pf8dcw3g==
           "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQfevc9+DHkjkODlzXFxfUOjjsmy+lf/cElP/X0aEo
Y+LbmvpcBwHdTXPfs7vC+TL6d1XYCt3g/CtKt3/WvXJzmJYn1HxAL9eBAQQe
uEPkt+c49EwHSlzwABtrK5TlkGJ9379X3c/hAkifXprDN42Y/kNXQx3idnny
MH1Ocjjhbd7pmBDrsMh12+e/LgkOqz5e8k26kOiwTiYqxXp/FET911QHudbX
gTuehTkcA6nPyYTY1x7k8GTp7CMKMbkOVltOlO0rD4C4x6rA4QvQGIEKf4cq
kXXuD8WKHPaUTJZgmebnsANkkFmxw4GvQIMX+TkobACaZFwMcWe4t8MnkL5/
RQ5VL9UMOd44OgB1hfGlFjnkgA2wcjAABkfj0QKHFqBz5FhtHVy6c57/bsyF
yB+xg7hXM9thBcihik4Qf0tlOvjwMGm3H/OAuPdCqoMaW+NU5+RghxmgcDwU
C6Gt4h1OLAQGBK+/QzHIf/uTIfaJujkcB/n7RopDh9jNc983OzuUgOSD0xwW
gMItBRp/69MdOkDuemrvoAfSNzPDIQDk4Y+2Du9q7E3j+DIdZoD802sLUS+f
5fDh75WKl8dsIep9sx1+gPhsdg63ftZl7WnIdjAw5FgjEwXko6UfAIKqB2M=

           "], CompressedData["
1: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
oVjG/cBy4nGgDRiwXxRL///e+xec6JEj
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQXZQx8W0Nf77DGpmoFOvyeIcakXXuD0/lOnzTiOk/
FJjgcMzbvNNxQa7DAtdtn/8qJDnsKZkswXIsz0GNrXGq8+0kh3c19qZx7/Ic
FoHkvyQ5tLwO3CF3M99hWp5Q8wG3ZAfLLSfK9qUXQMQnJjssnX1EYYNbkQPX
9cUFtptSHDodE55eaCl2uPOzLmvPllSHapD9k0odnoAUHkmH2O9Q7gAyZn5R
pkP5vvlS+qnlEHubMiHqL5RD1O/IgMgbVziE8Olumvs/3WEGyB1WFQ4TDn3V
iJFOdwAZl/C03GHVx0u+SQFpDgZ3Vdgat5Y7XFC6/bPuXqoD0HdhfKWlDlUg
c/uSHYSbD5xayFsCsT8uyeGBf+/0PKFiB5funOe/OxMh/okpcFABhUd2PMSc
b/kOX0DhZxvvoGbIsUZmWb5Dwi5PHibteIcCW6DPPfIdOED+d4p3QA9/AKEX
tx4=
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3fI6cIecZ6YDmL6Y6mBwV4Wt8WCGw61z34Mfi6Y5
FGVMfFtjnwGRv4ngP1k6+4hCQjqcv+VE2b75r6D8/RkOYXy6m+YuznAAmjbV
OT0TwufOhKgry3fwMu90TDib45Dz/PfKj30FDtPyhJoPvMt1UNgANKG92OHQ
V42YfoNCh8kSLGF8R0scHoPskytyeODfOz1vVanDdJD6fUUOO+RaXwdeKIXI
nypyuA+S9ytz4AVa9/59kUMuyPwbZQ7CzQdOLZxY5FC+b76U/usyiD2cRQ6W
IAf9LnOQjUqxvt9b6AD0jGncszKIOysKIfo2ljis+njJN2lJvoNWu9jNc/5F
Dse8gR4QyXEAeev9wwKHBa7bPv8VyIL4/3yewzeg8w8ZZkDEe7IcqkTWuT+s
S3UQAplnmuUADrbIVAf08AcAf4/C6A==
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3X/oq0YMe7LDtDyh5gNsuQ7hfLqb5vYnOXzRiOk/
JJvrAJZ/nuiQNfFtjf3VXIe9JZMlWM4lOqz6eMk3KSbPIW6XJw/T/EQHh4Sn
F5TC8x1U2RqnOl9PdPgG0r8y3yEMZN7xZIedcq2vAxcVOGw5UbZvflqaAwMI
7Ch0aHkduEOuMd0BaGoYn2WRQ890oEM2ZDlcVLr9s+5UMdwdO0D6/5Q4HPM2
73RckgtRb14K4XPkOdz3752e51DqIBOVYn3/c54DyNn9YVD+7nwHrXaxm+fk
Sx0sQQ5gL3A4DtK3qcRh2ewjChusChw6HYEe0ClxaAW5x7AAQsuXQN2Z4wBy
1gG/Igh/RiZE36ECh3c19qZxVhkQ9coFDkUZwIBan+pw69z34MeGeQ4zQPrs
UiDuZMl1kAW553EyhH8nxwE9/AFavquU
           "]}]},
        AspectRatio->Automatic,
        ImageSize->25,
        PlotRange->{{0., 1026.}, {0., 914.}},
        ImageCache->GraphicsData["CompressedBitmap", "\<\
eJxNlCFsYkEQhnfZRwvX66XqQqoqkUgk6oq5BImEkEteRVPSVuCQSCQSiUQi
kUgkEolEIt99M7PLg4Rldnbmn3/+2eXv8Dv/9z78fhsNX14/h+P8bfT18ufj
E1fwzrlnvr8bDrvA0m8oisLdzWaz6XR6uVzyPG+325PJpMLehW632+/3l8ul
+ylxriJrdbVaWXSv19tsNq4q3ux0OhGI63A4/NBoJz+EgcI6GAzW6zWe8XhM
AcIziQrn85kjKVe3rAd+2G63W+IxCCCFlVqwuVYMlOt0Orvdzt1bpgBQjBX/
8XikKqfYYLlaYgkGLPf7fbVkiQ/ayIDbco0WHmWV4WFr5UOZhxStVgt4bABI
pQA2MHfKEWehH9NO6tM8GkPel5rKBEC2UGKornzDYrEwv/bs2Xp4xKyAQOCI
qfPJGB/o0KGsqOshlGJRAjHFfNQ9FRuNhuheQTNPnkcWP5/PUwYkABTTuNAU
iqqpnKlDpnUIOmc3Hd3byK0jbHBZ4+RoI6qiSIGOqQ0j2xtCjdaugejfbDbR
H5As9Q5mUkZvA7LC0d2wqNvdMwyY0iURBuMMh8LWhSkMFVHNS4BTOrSGDLFn
qjBzm7DBqL9KGhcBICqgm2KrpnI9DYde4BxxbnkBBQllUwefkZBEgEmGmzQZ
ZOQkl50wODEALge5UIrdcMBjuSpb4xAwwwASGHtLNxplVpNqiGy3lhjrsrwJ
ZEpfem63LdjTFsVtitCJte1lPabZ2ouKWPa/UUb9Uj04B4ueYIKu6f24p3Tz
AAcpvXT/H4jvypM=\
\>"]],
       Deploy,
       DefaultBaseStyle->"Deploy"], "\[Rule]", "0.3398328844035995`"}], ",", 
     RowBox[{
      TagBox[
       GraphicsBox[
        {Thickness[0.0012787723785166241`], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
           4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
           3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{
           1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
           1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
           "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
           "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
           "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
           "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
           "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
           "]}]},
        AspectRatio->Automatic,
        ImageSize->25,
        PlotRange->{{0., 782.}, {0., 668.}},
        ImageCache->GraphicsData["CompressedBitmap", "\<\
eJxFky1sAkEQhXc5fo6WNpc2TUjVSSQSiWoxTZBISNPkKpqSFoFDIpFIJBKJ
RCKRSCQSibx+M7OXkkB2Z9/MvPdmeBtNso+v0eTzfZS+/ozG2ef7b/ry/UMo
8s65Z75PTcc556Tfcp7nrnw+n9vtdpZlx+NRI9XL5bLb7ebzeavV4mm5XMYS
d/oa9ft9InKsaz5pvV6v0+lwqCou0ir7/T6O49lstt1uKUcbxUdc0zRdrVau
ouiSVplOp5QATdsIuIuu12uuH1fTvNPpBB+yjYfR2Ww2FINwUmAgfDgcjINR
oa4UfNA+nEDwS3n/j6GIXO4UQ5UkScbjMZyFXQnJvtlseu7/NUG5e8HHtIc1
JRBBAHdMtScv4KFEW1cC6iJzQ01S1lxIEI6lwv/FYkEUk3gQpvAJTtUoiq/d
bpcnYCbFvLy1SowDPP2QwDMvVkggHprBOzOLMamKGuODOXvADSGkKB7dQcNg
MJCpPSpneqBJPPBMJSAgJd6ri3WaEyadKPZAkrNxcX44HIYcYHJJCuWUXK/X
RkN85xL48kgrdMgQG4KvUJQQPREuRL1YYT7VCdGW5szKDAPKL4Jtcyu0pg8p
iMFJZ/ugM6mSxAStK7awZ7qFFRKgQ6aN23qFOcKDqFDQrYGA/Z+gSzlysJgz
Cm07ba+J019YlQtNaEZ6cFNRTv+BdSghk6nhAt1Nk03ZNLmbYoN3+qFAw7bc
/wHtYxUN\
\>"]],
       Deploy,
       DefaultBaseStyle->"Deploy"], "\[Rule]", "0.40389971030857924`"}], ",", 
     RowBox[{
      TagBox[
       GraphicsBox[
        {Thickness[0.0009523809523809524], 
         FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
           0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
           0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
           3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
            3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 
           3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
           3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
           0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
           "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
           "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
           "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
           "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

           "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
           "]}]},
        AspectRatio->Automatic,
        ImageSize->25,
        PlotRange->{{0., 1050.}, {0., 740.}},
        ImageCache->GraphicsData["CompressedBitmap", "\<\
eJxNky9swlAQxl//QUfYxDKxTFUikUjUhlmCRELIkiKWNQyBQyKRSCQSiaxE
IpFIJBLJfndHO5r05Xp3333f3bt+Dibp1/dgMhoOko/xIEtHw9/k/WeMK/Cc
c2+8z68O+4ql78v1enXRarXqdDqz2azdbp9OJ+eJ1z1o7HA45HlOxnK5lFgo
3mCz2YDA63y+ve126xE3XFXOCq5Wq5Wm6Xq9tgJ+lmUuAokN0WKxuFwuLijw
fBu+ogwkAy4Zo91u1+/3jVRwkeDI8AgYzpQR6/V6FNQM/3g8Vgv/TB9VXGRT
klQxH/WbD6QJOtAsPYP9fo86MeuqBVVwTKdTiorDLzVofkSQFExOBNhEakyS
5pEcx3GSJN1uF3ZONNGsRzluJDbUfD4nEZvR0TNFdCohRq4PxaSqBxWoGibF
rEGihrWRAXmSTLTesuVi6ZIAYchoDw40yLTLXJktd3rLJ8Emiw1H2Z5tSQgV
tKQT8+lJb1QnoglMj9btPJ/PtGoLoHfkYprB1Ww2qU8BAhSjZGgVqkZVSkAv
QduTECKwhGFVLXa/EUXYFOrgL/ZFbw6XzUYGfoeoWHF6QGSj0eC0zbNLhvT2
dzz870+d5QbDCR364TLxUGOjGEDt7m+i+bx4pFbdOvT+AKT6DGE=\
\>"]],
       Deploy,
       DefaultBaseStyle->"Deploy"], "\[Rule]", "0.2562674052878213`"}]}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.815306051199623*^9, 3.8153170621984673`*^9, 
  3.815319276870679*^9, 3.815321841307938*^9, 3.8153219965812836`*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"30acfc9a-da99-45a4-b262-16e76d7f53a7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 19", "Subsection",
 CellChangeTimes->{{3.780194665929409*^9, 3.7801946680074897`*^9}, {
  3.814438200770912*^9, 
  3.8144382011783733`*^9}},ExpressionUUID->"f9e0d0cb-dd46-4a0e-a6e4-\
6d8ab57d17f7"],

Cell[TextData[{
 "If your opponent uses the sequence {",
 Cell[BoxData[
  RowBox[{
   TagBox[
    GraphicsBox[
     {Thickness[0.0012787723785166241`], 
      FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
        "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
        "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
        "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
        "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
        "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
        "]}]},
     AspectRatio->Automatic,
     ImageSize->25,
     PlotRange->{{0., 782.}, {0., 668.}}],
    Deploy,
    DefaultBaseStyle->"Deploy"], ",", " ", 
   TagBox[
    GraphicsBox[
     {Thickness[0.0009523809523809524], 
      FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
        0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
        0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
        
        "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
        "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
        "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
        
        "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

        "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
        "]}]},
     AspectRatio->Automatic,
     ImageSize->25,
     PlotRange->{{0., 1050.}, {0., 740.}}],
    Deploy,
    DefaultBaseStyle->"Deploy"]}]],
  CellChangeTimes->{{3.780154747626994*^9, 3.78015474762787*^9}, {
    3.7801550408264236`*^9, 3.78015506109583*^9}, {3.780155259660273*^9, 
    3.780155265170496*^9}, 3.780155304864932*^9, {3.780194189419746*^9, 
    3.780194190674692*^9}},ExpressionUUID->
  "942e14f6-0120-4c05-aecc-09b413e0dd7c"],
 "}, what action would you take in the next round?"
}], "Text",
 CellChangeTimes->{
  3.7801548174675827`*^9, {3.780155112245071*^9, 3.780155113668851*^9}, {
   3.7801967750899467`*^9, 3.780196778001177*^9}, {3.780196828878668*^9, 
   3.780196878791401*^9}},ExpressionUUID->"72a87734-1215-48d1-88e5-\
196fb82f7b43"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sp", "[", 
  RowBox[{"{", 
   RowBox[{
    TagBox[
     GraphicsBox[
      {Thickness[0.0012787723785166241`], 
       FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
         "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
         "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
         "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
         "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
         "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
         "]}]},
      AspectRatio->Automatic,
      ImageSize->25,
      PlotRange->{{0., 782.}, {0., 668.}}],
     Deploy,
     DefaultBaseStyle->"Deploy"], ",", " ", 
    TagBox[
     GraphicsBox[
      {Thickness[0.0009523809523809524], 
       FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
         0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
         0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
         "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
         "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
         "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
         "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

         "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
         "]}]},
      AspectRatio->Automatic,
      ImageSize->25,
      PlotRange->{{0., 1050.}, {0., 740.}}],
     Deploy,
     DefaultBaseStyle->"Deploy"]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.815306136682171*^9, 3.815306142797996*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"ddc8644a-9c95-41c4-b0ba-552313b5a622"],

Cell[BoxData[
 TagBox[
  GraphicsBox[
   {Thickness[0.0012787723785166241`], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
      "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
      "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
      "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
      "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
      "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
      "]}]},
   AspectRatio->Automatic,
   ImageSize->25,
   PlotRange->{{0., 782.}, {0., 668.}}],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.8153061435581493`*^9, 3.8153170622784395`*^9, 
  3.815319276918662*^9, 3.8153218413759155`*^9, 3.815321996643263*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"c5e0a00a-5aee-4866-b77e-9b0792ae4d67"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 20", "Subsection",
 CellChangeTimes->{{3.780196757435521*^9, 3.7801967612939844`*^9}, {
  3.8144382033326125`*^9, 
  3.8144382049335804`*^9}},ExpressionUUID->"3b356b68-8bce-4ebb-b468-\
2fcec3e95a9e"],

Cell[TextData[{
 "Use the training ",
 StyleBox["sequences", "CodeText"],
 " to train a predictor ",
 StyleBox["sp2", "CodeText"],
 " of order 2 (i.e. with memory 2)"
}], "Text",
 CellChangeTimes->{{3.780196942442011*^9, 
  3.7801969821145315`*^9}},ExpressionUUID->"f34af566-9d4b-42f9-b5b9-\
33d8303a31b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sp2", " ", "=", " ", 
  RowBox[{"SequencePredict", "[", 
   RowBox[{"sequences", ",", " ", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Markov\>\"", ",", " ", 
       RowBox[{"\"\<Order\>\"", " ", "\[Rule]", " ", "2"}]}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.815306176749107*^9, 3.8153062197199097`*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"84ecd4a6-b430-4d16-949f-7e94998b7db6"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SequencePredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{{
                Thickness[0.002], {{
                  FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                   499.}, {1., 499.}, {1., 500.001}, {0., 500.001}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{499.,
                    499.}, {500.001, 499.}, {500.001, 500.001}, {499., 
                   500.001}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                   0.}, {1., 0.}, {1., 1.}, {0., 1.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{499.,
                    0.}, {500.001, 0.}, {500.001, 1.}, {499., 1.}}}]}}, {{
                  FaceForm[{
                    RGBColor[0.604, 0.604, 0.604], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{72., 
                   426.}, {150., 426.}, {150., 348.}, {72., 348.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{347.,
                    288.}, {425., 288.}, {425., 210.}, {347., 210.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{130.55, 132.031}, {
                   91.46900000000002, 132.031}, {91.46900000000002, 
                   92.95000000000002}, {130.55, 92.95000000000002}}, {{72., 
                   152.}, {150., 152.}, {150., 74.}, {72., 74.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{267.55, 
                   268.03099999999995`}, {228.46900000000002`, 
                   268.03099999999995`}, {228.46900000000002`, 
                   228.94999999999996`}, {267.55, 228.94999999999996`}}, {{
                   209., 288.}, {287., 288.}, {287., 210.}, {209., 210.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{267.55, 
                   405.03099999999995`}, {228.46900000000002`, 
                   405.03099999999995`}, {228.46900000000002`, 
                   365.94999999999993`}, {267.55, 365.94999999999993`}}, {{
                   209., 425.}, {287., 425.}, {287., 347.}, {209., 347.}}}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{155., 250.}, {155., 225.147}, {134.853, 205.}, {
                   110., 205.}, {85.147, 205.}, {65., 225.147}, {65., 250.}, {
                   65., 274.853}, {85.147, 295.}, {110., 295.}, {134.853, 
                   295.}, {155., 274.853}, {155., 250.}}}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJeKA0GChUOYPpBlYMhxxqZqEllcD6YDih1OP89+PHS
uZVwPpgWqIDzwfqaylD1O0DVwcx3gJqzthJV/kMVXD+Mj2I+kA+zH0U/zH1I
7kfhL6h0OPxVI6b/D4IPpjdAxd9UwPko9gH5tlzXFxcYl6PqbyhDNR/IB6tz
LkeVn1AG1w/jo5gP5MPsR9EPcx+S+wFHkGkl
                   "]]}}, {{
                  FaceForm[{
                    RGBColor[0.267, 0.267, 0.267], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxlk21IU2EUx5eI2NLsTVYULBMLE5GsD2UZf6P8oCJqZrrNud1tllqIxu7L
JExULN+QihQblGKi5dLENLWiF0RKxA0xS/ElE83SFSJSJtXzeGn70IfLc3/c
/3nOOf9zrg+TGWdwkUgkh8lDz1rfztWiRzysQwnzQbnxiMZW7evd3H/Mm4ny
qhKtOYstMcEczrxsqIs2K3HsWdwtHy2Hm8tuKVVWpagv5bC9wyYZd1OhnRwu
bRxOpWV+LwxVIcCwYypxmkM6wTdXVBgdzrsULuMRm1HNme0quKwvlusiebwj
6bvzk/ExUdZhu8zjD03soUYM1d3jcZsjBVnUoLJ9r3iwWTs9J7UpYj0TPN5v
WQwb8NCI8Qvkvtn0gGWjk0N8I3Ly55xMKCiqSgvVxZ7frVYee+RLFxJkDOJp
n5U8FINPP23TMSDZvDZoeBQERdVLmxis0IDNPPYaXardbQyuyXV2RTPnYLvi
xPHP2U52J+3ZA4lfRYWKwXYGddSwKVa8P58BtTHKzCJNkpnneppBr3/I9T4F
C0vJ6HmJNwPadqecxf6+Tb1db7U4d5IYu2JEvTTcz2h28ppe0INU+7heyoKo
n5QV6NF/f2AoIZQFvb6nUS/2V8hiZeHriyM2PQSacJKFl/lgbdtPvVhvJIfx
G6RgfwOIu+XGLk70L8wAWq63P+9gaqfkm5Mr7v44MFMmwJo6NJs+p0c4XZR1
JoyECokNR/UoN5LBGU2om3i+0VymE/fBYkLVGEnYwji4uZ3J/VCpdfCaf8sa
0HXMqDHBM6upZDRVI86n2ITgmYd+08Mp4jyzTViigVNqMT7WhDvUCKla/L7X
BLpGXmeT0UQH+kvACH2pUYl+9QrIJusVuKoExfliAQ/omaEEXWdZtAALjRtR
iPN0F7CLyCviFeK8unk00g9jSfj3v5VGfHE91J+Ev8kFnlk=
                    "], {{397.24569999999994`, 52.252300000000005`}, {
                    368.20269999999994`, 52.252300000000005`}, {
                    368.20269999999994`, 73.5373}, {397.24569999999994`, 
                    73.5373}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxlk3swVFEcx3ckGqEHUpNq5FFRKdNMD8m3l5EalRBr19prNdlr995L6zH+
iPQwFWOmB2kV2hFFykykZFKDRgkZ8ogkeaWmMVIM6dx2Wn/0x51zP+d8f+f3
O7/zPdYU4x2qJxAItpCPH3NsyibPWbNoaPYbdnLzgTre/vlZa8V/HKMmyqRA
hP7slWbvUcC3Mk/jpQ7E2dtHa51zFLg8ZiBJbwjEncJWSdS4Ava9iTfqDETo
u7j6q4mHEnvDmO9nXEXwyCQb5ikh2rVjoC1ehLxTh/dlmjI4TGdEq7+JMHuh
uVt1FIMWkv5JohgvHqxX3upgMF0cN3LfOAiHeJ0Fi+vRpKDCIPCyVc4soril
Jt1SCbY/9b5qfZBF68KRnfXGwfjob1naKGbR0i93HFPN8DYbz7jEwRkm5HQg
XQqRoup3MVisXDEa7mdJwYc/pyELYVP5J/MQCpKog8sXZTE47XQg16iAwmhZ
+/mpWQzsVXoZcxopmLlVv3+4Q6njkNfi/S+rFDpeQI733oX069wZYVMJpe2H
Jly7fyKFSNu06dTF4QgTMAn6RyikHDlhm3aFRuGFjuMCCwoqkl6+gobDq/k1
j2ulqEt629XdLEeukbudSj3Df/WxMtQYul73/SEHUT9KPi3DQGnRrH4hDdpx
LK0zXwbmDQkYojH8bKuNZ6MM5HZbNmWHI4mUVz4u09YbrUDXJVLwmlBo1u62
+uKj1PZvZyhMKjZcc3BmdMy3UyBhdZya9Wtj3xTx17HmfvmgDO68UTgO7a6x
/nkuMqSoyMV95qD5UGGqTg5Bx7uESPdlEUjvJAnvUzouKqFOtqVJdfy3f2PB
IK44RC+IgAlXcKHjWDCIG+bNneDg3HfPrvedRHufPRxG+cCeIG18JYebdXfq
m42CtOtXOfA2mndUjIIJMkOT+vifbBF4md9mDhHEXusmib8JDk+wuMuPNHkP
S3r8LStYFPJx7UJovGAmjWFhReSpPkLwNi1zZJHPL3QG4N97u+g5pL+pLgB/
AIGeoHU=
                    "], {{260.24569999999994`, 52.252300000000005`}, {
                    231.20369999999997`, 52.252300000000005`}, {
                    231.20369999999997`, 73.5373}, {260.24569999999994`, 
                    73.5373}}}]}}}}}, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Background -> GrayLevel[0.94], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NominalSequence\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{{
                Thickness[0.002], {{
                  FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                   499.}, {1., 499.}, {1., 500.001}, {0., 500.001}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{499.,
                    499.}, {500.001, 499.}, {500.001, 500.001}, {499., 
                   500.001}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                   0.}, {1., 0.}, {1., 1.}, {0., 1.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{499.,
                    0.}, {500.001, 0.}, {500.001, 1.}, {499., 1.}}}]}}, {{
                  FaceForm[{
                    RGBColor[0.604, 0.604, 0.604], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{72., 
                   426.}, {150., 426.}, {150., 348.}, {72., 348.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{347.,
                    288.}, {425., 288.}, {425., 210.}, {347., 210.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{130.55, 132.031}, {
                   91.46900000000002, 132.031}, {91.46900000000002, 
                   92.95000000000002}, {130.55, 92.95000000000002}}, {{72., 
                   152.}, {150., 152.}, {150., 74.}, {72., 74.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{267.55, 
                   268.03099999999995`}, {228.46900000000002`, 
                   268.03099999999995`}, {228.46900000000002`, 
                   228.94999999999996`}, {267.55, 228.94999999999996`}}, {{
                   209., 288.}, {287., 288.}, {287., 210.}, {209., 210.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{267.55, 
                   405.03099999999995`}, {228.46900000000002`, 
                   405.03099999999995`}, {228.46900000000002`, 
                   365.94999999999993`}, {267.55, 365.94999999999993`}}, {{
                   209., 425.}, {287., 425.}, {287., 347.}, {209., 347.}}}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{155., 250.}, {155., 225.147}, {134.853, 205.}, {
                   110., 205.}, {85.147, 205.}, {65., 225.147}, {65., 250.}, {
                   65., 274.853}, {85.147, 295.}, {110., 295.}, {134.853, 
                   295.}, {155., 274.853}, {155., 250.}}}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJeKA0GChUOYPpBlYMhxxqZqEllcD6YDih1OP89+PHS
uZVwPpgWqIDzwfqaylD1O0DVwcx3gJqzthJV/kMVXD+Mj2I+kA+zH0U/zH1I
7kfhL6h0OPxVI6b/D4IPpjdAxd9UwPko9gH5tlzXFxcYl6PqbyhDNR/IB6tz
LkeVn1AG1w/jo5gP5MPsR9EPcx+S+wFHkGkl
                   "]]}}, {{
                  FaceForm[{
                    RGBColor[0.267, 0.267, 0.267], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxlk21IU2EUx5eI2NLsTVYULBMLE5GsD2UZf6P8oCJqZrrNud1tllqIxu7L
JExULN+QihQblGKi5dLENLWiF0RKxA0xS/ElE83SFSJSJtXzeGn70IfLc3/c
/3nOOf9zrg+TGWdwkUgkh8lDz1rfztWiRzysQwnzQbnxiMZW7evd3H/Mm4ny
qhKtOYstMcEczrxsqIs2K3HsWdwtHy2Hm8tuKVVWpagv5bC9wyYZd1OhnRwu
bRxOpWV+LwxVIcCwYypxmkM6wTdXVBgdzrsULuMRm1HNme0quKwvlusiebwj
6bvzk/ExUdZhu8zjD03soUYM1d3jcZsjBVnUoLJ9r3iwWTs9J7UpYj0TPN5v
WQwb8NCI8Qvkvtn0gGWjk0N8I3Ly55xMKCiqSgvVxZ7frVYee+RLFxJkDOJp
n5U8FINPP23TMSDZvDZoeBQERdVLmxis0IDNPPYaXardbQyuyXV2RTPnYLvi
xPHP2U52J+3ZA4lfRYWKwXYGddSwKVa8P58BtTHKzCJNkpnneppBr3/I9T4F
C0vJ6HmJNwPadqecxf6+Tb1db7U4d5IYu2JEvTTcz2h28ppe0INU+7heyoKo
n5QV6NF/f2AoIZQFvb6nUS/2V8hiZeHriyM2PQSacJKFl/lgbdtPvVhvJIfx
G6RgfwOIu+XGLk70L8wAWq63P+9gaqfkm5Mr7v44MFMmwJo6NJs+p0c4XZR1
JoyECokNR/UoN5LBGU2om3i+0VymE/fBYkLVGEnYwji4uZ3J/VCpdfCaf8sa
0HXMqDHBM6upZDRVI86n2ITgmYd+08Mp4jyzTViigVNqMT7WhDvUCKla/L7X
BLpGXmeT0UQH+kvACH2pUYl+9QrIJusVuKoExfliAQ/omaEEXWdZtAALjRtR
iPN0F7CLyCviFeK8unk00g9jSfj3v5VGfHE91J+Ev8kFnlk=
                    "], {{397.24569999999994`, 52.252300000000005`}, {
                    368.20269999999994`, 52.252300000000005`}, {
                    368.20269999999994`, 73.5373}, {397.24569999999994`, 
                    73.5373}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxlk3swVFEcx3ckGqEHUpNq5FFRKdNMD8m3l5EalRBr19prNdlr995L6zH+
iPQwFWOmB2kV2hFFykykZFKDRgkZ8ogkeaWmMVIM6dx2Wn/0x51zP+d8f+f3
O7/zPdYU4x2qJxAItpCPH3NsyibPWbNoaPYbdnLzgTre/vlZa8V/HKMmyqRA
hP7slWbvUcC3Mk/jpQ7E2dtHa51zFLg8ZiBJbwjEncJWSdS4Ava9iTfqDETo
u7j6q4mHEnvDmO9nXEXwyCQb5ikh2rVjoC1ehLxTh/dlmjI4TGdEq7+JMHuh
uVt1FIMWkv5JohgvHqxX3upgMF0cN3LfOAiHeJ0Fi+vRpKDCIPCyVc4soril
Jt1SCbY/9b5qfZBF68KRnfXGwfjob1naKGbR0i93HFPN8DYbz7jEwRkm5HQg
XQqRoup3MVisXDEa7mdJwYc/pyELYVP5J/MQCpKog8sXZTE47XQg16iAwmhZ
+/mpWQzsVXoZcxopmLlVv3+4Q6njkNfi/S+rFDpeQI733oX069wZYVMJpe2H
Jly7fyKFSNu06dTF4QgTMAn6RyikHDlhm3aFRuGFjuMCCwoqkl6+gobDq/k1
j2ulqEt629XdLEeukbudSj3Df/WxMtQYul73/SEHUT9KPi3DQGnRrH4hDdpx
LK0zXwbmDQkYojH8bKuNZ6MM5HZbNmWHI4mUVz4u09YbrUDXJVLwmlBo1u62
+uKj1PZvZyhMKjZcc3BmdMy3UyBhdZya9Wtj3xTx17HmfvmgDO68UTgO7a6x
/nkuMqSoyMV95qD5UGGqTg5Bx7uESPdlEUjvJAnvUzouKqFOtqVJdfy3f2PB
IK44RC+IgAlXcKHjWDCIG+bNneDg3HfPrvedRHufPRxG+cCeIG18JYebdXfq
m42CtOtXOfA2mndUjIIJMkOT+vifbBF4md9mDhHEXusmib8JDk+wuMuPNHkP
S3r8LStYFPJx7UJovGAmjWFhReSpPkLwNi1zZJHPL3QG4N97u+g5pL+pLgB/
AIGeoHU=
                    "], {{260.24569999999994`, 52.252300000000005`}, {
                    231.20369999999997`, 52.252300000000005`}, {
                    231.20369999999997`, 73.5373}, {260.24569999999994`, 
                    73.5373}}}]}}}}}, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Background -> GrayLevel[0.94], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NominalSequence\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of tokens: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["3", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Markov order: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SequencePredictorFunction[
   Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
      Association[
      "Input" -> Association[
        "f1" -> Association["Type" -> "NominalSequence"]], "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
       "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
         Association["Processors" -> {
            MachineLearning`MLProcessor["List"], 
            MachineLearning`MLProcessor["WrapMLDataset", 
             Association[
             "FeatureTypes" -> {"NominalSequence"}, "FeatureKeys" -> {"f1"}, 
              "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
              "RawExample" -> Missing["KeyAbsent", "RawExample"], 
              "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
       "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
       "Missing" -> "Allowed"]], "Processor" -> 
    MachineLearning`MLProcessor["IntegerEncodeNominalSequence", 
      Association[
      "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
       "StructurePreserving" -> True, "Input" -> 
       Association[
        "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]], 
       "Index" -> MachineLearning`SortedHashAssociation[
         Association[
         "KeyHashes" -> {6718995105138802, 5995226068745761510, 
           8722508975039349022}, "Values" -> None, "DefaultValue" -> -1, 
          "HashFunction" -> 
          Function[{
            MachineLearning`file155SortedHashAssociation`PackagePrivate`keys$}\
, 
            Switch[
            MachineLearning`file155SortedHashAssociation`PackagePrivate`keys$,\
 {
              BlankSequence[String]}, 
             Data`StringHash[
             MachineLearning`file155SortedHashAssociation`PackagePrivate`keys$\
, "Murmur3-64"], 
             PatternTest[
              Blank[], 
              MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
             MachineLearning`file155SortedHashAssociation`PackagePrivate`keys$\
, 
             PatternTest[
              Blank[], 
              MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
             
             Block[{MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q}, 
              MachineLearning`file155SortedHashAssociation`PackagePrivate`q = {
                 Quotient[
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 
                 Quotient[
                  Mod[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 2^32], 
                 Quotient[
                  Mod[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 2^32], 2^16], 
                 Mod[
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 2^16]}; 
              MachineLearning`file155SortedHashAssociation`PackagePrivate`q = 
               Transpose[
                 MachineLearning`PackageScope`ToPackedArray[
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q], {1, 3, 2}]; 
              MachineLearning`file155SortedHashAssociation`PackagePrivate`q = 
               Transpose[
                 Flatten[
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q, 1]]; Data`StringHash[
                FromCharacterCode[
                 Abs[
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q]], "Murmur3-64"]], 
             Blank[List], 
             Map[Switch[#, 
               Blank[String], 
               Data`StringHash[#, "Murmur3-64"], 
               PatternTest[
                Blank[], Developer`MachineIntegerQ], #, {
                PatternTest[
                 BlankSequence[], Developer`MachineIntegerQ]}, 
               
               Block[{MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q}, 
                MachineLearning`file155SortedHashAssociation`PackagePrivate`q = {
                   Quotient[#, 2^48], 
                   Quotient[
                    Mod[#, 2^48], 2^32], 
                   Quotient[
                    Mod[#, 2^32], 2^16], 
                   Mod[#, 2^16]}; 
                MachineLearning`file155SortedHashAssociation`PackagePrivate`q = 
                 Flatten[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q]; Data`StringHash[
                  FromCharacterCode[
                   Abs[
                   MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
               Blank[], 
               Data`StringHash[
                StringJoin[
                 ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
              MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$]]], "Version" -> {12.1, 1}]], "Labels" -> {
         Deploy[
          Graphics[{
            Thickness[0.0009746588693957114], 
            
            FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1,
               3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}}}, {CompressedData["
1:eJxdVgtwTGcYjUg1VUOosmOUeAyptxnGK5GzEq+oR6Ql3vGahJjYlZVENtZu
7t69+8ou49lSj6JmMKT1bGvSlIwYVZQoatSjaWkrpFpFUb3fPWnNyExm57/3
/89/vnPO//233ayF4+dGRkRErNH/5ff4qH4+c20mIoy/eqjevr4idsRcRJwf
PSvmUktceeyYfyRqFk7klW1qtbA3fj7b/srjjTPgbHH59MN9g3En9XAbddR7
OLFl6ME/ro7BSfntbkbDi1stCYsyYJo8Z9C1sZ2JuzwTGfqoZG0kdLSeV4vm
w2kQqP5yQuPun364cgEi3v1Rn3k20Zi/YSEijPUPEu+f0/lstuJR3NTw0Qft
kS8AtxZhwRHbSlPyQFzXUXNu5pJfGzO6ajrBSTasMkVNaPxNMvZLARttuKTT
atg5hfV+Z8Mp4ZswBjVFiX2nRyzGhorY0kWXxuBCwS+depvy0O1qxwau7WMh
9O758hFcm9NMGTEOXQS/pACx6m+ph8tSYfDrb8ee1jrhTWkYKBtudSBrhY5c
k4Y1+rJyxzJ4RTclDUt0+GiTEzr66qRRadim07o43Ek9vxiPd3RVMqxO8kkf
y/l9XNis030WNRQjG0V21YqKYZPnuwdDaJVPUdBn+ucjGxX3w8e6fKV93ViX
FFhwyx6Hezt0oYMqegnvhz0gKscu8eBv3V7bPqBp+oD9J6I13Bb9yoZx/TwN
hh0x47jfGg3JOtyTeZPwlviyS2Ode2dBXImr1NBKnu/NhMA40jUIu9ZdsrFG
eGR7EKOUn9xSk8P12SokDTleC7zmjJ/OnlRgb75n+I0jFu6/wcV5xyzQq64q
GO+iL6ct1DXORZ8vW1Cly5/eycW6Iq3optu1o60L03Q5IhNzya91MSRtGW8u
Jp/6Cox49S6gvkE3xzMKqccZFSNuFDbfU+ng+21eiB1ZJhcSJOBVftSKriku
+t8kQF6nXMznkgDaSD70fQx++UHibnJjsKw/FYTOamr4uUqciUHEyPtzHuYh
Joh14qtN4/xQAD0lj7rOBp/bfkwRvp286CXP3/ZjvpyHJl7mfYiP63wa/XB4
mfsCjXme48Uh0dWssZ62XvKPqcOv1jjf6qEPHTSIvKW3VPLI9FDvKBVGrJqr
1LmPG8Yxv6Zwn+o6neco5PGrQl2mK+Rbo3DdVIV1j3bDJ3lYoSBFcveVm/gX
6vAqVcQLvsXNXJ5WIe0q3eYmzyce7tdahdg33K3R9yyVz7t76cOJujpyvfTh
vkq8V308Tyke6jjMRx3meeh/qY86+D3k876f7y946McHAZ7fbz3ECQTJz+lB
reRkaQl59KzDnxxi/U6V+peHiHfUjYFS59MQ85Xqhl90aRnmefhagUd0iQ5T
x2kK6/grxPdVxfz9Dy+rGPMFf2KI+j5ysS81CFGPrS7WV1VCHEfd+Xu9hHXU
dzGfbQJoJud41zK0FR/b+Zi/x0X097qGeMnTK3bqoGroIe/zCyHt8ZpD4/OZ
heR1QMNd6b+WQhyTfa970U0MP1bIfA4NkGeZnXz6BanfyCL2jVAQGXLO7UXU
Ib6E/VktYh3bS6hfRhH1uBYij3t23BQjz4TJRynETTnu9ZbjB+lLxwtgtM/X
lrMPJL0YG/sG8/+fb+BH59O/2jDnz8yjv/vCvF+ci7mvPQyReUWTunGXMPXM
tlGPfSH2wdpc4jqC7CfPrRxXBJjnKVbWe9MP4xpdZaE+mp9+JVt4fp5p1K/x
AvaTdh727aQszn/uZt9OnEu+ihsfyT3z52ziT3Lz/rbMJo+9Cnb+rhPpOBOr
RZA8F76X74Q74yHH7Ub/pbynqs304Xw+773ceOpzIA+lw3WB7g5kXnrZEK3T
bPHZIOrQIRfr5N6uScAAIXRoEb8/zgymn/9Y8VTurTSw/3itqJDnkWa8Ieub
WrFbBPnEzDzttPDexhDI9Ri59cXYOP/rXxrnWpjn1eB9k2LhuTUlUOeKHBiN
pdLEeg9mg8I1LH/5e+pf8dcw3g==
              "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQfevc9+DHkjkODlzXFxfUOjjsmy+lf/cElP/X0aEo
Y+LbmvpcBwHdTXPfs7vC+TL6d1XYCt3g/CtKt3/WvXJzmJYn1HxAL9eBAQQe
uEPkt+c49EwHSlzwABtrK5TlkGJ9379X3c/hAkifXprDN42Y/kNXQx3idnny
MH1Ocjjhbd7pmBDrsMh12+e/LgkOqz5e8k26kOiwTiYqxXp/FET911QHudbX
gTuehTkcA6nPyYTY1x7k8GTp7CMKMbkOVltOlO0rD4C4x6rA4QvQGIEKf4cq
kXXuD8WKHPaUTJZgmebnsANkkFmxw4GvQIMX+TkobACaZFwMcWe4t8MnkL5/
RQ5VL9UMOd44OgB1hfGlFjnkgA2wcjAABkfj0QKHFqBz5FhtHVy6c57/bsyF
yB+xg7hXM9thBcihik4Qf0tlOvjwMGm3H/OAuPdCqoMaW+NU5+RghxmgcDwU
C6Gt4h1OLAQGBK+/QzHIf/uTIfaJujkcB/n7RopDh9jNc983OzuUgOSD0xwW
gMItBRp/69MdOkDuemrvoAfSNzPDIQDk4Y+2Du9q7E3j+DIdZoD802sLUS+f
5fDh75WKl8dsIep9sx1+gPhsdg63ftZl7WnIdjAw5FgjEwXko6UfAIKqB2M=

              "], CompressedData["
1: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
oVjG/cBy4nGgDRiwXxRL///e+xec6JEj
              "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQXZQx8W0Nf77DGpmoFOvyeIcakXXuD0/lOnzTiOk/
FJjgcMzbvNNxQa7DAtdtn/8qJDnsKZkswXIsz0GNrXGq8+0kh3c19qZx7/Ic
FoHkvyQ5tLwO3CF3M99hWp5Q8wG3ZAfLLSfK9qUXQMQnJjssnX1EYYNbkQPX
9cUFtptSHDodE55eaCl2uPOzLmvPllSHapD9k0odnoAUHkmH2O9Q7gAyZn5R
pkP5vvlS+qnlEHubMiHqL5RD1O/IgMgbVziE8Olumvs/3WEGyB1WFQ4TDn3V
iJFOdwAZl/C03GHVx0u+SQFpDgZ3Vdgat5Y7XFC6/bPuXqoD0HdhfKWlDlUg
c/uSHYSbD5xayFsCsT8uyeGBf+/0PKFiB5funOe/OxMh/okpcFABhUd2PMSc
b/kOX0DhZxvvoGbIsUZmWb5Dwi5PHibteIcCW6DPPfIdOED+d4p3QA9/AKEX
tx4=
              "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3fI6cIecZ6YDmL6Y6mBwV4Wt8WCGw61z34Mfi6Y5
FGVMfFtjnwGRv4ngP1k6+4hCQjqcv+VE2b75r6D8/RkOYXy6m+YuznAAmjbV
OT0TwufOhKgry3fwMu90TDib45Dz/PfKj30FDtPyhJoPvMt1UNgANKG92OHQ
V42YfoNCh8kSLGF8R0scHoPskytyeODfOz1vVanDdJD6fUUOO+RaXwdeKIXI
nypyuA+S9ytz4AVa9/59kUMuyPwbZQ7CzQdOLZxY5FC+b76U/usyiD2cRQ6W
IAf9LnOQjUqxvt9b6AD0jGncszKIOysKIfo2ljis+njJN2lJvoNWu9jNc/5F
Dse8gR4QyXEAeev9wwKHBa7bPv8VyIL4/3yewzeg8w8ZZkDEe7IcqkTWuT+s
S3UQAplnmuUADrbIVAf08AcAf4/C6A==
              "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3X/oq0YMe7LDtDyh5gNsuQ7hfLqb5vYnOXzRiOk/
JJvrAJZ/nuiQNfFtjf3VXIe9JZMlWM4lOqz6eMk3KSbPIW6XJw/T/EQHh4Sn
F5TC8x1U2RqnOl9PdPgG0r8y3yEMZN7xZIedcq2vAxcVOGw5UbZvflqaAwMI
7Ch0aHkduEOuMd0BaGoYn2WRQ890oEM2ZDlcVLr9s+5UMdwdO0D6/5Q4HPM2
73RckgtRb14K4XPkOdz3752e51DqIBOVYn3/c54DyNn9YVD+7nwHrXaxm+fk
Sx0sQQ5gL3A4DtK3qcRh2ewjChusChw6HYEe0ClxaAW5x7AAQsuXQN2Z4wBy
1gG/Igh/RiZE36ECh3c19qZxVhkQ9coFDkUZwIBan+pw69z34MeGeQ4zQPrs
UiDuZMl1kAW553EyhH8nxwE9/AFavquU
              "]}]}, AspectRatio -> Automatic, ImageSize -> 25, 
           PlotRange -> {{0., 1026.}, {0., 914.}}]], 
         Deploy[
          Graphics[{
            Thickness[0.0012787723785166241`], 
            
            FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1,
               4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1,
               4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
              "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
              "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
              "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
              "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
              "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
              "]}]}, AspectRatio -> Automatic, ImageSize -> 25, 
           PlotRange -> {{0., 782.}, {0., 668.}}]], 
         Deploy[
          Graphics[{
            Thickness[0.0009523809523809524], 
            
            FilledCurve[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
              0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
              0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
              1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
              3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1,
               3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
              1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
              0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
              "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
              "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
              "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
              "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

              "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
              "]}]}, AspectRatio -> Automatic, ImageSize -> 25, 
           PlotRange -> {{0., 1050.}, {0., 740.}}]]}, "MissingCode" -> -1, 
       "Version" -> {12.1, 1}, "ID" -> 1622650028530212236, "Output" -> 
       Association[
        "f1" -> Association["Type" -> "NominalSequence", "Weight" -> 1]]]], 
    "PerformanceGoal" -> Automatic, "Model" -> 
    Association[
     "Method" -> "Markov", "Order" -> 2, "Smoothing" -> "KneserNey", 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NominalSequence", "Weight" -> 1], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
         False, "Missing" -> "Allowed"]], "TokenNumber" -> 3, 
      "VocabularySize" -> 5, "TokenizationMapping" -> 
      Association[
       0 -> 1, DirectedInfinity[-1] -> 2, DirectedInfinity[1] -> 3, 1 -> 4, 2 -> 
        5, 3 -> 6], "UnknownToken" -> 1, "StartToken" -> 2, "StopToken" -> 3, 
      "LogProbabilities" -> 
      Association[
       "1Gram" -> {-1., 0., -0.60206, -0.69897, -0.60206, -0.69897}, "2Gram" -> 
        SparseArray[
         Automatic, {6, 6}, Missing, {
          1, {{0, 2, 2, 5, 5, 8, 10}, {{3}, {5}, {4}, {5}, {6}, {3}, {4}, {
            5}, {3}, {
            6}}}, {-0.45593196, -0.45593196, -0.8181564, -0.24412514, \
-0.8181564, -0.6130554, -0.66756153, -0.43326792, -0.44069198, -0.47495517}}],
         "3Gram" -> 
        SparseArray[
         Automatic, {10, 6}, Missing, {
          1, {{0, 0, 1, 2, 3, 4, 5, 5, 7, 7, 10}, {{3}, {5}, {6}, {3}, {5}, {
            3}, {6}, {3}, {4}, {
            5}}}, {-0.18030652, -0.23183294, -0.47495517, -0.22598097, \
-0.2230843, -0.38457602, -0.4034029, -0.63418776, -0.43980798, \
-0.51624656}}]], "Discounts" -> 
      Association[
       "1Gram" -> Association["D1" -> "0.5", "D2" -> "1", "D3+" -> "1.5"], 
        "2Gram" -> Association["D1" -> "0.6", "D2" -> "1.1", "D3+" -> "0.6"], 
        "3Gram" -> Association[
         "D1" -> "0.636364", "D2" -> "1.04545", "D3+" -> "3"]], 
      "LogBackoffWeights" -> 
      Association[
       "1Gram" -> {-0.22184873, 0., -0.4436975, 0., -0.24033217, -0.25963736},
         "2Gram" -> {0., -0.28172487, -0.19629465, 
         0., -0.19629465, -0.19629465, 0., -0.19629465, 0., -0.2369125}], 
      "Indexes" -> 
      Association["1Gram" -> MachineLearning`SortedHashAssociation[
          Association[
          "KeyHashes" -> {-2105771519489905399, 663911524999149538, 
            4072388973597673248, 4528882873966812144, 7509189838328008390, 
            8742360237250934914}, "Values" -> None, "DefaultValue" -> -1, 
           "HashFunction" -> 
           Function[{
             MachineLearning`file155SortedHashAssociation`PackagePrivate`keys$\
}, 
             Switch[
             MachineLearning`file155SortedHashAssociation`PackagePrivate`keys$\
, {
               BlankSequence[String]}, 
              Data`StringHash[
              MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, "Murmur3-64"], 
              PatternTest[
               Blank[], 
               MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
              MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 
              PatternTest[
               Blank[], 
               MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
              
              Block[{MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q}, 
               MachineLearning`file155SortedHashAssociation`PackagePrivate`q = {
                  Quotient[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 
                  Quotient[
                   Mod[
                   MachineLearning`file155SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                  Quotient[
                   Mod[
                   MachineLearning`file155SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                  Mod[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 2^16]}; 
               MachineLearning`file155SortedHashAssociation`PackagePrivate`q = 
                Transpose[
                  MachineLearning`PackageScope`ToPackedArray[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q], {1, 3, 2}]; 
               MachineLearning`file155SortedHashAssociation`PackagePrivate`q = 
                Transpose[
                  Flatten[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q, 1]]; Data`StringHash[
                 FromCharacterCode[
                  Abs[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q]], "Murmur3-64"]], 
              Blank[List], 
              Map[Switch[#, 
                Blank[String], 
                Data`StringHash[#, "Murmur3-64"], 
                PatternTest[
                 Blank[], Developer`MachineIntegerQ], #, {
                 PatternTest[
                  BlankSequence[], Developer`MachineIntegerQ]}, 
                
                Block[{MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q}, 
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q = Flatten[MachineLearning`file155SortedHashAssociation`PackagePrivate`q]; 
                 Data`StringHash[
                   FromCharacterCode[
                    Abs[
                    MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                Blank[], 
                Data`StringHash[
                 StringJoin[
                  ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
               MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$]]], "Version" -> {12.1, 1}]], "2Gram" -> 
        MachineLearning`SortedHashAssociation[
          Association[
          "KeyHashes" -> {-7230328712365660498, -5699723889661368309, \
-3859594008054049154, 566237086704398988, 4351566286723172397, 
            4680468456384322590, 6104347823455064644, 6209473567938513282, 
            6265317563253088409, 6993164843335801449}, "Values" -> None, 
           "DefaultValue" -> -1, "HashFunction" -> 
           Function[{
             MachineLearning`file155SortedHashAssociation`PackagePrivate`keys$\
}, 
             Switch[
             MachineLearning`file155SortedHashAssociation`PackagePrivate`keys$\
, {
               BlankSequence[String]}, 
              Data`StringHash[
              MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, "Murmur3-64"], 
              PatternTest[
               Blank[], 
               MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
              MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 
              PatternTest[
               Blank[], 
               MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
              
              Block[{MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q}, 
               MachineLearning`file155SortedHashAssociation`PackagePrivate`q = {
                  Quotient[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 
                  Quotient[
                   Mod[
                   MachineLearning`file155SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                  Quotient[
                   Mod[
                   MachineLearning`file155SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                  Mod[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$, 2^16]}; 
               MachineLearning`file155SortedHashAssociation`PackagePrivate`q = 
                Transpose[
                  MachineLearning`PackageScope`ToPackedArray[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q], {1, 3, 2}]; 
               MachineLearning`file155SortedHashAssociation`PackagePrivate`q = 
                Transpose[
                  Flatten[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q, 1]]; Data`StringHash[
                 FromCharacterCode[
                  Abs[
                  MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q]], "Murmur3-64"]], 
              Blank[List], 
              Map[Switch[#, 
                Blank[String], 
                Data`StringHash[#, "Murmur3-64"], 
                PatternTest[
                 Blank[], Developer`MachineIntegerQ], #, {
                 PatternTest[
                  BlankSequence[], Developer`MachineIntegerQ]}, 
                
                Block[{MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q}, 
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                 MachineLearning`file155SortedHashAssociation`PackagePrivate`\
q = Flatten[MachineLearning`file155SortedHashAssociation`PackagePrivate`q]; 
                 Data`StringHash[
                   FromCharacterCode[
                    Abs[
                    MachineLearning`file155SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                Blank[], 
                Data`StringHash[
                 StringJoin[
                  ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
               MachineLearning`file155SortedHashAssociation`PackagePrivate`\
keys$]]], "Version" -> {12.1, 1}]]], "RestLogProbabilities" -> 
      Association[
       "1Gram" -> {-1.1995723, 
         0., -0.6066557, -0.8473899, -0.5228787, -0.6066557}, "2Gram" -> 
        SparseArray[
         Automatic, {6, 6}, Missing, {
          1, {{0, 2, 2, 5, 5, 8, 10}, {{3}, {5}, {4}, {5}, {6}, {3}, {4}, {
            5}, {3}, {
            6}}}, {-0.5901608, -0.40248767, -0.6446124, -0.4164234, \
-0.6446124, -0.48811665, -0.6917914, -0.61678326, -0.7351166, \
-0.2986239}}]]]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8153062232343817`*^9, 3.815317064737363*^9, 
  3.8153192789017386`*^9, 3.815321843479457*^9, 3.815321998814557*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"e65d621e-c1a2-45bb-9b45-a8166194b4f7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 21", "Subsection",
 CellChangeTimes->{{3.780197158373291*^9, 3.7801971639269037`*^9}, {
  3.8144382068743916`*^9, 
  3.81443820737607*^9}},ExpressionUUID->"0798243a-a487-4a6c-bf96-\
bbfb566e8d12"],

Cell[TextData[{
 "If your opponent uses the sequence {",
 Cell[BoxData[
  RowBox[{
   TagBox[
    GraphicsBox[
     {Thickness[0.0012787723785166241`], 
      FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
        "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
        "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
        "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
        "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
        "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
        "]}]},
     AspectRatio->Automatic,
     ImageSize->25,
     PlotRange->{{0., 782.}, {0., 668.}}],
    Deploy,
    DefaultBaseStyle->"Deploy"], ",", " ", 
   TagBox[
    GraphicsBox[
     {Thickness[0.0009523809523809524], 
      FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
        0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
        0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
        3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
        
        "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
        "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
        "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
        
        "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

        "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
        "]}]},
     AspectRatio->Automatic,
     ImageSize->25,
     PlotRange->{{0., 1050.}, {0., 740.}}],
    Deploy,
    DefaultBaseStyle->"Deploy"]}]],
  CellChangeTimes->{{3.780154747626994*^9, 3.78015474762787*^9}, {
    3.7801550408264236`*^9, 3.78015506109583*^9}, {3.780155259660273*^9, 
    3.780155265170496*^9}, 3.780155304864932*^9, {3.780194189419746*^9, 
    3.780194190674692*^9}},ExpressionUUID->
  "d89853c8-9dda-4c37-a0de-19d0c888f3be"],
 "}, what action would you take in the next round? Compare with the order one \
predictor."
}], "Text",
 CellChangeTimes->{
  3.7801970334319525`*^9, {3.7801971795029335`*^9, 
   3.780197192106489*^9}},ExpressionUUID->"acaa01d8-de15-4009-b374-\
7543228fc62d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sp2", "[", 
  RowBox[{"{", 
   RowBox[{
    TagBox[
     GraphicsBox[
      {Thickness[0.0012787723785166241`], 
       FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxdVA1MlHUYf4cfc830RuXA1U0I9ByQuXRi5u6nYgV9GgQ3ZIh3OriLjtfj
Dl7gkvfu3pe7Pia5pq05A2fKqsmYsb7G4ERHrJVjQbMkDWLGyJD5Ccao/s/7
vLOt227vnvf5+j2/3/O8Kc6qV/YmSJJUKP70NH6dXkja1R1fWift77zvTYzM
uDBiK2nuvZ2CB9ufGa3P3Amp0dPlz8+BEd9fhOzO/pru5iK25SKkLQwd2nbV
wbatCK3bP785V1B8z/5TVNc/+88eqReVz+yE0a+jEEH7+tKvk0vY/2wBxw+W
4LtjotDmHK4/tgtyl/+9JG01DvTetpVMuwCCaZuHi+en88d+dEPKW5yQEb3c
c4fwB16DtLXsykDqeI+8+b4Lxx+ugvrmFvHib7vS3bJ8zW4Zrdd/eMH5rhUD
qcN399t8sGSdPjr1zRN4SoTLgWrGY8kBwR1V/Kb9NJZQ3Kd+5ufcVvYnBdDh
qzg42bUeN0RZi7UGLzstjo23VsHol1GLEQHzxJFkPL9BAKlWADF27uJEvEWw
flOwQsDwdFlwWNASt9bds5cX79n06/31iFt1IZQFleOzH1/3Npj+ZBjyLQgi
ac2ltIUpj+NJ0mf1G5iZG1Imfrdz/oJGxAV985e9yPOmqSbfDjxCfpcKonf+
gWII9YaUahXXSJg7ZThx5NyKjhoVhTT47G5El/18frpCZV3KnRgU4zpcZr1W
J6h9i7BB9Pc4Od5txl9w4tC2tyvHvSrrlu4Cydn8oYqfyH7dxXgGzf7X9nL+
qTD6nhPESR6MEuEDEe63TsYXhHefhgwKrPNx/pjGPD8aYPyzGsfnKTDW4CuN
+7YH+X2p6T+pYowSXo1wvjvMfPwRgkF/n2m3hLjPP2HQGse7Q8yDEsFJ6ieF
2V6qcf/EMNf/QAPJFJoKMQ5d5/lOh/ARLWptE9cdVUGPl5ZGWb+jjTx3g2k/
tB9DVP9GlOPyG/gc1sbYf0UBrb1cGoMlEv/2WHotz+uNoYn2ZV4N51WZ8bqf
91aOsX5/+RjPnhjr4PDxXOtirEP2PnhoYdqj8BycDNrTKzHVJjzfN+Exmm+j
m/k7pXP8Ig9q6Q526fiE7g4ezi/TeQ+2eJApzqptk848wQ06s7YsHZR26ZcK
5NJ5L9KRR3Uny3neCY33PaMc4to6+3sjWEl79kAZjM9BVhiZhGeuAGdp/iwV
M+Jq/DdzGd9wECrd78UNfEctdYgrEyvXxlIZR3EAkkF8AvOXLb4DHQJX37Bd
XEvhku0yJOOwLvf8/3v6L8y6Q9s=
         "], CompressedData["
1:eJxdVXtMlWUYN3TpnHNozpxTNHZmqGmamZAczo8dUVSKmx1BBM7hcg6CwJHv
cEDAw8c5hzTNa95aNXTqvOTIDMkxtdJS8jZm5v0aWhhWaqk5V+t9+H3zj9jY
t2fv8z7v7/I8z3kppzQlP6Rbt2416l++XX/HPdA7k/eH5ccgLW/y9cRjlcCy
+b88vROLlrD6zuST1YjMapneJyUeXfnhtaixTMxqWZ2CfmlRTa2ZdbjyxFd4
oCYdkr7/iB+77p95KyfJgel9QkYvPhcA7Lfbwi0ubPvo2+F7bEGsOvwwYm73
Quxr9R5qOBlE/8DXxzfHFeNm1YDGaXeDeL1JHXSWoPnPf85WDqtHwqT3Yu0n
3ChY/VuNxVSPGRJbNJ7/HcTgOQr4vnJsKFGVjgbxrvCpq8TigRdPP54dZP62
aqy3KmK3AsyvX4R1Ep/zI1R4PNIhsFbuqiWu5wLkO2ohXtn7yR/bWwL4XYh7
K/BA0QvtDPCddi+WxCqCD4z8kHLWUfEtIezTiF/Fawb1sPWN1dAWfvmJ714A
fceowp+WkfcNQ6eeJcyvMuo1zYO59/kt7qAfb4ou3V2IkfhznXp84+Q3qNOH
tU7yTtf5/iYnfUjR+e5eJ/lM1REp9a47sVF0i9PpW3QBdZ2hG+8X8b5NJ77Z
hi8eHSJj4ko3Zgrez3RESb2nC9gHnTokbAjVGE+oY73XyomvvY66jfVCZNg+
0Y+jXYW8GCqFrX4Mke9sL46InpF+8pzmpf7hft4P05i/VUfFoYbBr24uww/q
OK3SiC+76UdjLUTmm6eLcSNx+YaSAbXEc9ZFXa758L40UK98zsF3Pp535JLn
9z7mrcmh7/d9KBNA5+3EYaqF6fm6ddYJGTgjeSajfkSa4bcPU2SuRr6DaPHv
oI99np1Mv60+ztmat7FU6p1ZhI3SL6eiyXtYDRSLww9b38A1we9dCKFTZZrG
+7EVGCf3f0og/jFe+nssmfiXlaNJyXx0tA1e0cVSjgTxtXkO693z0K9HOezL
ag/xTykg3jFGXFnE778a80fMR7N872rk32CcX9CwQvQ0FRl6GvneAoy9qjJr
NeaZXCgUfrkaNsWpzorIh1Jp5/1INTfKxqhZmdQ7ysiPT+O+yDXijlTiX6Jh
rqIfMiGVfbNYQ6v0U0Qy5z1TQ4GCsbxnAvkP1SBj7702FaOkIReVIVR497Qa
+2EBQpU8Az+MwQ7ZW2vd3JNxZr4/0o090gDRZs5ldTHatrjNvSeZcUnmMLKI
9VxmlMkA/1VI/zoszD8xDx+rsmU7rAiVeplO6DIXX8zknH2VS/8SU7l3CnOw
Q4iV2rBCGnq7A8Nlrmxp1LXKYeiRxX2X7iDOfg4EBfd043xrHqRNQl404jwX
xF7zr3bDj0LeP2jnnn6hmHtklR2XTj9Obb9TjHHiX70d62VvZJWynmbn/F4p
Zb+mG/V2lxq+2iGyX9VLsUf68Gk2dTg2n32jZXH/xBfhhgzqxUzyzy6ALj8P
jXPxSATcmQePPPA4g+/pjmdx132P/Vnc9W6PbBzwfDCox88ZxHUqi3PeloFe
wrslEx0yoM4M6mvJZh9V26h7sx2z2pUASam8t8rBuTmXhBapG5OLC+L7ywnU
6V4e++DLeOJf6UKE6JVvpU+NRUjarzbieAv16W301e1o/Fh5Z8T4sAVIUu3c
/8hk8svRMHx8r91DqqLx/9/r/wD601dd
         "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQfeirRkz/hzqHY97mnY4R2Q55z3+v/DipzuFdjb1p
3Klsh0+XfJMEyuochJoPnFpomuOgd1eFrbG2zsFqy4myfcy5EH5rnQMDCDzJ
hajbXOfQNz1PqDkkz8ELaGyCfr3DnpLJEizb8hw6HBOeXoipd7hx7nvw45tQ
/o96B5moFOv7wfkQc1wbHHxA+o7mO4CE/U0aHdweVomsm1vgoA+y73yjQ9wu
Tx4m80KHx0tnH1HY3ARR71nkIBhhueWEZjPE/TeKHDInvq2x92uGmPuqCELX
NkP8uarIIaYfGAJzmyHuri9yaBe7ee77lmYHD5B92lD1W5sdBEDyTwvh/ByQ
/o5CB5v7/r3T5zRD/OkP5Xs0O1ypeKlm+KzAYQYwGA6caILocyuAmC/Y5FAh
ss794b88iPjURodvwGg4JJkH8c/PBkh4/M5xUNpQlDGxvR4S3tLZDhGg8PCH
hheQD/anGYIPVsdd7+AADFYl82wH9PgFABfr08Y=
         "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/a7G3jSOo9rhSsVLNcNDRQ4ZE9/W2JdXObS9Dtwh
p1zsMEmCJYyvtsphgeu2z39fFDt4PKwSWSdc7QAk3R86lDiU7Zsvpa9b7WC1
5UTZPv8Sh3v+vdPzmmoccp7/XvlxTokDAwhw1Tnskmt9HfimxKESaA1HR4ND
VIr1ff/OUofLvkkCEfmNDstmH1HY8KPUAaRsR3aTg1DzgVML+8scFhfYcl1X
a3bQu6vC1vi/zEF309z3y02bHXaAFDKUOwBN6Z2e1gyxd16ZgwFIXWOzA8g5
8zPKIPa3QvkRZQ7tYjfPfW9phrhXuMxhmnN3znMgH+z/faUOM/KANhc2Q8Ih
v9TB27zTMSG4GeIe91KHpSB3WjU7eIHE1Ush/rBugoTXRKh/Ixsd3EDhJFvi
kLWnZLLElAaHClA47Sx2uKB0+2fdhWoHKZDGuUUQf5Ui+ODwDEfwwf5Sq3b4
dAkYUOuKHNDjCwDJA8Wn
         "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQnfP898qP92odPtTYm8blVDosm31EYUNCrQNYfFml
w5YTZfvmm9U6dDgmPL3gUeXw6ZJvkkBHrUPb68AdcrurIPqO1DrIRKVY3+ev
dtgh1/o68F2twz3/3ul5EtUODCBwq96hSmSd+0OTagdZkLovDQ4gyj+42sGW
6/rigrZGB6UNRRkT86sdQNp3mDc5HPqqEdO/rNrhqAJQorbJ4UrFSzXDPdUO
5fvmS+kfbnKQAhlwttpBIMJyy4lLCP6SAqCJXxF8Lx4m7XbFZgePh0AXzITq
N2x2aAG5P7bawdu80zHBpxnizi9VDiBl7ubNEP9EVkFotmYHnXaxm+fUqxxi
+oEuO9PkMEWCJYzvdaVD1p6SyRLajQ7vQOHQUQkxZ1W9wzGQwWmVkHBzqXeo
ANmbWAmhD9c5GNxVYWuMhKrvqoO4J7QS4m+LOkj4+1U62IHCR7gOoi6k0gE9
vgAFBMGd
         "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQ/Xjp7CMKOW0OQs0HTi28mesA4m541eawwHXb5793
8hx0N819vzyz3YEPxEgsdPDiYdJub213UNpQlDHRvtjh/fJj3uYT2x102sVu
nmMvcQDqulLR3e6w5UTZvvmLSh3A5le2O7S8Dtwht7XMYStI3KHdIe/575Uf
maoclhTYcl1f3ubAAAIbah2mOXfnPOdsc6jYN19Kv7seYn9nK8TctgaHypdq
hhzLWhx4QRJyjQ6PqkTWubMh+GDzHjTD+RkT39bY9zQ7HFUAOpiz0eEhSH19
s8Phrxox/X8aIP4tb4aY+xVqfkOzw/Q8YIg8a4DYvxRq3q4GB2/zTseEkhaH
XXKtrwOn1EP8/7rF4RhI4kCtAygYvke0OhjcVWFrPFzlkLWnZLLE51YHO67r
iwsmljksA9mn2gYJP8UiiDtutjqs+HjJN+lHHiScz7Q69B0CSojnOUSnWN/3
P9XqAHL2w025DrYgcy60OniB3DEz10EgwnLLiXutDgKg+IvNhYSjSxtEf3uu
A3r8AgDN3OyW
         "]}]},
      AspectRatio->Automatic,
      ImageSize->25,
      PlotRange->{{0., 782.}, {0., 668.}}],
     Deploy,
     DefaultBaseStyle->"Deploy"], ",", " ", 
    TagBox[
     GraphicsBox[
      {Thickness[0.0009523809523809524], 
       FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
         0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
         0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
         3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {CompressedData["
1:eJxdVX1M1HUYv0GLInfg6UgZnWVOmabQH44Mkk+vxou8quEJgicQHG/nHR7E
4XnHvXDcy+9OHdDWmjgkqSFRWbsxXximWW1GShOzRPKKVVRDRHPN1fe55za3
brvdnt/v+X6ez/N5Pt/nnlI3FFREyGSyN8WXfjUnGw8tCbohS/pxxcOW++mf
zd0fb65xo+fdv46d/1qBt35d+ewjkW74X3bXTqeuQK/2hegrahf6X6XM9eh7
5/Mnh6470Ux5CRnooryAA68viFjTLm3l/Ew7gmPLr927qELT6cPxSR/ZMJMf
UNojSzC+WR1bNGzF8ycuGE6vKeP8NisoPNwSjlVWNFYd+KP1k3D8WxtOEM/t
pSBYU7YZMvrEFqKrXmEd2WZE0QaBsC4XxsWDm6ZaDRhIUJWnpmzFIuvIV0d2
NcLTLRL730Cobesexo8pgX90PrH4Wj1ENwMJL+0CPU6vKMedxGLf6NIqZFNf
cTvQ8WLZz2NbtPiYdJorxMElD22TH9/LuM4Cjk8Z8Bw1kpuHFuJxwYDQ8aUb
oSAedw0YovPup/l9bTN6Zi8JRSKwjnhtNkLmFPXXD555j3ROboUsBPjhmRCv
zn3ctyyC61WYGC9rFT4l/SbMKE+dzPUeew3L7L/nBxZa8YoYzz9fbkEGEXHZ
+PzEdiwkwQrtPIemUpwVMvi+s7O+K3fzPJQOQLS9/GwlnhByTtY4OD9KA/la
oUSWAzuHBXJ3Lc911M7n2uo432/nemkNeJvmdM6OQ8Q7yoBO8k1OO5yka70J
scTH1Q7qJqXfglskS4EDO6ghdRv77LadnyusXL/WjmTSzWLl+dy04Sj5JcXG
/UbaGK/ThpDv5VZ+f8qGm2Tkoxbmec4GobauqtjCuN/YUE16Ky0QLphPHA/r
Fm9hnGAYL9rCfql2cP1vzezX4XbWYdDMdTrcnJ9hxjNkoMe8zGOBmc//4OW6
+v0g207ulzieNSGT+vhXwjhduDwT34O9PqRFX+nV1u1DyCcTPv4dbAXRLY7x
c/y3Ed/fM2lOrvYjM0UwXGWEcLkq2OVHkHjNNOHxqxfvXtb4WdfMRijJN5IP
8cRjXoci0n+tDwTr8+ugIb7TEoSr3p/V6riPSgkBOihiZ5wAfDTMv0GH0H75
xcv6NetYj2ov9/OBjueX72E+8Xp+n+pmX+wMxzEd4ful5zkpnIw/rWe9r7fj
Evl25kHMPn8Qh/DG9Cghgf4Mvx/WM3+Zk/vs0/O88524kevtrs/Wc52pDt57
lXsYT3LxfD1a9skdF77IEgJHa5lvnxsOIaOyop73zSIP56vquJ7Fg/OUn1fL
85/z8N5IquH8GC/vi6sa9s0BL5/PqcZGmnuchB7ax4FK3sOlEgi2t6gcBtq3
ch9u0ILZUMLxbYnv9XAO118mYWjTVMtieRp+orzLXuSJdhWRyVxntxdQ042M
535veTAS2lNRrNtxD2TkE+VUeig/ScRlJNxA+v//X/4DyarkSA==
         "], CompressedData["
1:eJxFVgtQVGUUJsfSHHXUGKNUIkccS01s7CGifOYLLXRoSgFRcXm6A4a6Cwu4
j7t3d3nsLqummOOYNBpaUTkO2WqOg0aO1WiOjywfIVNi5QOVsWKcxv6z34WY
gTvn/uc/5zvf+c65PGt65828PlFRUR71K8/pAy7sKjkRQMLyQ/MHmpJRemTn
05Pagigp3HhrfWgOfvtwe2vc7DpYxP48Hb+KvT3I9yUm1MzMvnY6N4i/xmWF
juXlonPP8ddf6QpA/a2Z2ZSP1rh9awt9AWw4dn9c1oMCDJ64f0dncQD1q4fp
LXMLsSykDoYFGC9hFf0P+THbX3T9wSNmTFDue0x+jMzMndZ21ozToy91O8K1
qJN4ZUVor4j+bB5qMXZy/6aRjcWYdGXMY9qIapy3/TF2sm8N83V7Gf+fdYjU
W+SFiv7R3SwLGtXrfXc9uLoouHV1swUHuv49Z2vSce9MqmnI81bsKlE3xrox
oWr4z6f8VpSrsP2f0NAwR3metmLLLAV0gAZVzXcfnLWSD3W+Kabv4sHXrJC0
+57UcOCEYvamFbslXobG/H1LGb9Rg+9GWjh2RCnjP6ozn7MUX8i9xz0Ix3pv
pLkM/4+9jD+qFNKW5H4+eOR+v1LiHlzFen8y8N+rwl7B0Wzg6aqF0LxxupV8
JgWQrdrfp8uCpYrmRfVBxi22wCzPziDWK5rbFxh8Jdcx/0sWSBtCef/bcQpm
+LlQrx3p8/4QqoWXaCui5OdyiPfeM/DeDlEvr5Wxzx0h8pFmg5iLvjfiDSpH
kvTPathLKpHYphq3qQ7npN8xdvq/HcQZqeumnf1vDZCfVAeyRG/xft4/7yA/
5hrmn+Kk3jqriXuhk/iiq8mnw0l/dxVx7HDijuj9opd4uw3/9z1YMLDP+KqJ
Lnwtdbbr5H25C+bDlndjbmnE0e6ifr9xQWDu2ayxjttODJIXR9zEke/EKCks
Tic/P9g5h/keJDYrgVywc47MHurwknFe5IFN5rnSAZFPONbDOhOd9D+is55a
F3V50k39D9NwVpWRnuPmPP6oEfdDjf0zuRnvS416zdTxjNjLNPLfovN+ak+d
Ou+naJgm/bqk00/XMDR9avOJk8b5cDfnc6/OuEcNPE4d9TJn43TaXW6USV0B
D3Ef1Pis8bLfA13k+56Xc6Tqj+SL97E/p+ys4wUf5koDrJXkS9kRv23l7Kuy
K0X3U8ohYf4e70OK+KfamH+kj3letpLPDi/3TngtcVZ76T+nhPZtD95Q9Gcf
NTPPq4YdX0D+CnX2szOHe/QpNy52O8yHY7K5V6pc6JCBjc3kHL5ox27ZQ5vT
WZetAm9JIb8vMfZrORaqNkwdk864q2yo26oOSjJ4nlKGBNmX8Suoq7S1uCz5
buZSJ/2Lubc/KcYCwVmez7wJa7j/7pgQkdWn68hnSjYkzc6Fxl66n8V+DrWh
Wcn7uD+T78vKiTOcQf7tlWgSANczMET0a7VDaK+IzjT07UCLkkff4UupgxUu
bBb8h5ZBYGarfRvxb1pBPSe6AUXX6Icre+3I92GxqdeO8J5nwgzB962h6+gc
ns/QIK+nX8whT40O4t6WTx7mGfppKOB+nGlHi5LDldYC7tkk4/xqAZ8Vdub/
s4B7cIyj147MtdoTPXZkDho0yFpo78jnfmhzk2/ksc+NHvbruon3H1RBdXHL
rBvpvH+wFnulgWkpPIcfG6Tv2bOo83o/v+9tYL2/+BEnH86VyZy7BPW9Fp6/
SuL3pyaABvW5uHU4CT3/L/T4/wfJfLtl
         "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQPeHQV42Y6HyHKxUv1QxXlTgY3FVha3ya5zBJgiWM
72SJQ8bEtzX2ulkOD/x7p+fllDmA1VtnOryrsTeNO1XmsKtksgTLvzSHin3z
pfRXljtMzxNqPlCW5LBLrvV14J5Kh8dLZx9R0EhyOOZt3unIUeVQaMt1ffGe
RIdPl3yTBAqqHHpBGkSSHIC6Ti3krHZY9REocQOq3qbaoUpknfvDsGSHnOe/
V36MqXYAmrpDzjLFQSYqxfp+dLXDcZC6OSkOT0D2WFU7WG45UbbveIoDSNpf
u9rhzs+6rD1zUiHqT1ZB7ClNc/B4CDQ5scqhCOTB+EyHhF2ePEy/KxzU2Bqn
OgdnO+SB7DOqgJibke9wSen2z7ozZQ76oPBxL3DwAlqbkF4Gcd++Aqj7yxwY
QOBCgYMeSN3bUgeFDUAbvhc4rAAas2FNqcNbULh9K4Dosyt1sAMGR8HZAodt
QGfP/wMN76kFEPctLIGEH1eBg0672M1zlSUO6PEFABuRzTw=
         "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQ7fGwSmTd1BKHtteBO+Q2VzjkPv+98iNLicMOudbX
gS8qHOy4ri8uyC1weLJ09hGFSVUOEw591YhZnesA1OX+MKbawSnh6QWl7CwH
sDnaNQ5va+xN4xalOuSAzKmrdVj18ZJvkkKqw5YTZfvm76p1OO5t3un4Idnh
SsVLNUO3OofbP+uy9rSkOEhFpVjf1613iNvlycMknQax17HewQFk/vY0iHke
9Q4CzQdOLTyb5nAMZI5LvQMDCGzJcJiWJ9R8YEcdRD97rkPFvvlS+tW1EHs/
5TtMkmAJ49tfA3Hn3yKHrIlAlyZWO2wFu6vUQadd7OY55SoHK5CGs6UOGSB5
8SoHYbB9UPn2SgeDuypsjUD+Pf/e6XnXKiDm25VCzC+tcEAPTwAu1KVd
         "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQnfv898qPBkUOlS/VDDmkGhz4dDfNfW9b4PB++TFv
85QGhy0nyvbN/5br8Hjp7CMKsxocJhz6qhFTne1w2TdJIOJGg0PL68AdcpYZ
Dp8uAQW0Gh3U2BqnOt9OdziisKEow7rRoSRj4tsaIH96nlDzgeZGByuQgUA+
yLgNhxsdpoHE52U4THPuznn+pdGB6/riAttZmQ6ePEza7UA+2PybmQ62IAkg
/8B8Kf27T7Ictn3+e6XiXqPDqo9Ai79kO8T0Ax0GNO9djb1p3L08iHsrGh20
2sVunosucNABemu5f6OD+8MqkXXeRRB5tkYHO5C5rsUQ/sMGh6sVwIDQKIH4
b08DRL1zCcQ/Wxog7jhd4gDyln1vg0NUivV9/7MlDh9A4aXU4DBZgiWMz73E
4ZLS7Z91b+odgKKdjt+KHfTuqrA1bq93KN8H9MD2YgcGEDhQ74Ae/gBcyb5b

         "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQPSNPqPkAV6DDJAmWML7KSoeQx0tnH1EIdLjn3zs9
71ulwxeNmP5DuYEOdlzXFxdsrnLYUzJZgmUbVL1stYOU/l0VNs4Qh2VAXRua
6hz8kgQiLHliHNrFbp77PrXRAaTNti/JofKlmiGHcbNDtcg694dBKQ7l++ZL
6V9pdgBpb4xMc7jsC9QY0eIw4dBXjZjPGQ4ZE9/W2F9pgeiflungycOk3f4J
Ki+d5eBt3umYINAK51vfBzpYDME3AJmr2grRb5YJsd+t1UGg+cCphbEZDksK
bLmuh0LVZ6c6yEalWN/vaXW4/bMua8+FBIh7uFsd3gTukGtdHe1wGKisX7fF
QaH1deAOsWCHR1VAj7xrctj2+e+VCklXB3mQ+NkGB5AzxW7aQ+zvrHOoAdnL
Y+mQ8/z3yo8tNQ4PQMG7wR7CZ6ty8AJpUHN3aAFql5OtdAAFT1WKp4MXyH9X
KxxCLLecKOvzdYgAOs9/eoXDLZD7ZAIcpEDunVrhELcLGDKPAyDxAeQDAEnd
xXc=
         "]}]},
      AspectRatio->Automatic,
      ImageSize->25,
      PlotRange->{{0., 1050.}, {0., 740.}}],
     Deploy,
     DefaultBaseStyle->"Deploy"]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.8153062324551983`*^9, 3.8153062390949907`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"da7e444f-8630-4e45-ba81-e0eb1c8ea757"],

Cell[BoxData[
 TagBox[
  GraphicsBox[
   {Thickness[0.0009746588693957114], 
    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
      3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
      3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
      1, 3, 3}}}, {CompressedData["
1:eJxdVgtwTGcYjUg1VUOosmOUeAyptxnGK5GzEq+oR6Ql3vGahJjYlZVENtZu
7t69+8ou49lSj6JmMKT1bGvSlIwYVZQoatSjaWkrpFpFUb3fPWnNyExm57/3
/89/vnPO//233ayF4+dGRkRErNH/5ff4qH4+c20mIoy/eqjevr4idsRcRJwf
PSvmUktceeyYfyRqFk7klW1qtbA3fj7b/srjjTPgbHH59MN9g3En9XAbddR7
OLFl6ME/ro7BSfntbkbDi1stCYsyYJo8Z9C1sZ2JuzwTGfqoZG0kdLSeV4vm
w2kQqP5yQuPun364cgEi3v1Rn3k20Zi/YSEijPUPEu+f0/lstuJR3NTw0Qft
kS8AtxZhwRHbSlPyQFzXUXNu5pJfGzO6ajrBSTasMkVNaPxNMvZLARttuKTT
atg5hfV+Z8Mp4ZswBjVFiX2nRyzGhorY0kWXxuBCwS+depvy0O1qxwau7WMh
9O758hFcm9NMGTEOXQS/pACx6m+ph8tSYfDrb8ee1jrhTWkYKBtudSBrhY5c
k4Y1+rJyxzJ4RTclDUt0+GiTEzr66qRRadim07o43Ek9vxiPd3RVMqxO8kkf
y/l9XNis030WNRQjG0V21YqKYZPnuwdDaJVPUdBn+ucjGxX3w8e6fKV93ViX
FFhwyx6Hezt0oYMqegnvhz0gKscu8eBv3V7bPqBp+oD9J6I13Bb9yoZx/TwN
hh0x47jfGg3JOtyTeZPwlviyS2Ode2dBXImr1NBKnu/NhMA40jUIu9ZdsrFG
eGR7EKOUn9xSk8P12SokDTleC7zmjJ/OnlRgb75n+I0jFu6/wcV5xyzQq64q
GO+iL6ct1DXORZ8vW1Cly5/eycW6Iq3optu1o60L03Q5IhNzya91MSRtGW8u
Jp/6Cox49S6gvkE3xzMKqccZFSNuFDbfU+ng+21eiB1ZJhcSJOBVftSKriku
+t8kQF6nXMznkgDaSD70fQx++UHibnJjsKw/FYTOamr4uUqciUHEyPtzHuYh
Joh14qtN4/xQAD0lj7rOBp/bfkwRvp286CXP3/ZjvpyHJl7mfYiP63wa/XB4
mfsCjXme48Uh0dWssZ62XvKPqcOv1jjf6qEPHTSIvKW3VPLI9FDvKBVGrJqr
1LmPG8Yxv6Zwn+o6neco5PGrQl2mK+Rbo3DdVIV1j3bDJ3lYoSBFcveVm/gX
6vAqVcQLvsXNXJ5WIe0q3eYmzyce7tdahdg33K3R9yyVz7t76cOJujpyvfTh
vkq8V308Tyke6jjMRx3meeh/qY86+D3k876f7y946McHAZ7fbz3ECQTJz+lB
reRkaQl59KzDnxxi/U6V+peHiHfUjYFS59MQ85Xqhl90aRnmefhagUd0iQ5T
x2kK6/grxPdVxfz9Dy+rGPMFf2KI+j5ysS81CFGPrS7WV1VCHEfd+Xu9hHXU
dzGfbQJoJud41zK0FR/b+Zi/x0X097qGeMnTK3bqoGroIe/zCyHt8ZpD4/OZ
heR1QMNd6b+WQhyTfa970U0MP1bIfA4NkGeZnXz6BanfyCL2jVAQGXLO7UXU
Ib6E/VktYh3bS6hfRhH1uBYij3t23BQjz4TJRynETTnu9ZbjB+lLxwtgtM/X
lrMPJL0YG/sG8/+fb+BH59O/2jDnz8yjv/vCvF+ci7mvPQyReUWTunGXMPXM
tlGPfSH2wdpc4jqC7CfPrRxXBJjnKVbWe9MP4xpdZaE+mp9+JVt4fp5p1K/x
AvaTdh727aQszn/uZt9OnEu+ihsfyT3z52ziT3Lz/rbMJo+9Cnb+rhPpOBOr
RZA8F76X74Q74yHH7Ub/pbynqs304Xw+773ceOpzIA+lw3WB7g5kXnrZEK3T
bPHZIOrQIRfr5N6uScAAIXRoEb8/zgymn/9Y8VTurTSw/3itqJDnkWa8Ieub
WrFbBPnEzDzttPDexhDI9Ri59cXYOP/rXxrnWpjn1eB9k2LhuTUlUOeKHBiN
pdLEeg9mg8I1LH/5e+pf8dcw3g==
      "], CompressedData["
1:eJxTTMoPSmViYGBQBWIQfevc9+DHkjkODlzXFxfUOjjsmy+lf/cElP/X0aEo
Y+LbmvpcBwHdTXPfs7vC+TL6d1XYCt3g/CtKt3/WvXJzmJYn1HxAL9eBAQQe
uEPkt+c49EwHSlzwABtrK5TlkGJ9379X3c/hAkifXprDN42Y/kNXQx3idnny
MH1Ocjjhbd7pmBDrsMh12+e/LgkOqz5e8k26kOiwTiYqxXp/FET911QHudbX
gTuehTkcA6nPyYTY1x7k8GTp7CMKMbkOVltOlO0rD4C4x6rA4QvQGIEKf4cq
kXXuD8WKHPaUTJZgmebnsANkkFmxw4GvQIMX+TkobACaZFwMcWe4t8MnkL5/
RQ5VL9UMOd44OgB1hfGlFjnkgA2wcjAABkfj0QKHFqBz5FhtHVy6c57/bsyF
yB+xg7hXM9thBcihik4Qf0tlOvjwMGm3H/OAuPdCqoMaW+NU5+RghxmgcDwU
C6Gt4h1OLAQGBK+/QzHIf/uTIfaJujkcB/n7RopDh9jNc983OzuUgOSD0xwW
gMItBRp/69MdOkDuemrvoAfSNzPDIQDk4Y+2Du9q7E3j+DIdZoD802sLUS+f
5fDh75WKl8dsIep9sx1+gPhsdg63ftZl7WnIdjAw5FgjEwXko6UfAIKqB2M=

      "], CompressedData["
1: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
oVjG/cBy4nGgDRiwXxRL///e+xec6JEj
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQXZQx8W0Nf77DGpmoFOvyeIcakXXuD0/lOnzTiOk/
FJjgcMzbvNNxQa7DAtdtn/8qJDnsKZkswXIsz0GNrXGq8+0kh3c19qZx7/Ic
FoHkvyQ5tLwO3CF3M99hWp5Q8wG3ZAfLLSfK9qUXQMQnJjssnX1EYYNbkQPX
9cUFtptSHDodE55eaCl2uPOzLmvPllSHapD9k0odnoAUHkmH2O9Q7gAyZn5R
pkP5vvlS+qnlEHubMiHqL5RD1O/IgMgbVziE8Olumvs/3WEGyB1WFQ4TDn3V
iJFOdwAZl/C03GHVx0u+SQFpDgZ3Vdgat5Y7XFC6/bPuXqoD0HdhfKWlDlUg
c/uSHYSbD5xayFsCsT8uyeGBf+/0PKFiB5funOe/OxMh/okpcFABhUd2PMSc
b/kOX0DhZxvvoGbIsUZmWb5Dwi5PHibteIcCW6DPPfIdOED+d4p3QA9/AKEX
tx4=
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3fI6cIecZ6YDmL6Y6mBwV4Wt8WCGw61z34Mfi6Y5
FGVMfFtjnwGRv4ngP1k6+4hCQjqcv+VE2b75r6D8/RkOYXy6m+YuznAAmjbV
OT0TwufOhKgry3fwMu90TDib45Dz/PfKj30FDtPyhJoPvMt1UNgANKG92OHQ
V42YfoNCh8kSLGF8R0scHoPskytyeODfOz1vVanDdJD6fUUOO+RaXwdeKIXI
nypyuA+S9ytz4AVa9/59kUMuyPwbZQ7CzQdOLZxY5FC+b76U/usyiD2cRQ6W
IAf9LnOQjUqxvt9b6AD0jGncszKIOysKIfo2ljis+njJN2lJvoNWu9jNc/5F
Dse8gR4QyXEAeev9wwKHBa7bPv8VyIL4/3yewzeg8w8ZZkDEe7IcqkTWuT+s
S3UQAplnmuUADrbIVAf08AcAf4/C6A==
      "], CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3X/oq0YMe7LDtDyh5gNsuQ7hfLqb5vYnOXzRiOk/
JJvrAJZ/nuiQNfFtjf3VXIe9JZMlWM4lOqz6eMk3KSbPIW6XJw/T/EQHh4Sn
F5TC8x1U2RqnOl9PdPgG0r8y3yEMZN7xZIedcq2vAxcVOGw5UbZvflqaAwMI
7Ch0aHkduEOuMd0BaGoYn2WRQ890oEM2ZDlcVLr9s+5UMdwdO0D6/5Q4HPM2
73RckgtRb14K4XPkOdz3752e51DqIBOVYn3/c54DyNn9YVD+7nwHrXaxm+fk
Sx0sQQ5gL3A4DtK3qcRh2ewjChusChw6HYEe0ClxaAW5x7AAQsuXQN2Z4wBy
1gG/Igh/RiZE36ECh3c19qZxVhkQ9coFDkUZwIBan+pw69z34MeGeQ4zQPrs
UiDuZMl1kAW553EyhH8nxwE9/AFavquU
      "]}]},
   AspectRatio->Automatic,
   ImageSize->25,
   PlotRange->{{0., 1026.}, {0., 914.}}],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.815306240594252*^9, 3.815317064890312*^9, 
  3.8153192789927087`*^9, 3.815321843554431*^9, 3.815321998890531*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"ec7b44c5-1cde-4a5f-9bfb-a3ed36c6e525"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Additional information", "Subsection",
 CellChangeTimes->{{3.7801974667047415`*^9, 
  3.780197472288974*^9}},ExpressionUUID->"1f28dc5f-e774-460c-8eaa-\
465107f1a8cf"],

Cell[TextData[{
 "If interested, click ",
 ButtonBox["here",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/language/12/high-level-machine-learning/play-\
rock-paper-scissors-using-sequencepredict.html?product=language"], None},
  ButtonNote->
   "https://www.wolfram.com/language/12/high-level-machine-learning/play-rock-\
paper-scissors-using-sequencepredict.html?product=language"],
 " to see an interesting extension of this exercise to use Mathematica to \
decide on your next action using a utility matrix which is a key concept in \
game theory.\n"
}], "Text",
 CellChangeTimes->{
  3.7801941201786923`*^9, {3.7801974418186846`*^9, 
   3.7801974506080046`*^9}},ExpressionUUID->"082c5847-16d6-47b3-9e14-\
cdc524341528"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Predicting text - Winston Churchill fragment of \[OpenCurlyDoubleQuote]We \
shall fight on the beaches\[CloseCurlyDoubleQuote] speech\
\>", "Section",
 CellChangeTimes->{
  3.7802023331724005`*^9},ExpressionUUID->"8f700e3d-3c1d-48fa-bcda-\
53ccff4c8c43"],

Cell["\<\
Consider the following fragment from the famous \[OpenCurlyDoubleQuote]We \
shall fight on the beaches\[CloseCurlyDoubleQuote] speech by Winston Churchill\
\>", "Text",
 CellChangeTimes->{{3.780202483536631*^9, 
  3.780202525860141*^9}},ExpressionUUID->"61437994-e02f-43ba-96b8-\
c68c2518c9ff"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "ChurchillSpeech", "=", 
   "\"\<Turning once again, and this time more generally, to the question of \
invasion, I would observe that there has never been a period in all these \
long centuries of which we boast when an absolute guarantee against invasion, \
still less against serious raids, could have been given to our people. In the \
days of Napoleon, of which I was speaking just now, the same wind which would \
have carried his transports across the Channel might have driven away the \
blockading fleet. There was always the chance, and it is that chance which \
has excited and befooled the imaginations of many Continental tyrants. Many \
are the tales that are told. We are assured that novel methods will be \
adopted, and when we see the originality of malice, the ingenuity of \
aggression, which our enemy displays, we may certainly prepare ourselves for \
every kind of novel stratagem and every kind of brutal and treacherous man\
\[OE]uvre. I think that no idea is so outlandish that it should not be \
considered and viewed with a searching, but at the same time, I hope, with a \
steady eye. We must never forget the solid assurances of sea power and those \
which belong to air power if it can be locally exercised.\>\""}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.77746531948909*^9, 3.777465346394643*^9}, {
   3.777465421833747*^9, 3.777465459463644*^9}, 3.7802025359076815`*^9},
 CellLabel->"In[53]:=",ExpressionUUID->"72a48413-6886-444d-b901-f5126ff674d7"],

Cell[CellGroupData[{

Cell["Task 22", "Subsection",
 CellChangeTimes->{{3.7802025553120775`*^9, 3.78020255738857*^9}, {
  3.8144382164079556`*^9, 
  3.814438216803894*^9}},ExpressionUUID->"5a96645f-833e-4659-9347-\
2e76c0f197f4"],

Cell["\<\
Delete the stop words from the text and explore it by building a word cloud. \
\
\>", "Text",
 CellChangeTimes->{{3.7802025642194166`*^9, 3.7802025896126723`*^9}, {
  3.780202626505257*^9, 
  3.780202647042615*^9}},ExpressionUUID->"47d63ba9-10eb-42b9-910b-\
627a53b6833e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WordCloud", "[", 
  RowBox[{"DeleteStopwords", "[", "ChurchillSpeech", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.815306293971683*^9, 3.815306312649427*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"658fda19-b839-427f-b714-636cddf88b24"],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    StyleBox["\<\"power\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.12216404886561955`],
     FontColor->RGBColor[0.528488, 0.470624, 0.701351]], {0, 0}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"invasion\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.12216404886561955`],
     FontColor->RGBColor[0.880722, 0.611041, 0.142051]], {2.5, 40.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"chance\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.12216404886561955`],
     FontColor->RGBColor[0.368417, 0.506779, 0.709798]], {-0.5, -53.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"novel\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.12216404886561955`],
     FontColor->RGBColor[0.922526, 0.385626, 0.209179]], {19.5, 84.5}, Center,
     Automatic], InsetBox[
    StyleBox["\<\"imaginations\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.9810598048862722, 0.7553955338762525, 0.]], {6.5, -93.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"time\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.12216404886561955`],
     FontColor->RGBColor[0.772079, 0.431554, 0.102387]], {-3.5, 124.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"kind\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.12216404886561955`],
     FontColor->RGBColor[0.560181, 0.691569, 0.194885]], {10.5, -135.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"aggression\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.647624, 0.37816, 0.614037]], {45.5, 159.5}, Center,
     Automatic], InsetBox[
    StyleBox["\<\"blockading\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.838355547812947, 0.44746667828057946`, 0.0208888695323676]], {-131.5, -115.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"transports\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.9046334610863751, 0.334573307782725, 0.22977756485604156`]], {-15.5, -169.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"stratagem\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.19193353076984873`, 0.681453175384121, 0.6453202369238185]], {-136.5, 88.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"guarantee\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.37977756485605163`, 0.715, 0.3025558265468435]], {-0.5, 179.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"searching\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.47929071933511125`, 0.715, 0.1759027208462221]], {-138.5, 115.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"originality\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.2187618985811806, 0.715, 0.5074848563512248]], {133.5, 125.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Napoleon\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.9784200278733908, 0.649600139366954, 0.058265924741844846`]], {141.5, -122.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"speaking\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.9930578157165594, 0.7227890785827968, 0.01874389756528967]], {-137.5, 142.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"ingenuity\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.8168067340273636, 0.3521386531945273, 0.3761554432877274]], {138.5, -151.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"generally\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.9637822400302223, 0.5764112001511111, 0.0977879519184]], {58.5, -191.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"treacherous\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.38354466123747527`, 0.5323732032575149, 0.85]], {-59.5, 199.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"question\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.3103557220216354, 0.5867154223826917, 0.7874268664259625]], {148.5, -6.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"certainly\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.9324333565611593, 0.5282889043741062, 0.0921900209050434]], {-150.5, -144.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"displays\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.9874666782805795, 0.6948333914028977, 0.033839968642435214`]], {-154.5, 0.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"adopted\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[1, 0.75, 0]], {136.5, 186.5}, Center, Automatic], 
   InsetBox[
    StyleBox["\<\"Continental\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.8857244243136628, 0.3764133635295058, 0.1393110607841571]], {-99.5, -198.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"considered\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.5407932311309059, 0.715, 0.09762679674248334]], {16.5, 219.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"assurances\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.915, 0.3325, 0.2125]], {-0.5, -220.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"Turning\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.969373377466199, 0.6043668873309952, 0.08269188084126262]], {161.5, -35.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"prepare\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.8607200975568693, 0.34335598048862614`, 0.30296650407188447`]], {-162.5, -28.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"outlandish\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.8342400905885153, 0.4628267270590103, 0.0038160815296638794`]], {-143.5, 226.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"man\[OE]uvre\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.9038177251280404, 0.3492734123079395, 0.18454431282010084`]], {-159.5, 169.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"tyrants\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.7277983389807635, 0.358, 0.5168487092603637]], {153.5, 75.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"exercised\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.6184987019729621, 0.39212575718243875`, 0.7412532450675947]], {173.5, -84.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"enemy\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.16397784358994957`, 0.7038177251280403, 0.6117734123079395]], {-163.5, -57.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"steady\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.7896667828057927, 0.3575666434388414, 0.4213886953236787]], {-173.5, 27.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"people\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.596786740995709, 0.404791067752503, 0.7955331475107271]], {176.5, 20.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"centuries\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.28240003484173815`, 0.6090799721266095, 0.7538800418100857]], {-166.5, -86.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"belong\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965]], {-195.5, 56.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"methods\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.428777913273419, 0.5052332520359486, 0.85]], {152.5, -220.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"locally\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.9052934053395919, 0.510195603559728, 0.06776406480563275]], {183.5, 152.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"period\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.8493197142977551, 0.7407577460330839, 0.]], {200.5, 47.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"absolute\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.363898, 0.618501, 0.782349]], {162.5, 213.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"forget\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.35558897405758294`, 0.5505288207539337, 0.8417067688690995]], {168.5, -180.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"befooled\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.736782672705901, 0.358, 0.5030266573755369]], {-152.5, -227.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Channel\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.6753413537738198, 0.3589675436319385, 0.5991466155654507]], {158.5, 240.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"assured\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85]], {-0.5, 246.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"observe\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.7513196300394465, 0.358, 0.48066210763162087`]], {-178.5, -166.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"given\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.7132613816472081, 0.358, 0.5392132590042952]], {-201.5, 196.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"serious\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.8745421494417032, 0.39318677583744527`, 0.11135537360425793`]], {-0.5, -248.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"away\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.9728288904374106, 0.621644452187053, 0.07336199581899142]], {94.5, -242.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"viewed\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.31827505306025683`, 0.715, 0.3808317506505822]], {186.5, -249.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"excited\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.8613800418100862, 0.48092002787339083`, 0.02824203762907758]], {-108.5, -255.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"hope\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.8564488486273256, 0.42032672705901153`, 0.06612212156831418]], {235.5, 95.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"carried\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.8439466852489265, 0.3467106629502147, 0.3309221912517893]], {-113.5, 253.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"days\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.47401116530937026`, 0.47809330081437784`, 0.85]], {-221.5, -188.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"malice\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.6361597700445392, 0.7170733077827265, 0.]], {-211.5, -256.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"driven\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.7748409210981391, 0.358, 0.4444755060028629]], {-211.5, 253.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"long\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.6536293927965667, 0.37163285420200276`, 0.6534265180085832]], {242.5, -8.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"boast\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.5833680111493557, 0.4126186601628758, 0.8290799721266107]], {168.5, 260.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"just\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.23716678280579248`, 0.645266573755366, 0.699600139366951]], {244.5, -43.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"brutal\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.8996399512215667, 0.7463488834690629, 0.]], {-0.5, 266.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"think\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.6319174318193065, 0.38429816477207124`, 0.7077064204517338]], {245.5, 115.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"eye\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.7678998606330495, 0.7317110956258943, 0.]], {-243.5, 0.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"wind\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.845266573755366, 0.437100139366951, 0.03816643438841502]], {-248.5, -64.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"raids\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.9492067688690977, 0.5394711792460651, 0.10728609198218791`]], {248.5, -113.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"tales\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.8781534541180211, 0.4921023027453475, 0.04333810870621905]], {-249.5, 83.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"solid\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.5019668524892619, 0.46131988850644284`, 0.85]], {-247.5, 110.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"fleet\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[
      0.8878600487784333, 0.33792799024431336`, 0.2577332520359445]], {-253.5, -28.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"idea\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.5472001045252132, 0.43417993728487203`, 0.85]], {-254.5, 20.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"told\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.7175796237092107, 0.7261199581899123, 0.]], {255.5, 11.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"sea\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.6897400905885174, 0.358, 0.5753998606330502]], {138.5, -57.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"air\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06108202443280977],
     FontColor->RGBColor[0.571589, 0.586483, 0.]], {-231.5, -115.5}, Center, 
    Automatic]},
  DefaultBaseStyle->{"Graphics", FontFamily -> "Helvetica"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic},
  PlotRange->{{-287., 286.}, {-271., 281.}}]], "Output",
 CellChangeTimes->{3.8153063230360193`*^9, 3.8153170720600767`*^9, 
  3.815319282269168*^9, 3.815321847255317*^9, 3.815322003479432*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"9d255554-6731-4e6b-bd06-423bb1eb4baa"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 23", "Subsection",
 CellChangeTimes->{{3.7802026523684664`*^9, 3.7802026569373283`*^9}, {
  3.814438218664917*^9, 
  3.8144382191027527`*^9}},ExpressionUUID->"de94f632-07e6-483f-8d0a-\
6015451022e2"],

Cell[TextData[{
 "Give 3 of the most frequently used words in the fragment. (Hint: Use the ",
 StyleBox["TextWords", "CodeText"],
 " function)"
}], "Text",
 CellChangeTimes->{{3.7802026660327168`*^9, 3.78020268383247*^9}, {
  3.7802027175613775`*^9, 3.780202730787566*^9}, {3.780202774476014*^9, 
  3.780202804081712*^9}, {3.7802029077835093`*^9, 3.7802029478928385`*^9}, {
  3.7832324672694187`*^9, 
  3.783232467802298*^9}},ExpressionUUID->"46e68ae7-fed2-4f6b-96fa-\
64fb122691b4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reverse", "[", 
  RowBox[{"SortBy", "[", 
   RowBox[{
    RowBox[{"Tally", "[", 
     RowBox[{"TextWords", "[", 
      RowBox[{"DeleteStopwords", "[", "ChurchillSpeech", "]"}], "]"}], "]"}], 
    ",", " ", "Last"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.81530640352135*^9, 3.8153064675080233`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"3a5cf39a-79af-4a27-ac52-b20856dfcd47"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"time\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"power\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"novel\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"kind\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"invasion\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"chance\"\>", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"wind\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"viewed\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"tyrants\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Turning\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"treacherous\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"transports\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"told\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"think\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"tales\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"stratagem\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"steady\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"speaking\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"solid\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"serious\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"searching\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"sea\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"raids\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"question\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"prepare\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"period\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"people\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"outlandish\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"originality\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"observe\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Napoleon\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"methods\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"man\[OE]uvre\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"malice\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"long\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"locally\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"just\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"ingenuity\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"imaginations\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"idea\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"hope\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"guarantee\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"given\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"generally\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"forget\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"fleet\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"eye\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"exercised\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"excited\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"enemy\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"driven\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"displays\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"days\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Continental\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"considered\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Channel\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"certainly\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"centuries\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"carried\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"brutal\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"boast\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"blockading\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"belong\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"befooled\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"away\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"assured\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"assurances\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"air\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"aggression\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"adopted\"\>", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"absolute\"\>", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.815306436637507*^9, 3.8153064681382837`*^9}, 
   3.815317072281975*^9, 3.8153192823551383`*^9, 3.8153218473302917`*^9, 
   3.8153220036053896`*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"f748788f-2ca6-47c0-969d-e2f1986b22b3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 24", "Subsection",
 CellChangeTimes->{{3.7802033248405447`*^9, 3.7802033270898156`*^9}, {
  3.8144382213038616`*^9, 
  3.814438221778121*^9}},ExpressionUUID->"547e1390-44c1-4fbc-9e29-\
c4465d9ec032"],

Cell["\<\
Use the speech text to train a sequence predictor using a Markov chain of \
order 2. \
\>", "Text",
 CellChangeTimes->{{3.7802033311760635`*^9, 3.780203391727762*^9}, {
  3.780208288004651*^9, 
  3.780208299895813*^9}},ExpressionUUID->"7ce9cd0f-c03f-4ffa-9d95-\
60d0b70002f0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 25", "Subsection",
 CellChangeTimes->{{3.7802035753875628`*^9, 3.7802035769812436`*^9}, {
  3.8144382235533733`*^9, 
  3.8144382249017677`*^9}},ExpressionUUID->"44de2129-ce06-4680-8c83-\
b3736e1bd49a"],

Cell["\<\
Use the trained predictor to predict the next word in the sentence \
\[OpenCurlyDoubleQuote]absolute guarantee against\[CloseCurlyDoubleQuote]. \
Does the result make sense?\
\>", "Text",
 CellChangeTimes->{{3.7802035821108074`*^9, 
  3.7802036532868557`*^9}},ExpressionUUID->"9eee1cb7-0aa2-4005-aabc-\
510e4130365f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 26", "Subsection",
 CellChangeTimes->{{3.7802040293112245`*^9, 3.780204030859294*^9}, {
  3.8144382267797527`*^9, 
  3.814438227441974*^9}},ExpressionUUID->"87ba99b3-307a-47c3-955a-\
297d1a49a306"],

Cell["\<\
Predict the most likely 4 elements completing the sentence \
\[OpenCurlyDoubleQuote]absolute guarantee against\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.780204049680092*^9, 
  3.780204117820272*^9}},ExpressionUUID->"f88c6ba8-046c-4f85-af07-\
85f326d66de9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 27", "Subsection",
 CellChangeTimes->{{3.7802041315110216`*^9, 3.780204133868044*^9}, {
  3.8144382304220057`*^9, 
  3.814438230744147*^9}},ExpressionUUID->"59fbd318-bb27-4cc3-8710-\
98cba47669c4"],

Cell["\<\
Sort the words that complete the sentence \[OpenCurlyDoubleQuote]absolute \
guarantee against\[CloseCurlyDoubleQuote] in increasing order in terms of \
their probability.\
\>", "Text",
 CellChangeTimes->{{3.780204137094338*^9, 
  3.780204191687224*^9}},ExpressionUUID->"66bdddac-f112-4d61-b027-\
6c5377464e15"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1664, 1159},
WindowMargins->{{-2, Automatic}, {Automatic, 3}},
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (June 19, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"cafbdf1d-bb7c-408b-8e06-4335b684fb08"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 172, 2, 28, "Input",ExpressionUUID->"4ebab819-0e2f-4fb2-90e9-0f6f08d3445e"],
Cell[CellGroupData[{
Cell[755, 26, 337, 5, 96, "Title",ExpressionUUID->"3f6bed55-5853-4250-a1b9-bb3bd463014f"],
Cell[CellGroupData[{
Cell[1117, 35, 146, 3, 67, "Section",ExpressionUUID->"d64be271-a728-4f07-9964-f3dac8a9b6ab"],
Cell[1266, 40, 1335, 24, 232, "Text",ExpressionUUID->"377f75c9-a050-4dc1-bba2-e744bba281ad"],
Cell[CellGroupData[{
Cell[2626, 68, 158, 3, 53, "Subsection",ExpressionUUID->"145ee5f6-5d9b-42bf-8428-d39618ab358d"],
Cell[2787, 73, 470, 9, 34, "Text",ExpressionUUID->"e652e3ef-00c2-4aa4-9c7e-edf3aee798d5"],
Cell[CellGroupData[{
Cell[3282, 86, 227, 7, 31, "Item",ExpressionUUID->"6ce56057-5507-4d6d-8694-6aaeca9a7cee"],
Cell[3512, 95, 244, 7, 31, "Item",ExpressionUUID->"a51c2475-bbf5-456c-a7e4-4c0476035368"],
Cell[3759, 104, 591, 16, 31, "Item",ExpressionUUID->"d3946448-d690-4924-81b1-829ebd97485f"],
Cell[4353, 122, 277, 7, 31, "Item",ExpressionUUID->"952500f0-049e-4751-9fcd-a4519cfd1560"],
Cell[4633, 131, 212, 7, 31, "Item",ExpressionUUID->"2cb699e8-ebc4-4b7c-873c-f1e7410d7283"],
Cell[4848, 140, 297, 8, 31, "Item",ExpressionUUID->"3cb8dd5c-3e95-450a-a4e1-d4a868abb65e"],
Cell[5148, 150, 258, 7, 31, "Item",ExpressionUUID->"1087031c-7781-445c-b6ac-9af92827a830"]
}, Open  ]],
Cell[5421, 160, 475, 12, 34, "Text",ExpressionUUID->"17853437-c22c-456a-b2c0-25202789af86"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5933, 177, 179, 3, 53, "Subsection",ExpressionUUID->"51aea49d-20b1-4a9b-a5e7-39d30b9d5516"],
Cell[6115, 182, 303, 7, 34, "Text",ExpressionUUID->"bb4569c9-68c4-4775-b598-4fc2d6e50741"],
Cell[CellGroupData[{
Cell[6443, 193, 525, 10, 28, "Input",ExpressionUUID->"ef3cefb9-cc57-4d7f-88e8-fe8cb7cfc012"],
Cell[6971, 205, 125247, 2375, 563, "Output",ExpressionUUID->"9f64238f-9dc8-49f3-8cac-1713132622bc"]
}, Open  ]],
Cell[132233, 2583, 174, 2, 28, "Input",ExpressionUUID->"e9754b72-8295-4bca-9a58-a4275de69a63"]
}, Open  ]],
Cell[CellGroupData[{
Cell[132444, 2590, 230, 4, 53, "Subsection",ExpressionUUID->"9e6e1a69-fe72-40a4-91a7-36931aa10c1f"],
Cell[132677, 2596, 232, 4, 34, "Text",ExpressionUUID->"92309b8a-d4fb-4a66-9ee9-ab02f190b690"],
Cell[CellGroupData[{
Cell[132934, 2604, 332, 8, 28, "Input",ExpressionUUID->"efc90462-3e97-482e-8b0d-d901a2c1024b"],
Cell[133269, 2614, 51015, 975, 193, "Output",ExpressionUUID->"83c52445-84dd-4e06-b4e1-0a91f8af2f5d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[184333, 3595, 207, 4, 53, "Subsection",ExpressionUUID->"3dcc9817-f95a-4ff1-8687-86ab51ce2c44"],
Cell[184543, 3601, 530, 10, 56, "Text",ExpressionUUID->"230321c7-ea19-42ec-ae24-15df3aafbf89"],
Cell[185076, 3613, 281, 7, 31, "Item",ExpressionUUID->"863e2268-144a-4438-b7c5-37c194e80b1b"],
Cell[CellGroupData[{
Cell[185382, 3624, 194, 3, 28, "Input",ExpressionUUID->"eb17db38-c832-4b1c-919d-dbb2323b7ba6"],
Cell[185579, 3629, 12861, 304, 117, "Output",ExpressionUUID->"6f4d276f-fc7b-48ba-97d6-4902225f43b1"]
}, Open  ]],
Cell[198455, 3936, 179, 3, 28, "Input",ExpressionUUID->"86d90d94-fddd-4d8e-9e64-5c49bef906c5"],
Cell[198637, 3941, 409, 9, 28, "Input",ExpressionUUID->"a0a4c9ae-819a-48d0-b562-ab9dae411962"],
Cell[199049, 3952, 298, 9, 31, "Item",ExpressionUUID->"fda1e783-3b42-4a4f-9c82-202943c787ba"],
Cell[199350, 3963, 362, 8, 28, "Input",ExpressionUUID->"997e04ed-0e56-47da-9cc3-93d022986ed6"],
Cell[199715, 3973, 358, 8, 28, "Input",ExpressionUUID->"fa564530-9eb6-4c98-865f-090ba089332a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[200110, 3986, 208, 4, 53, "Subsection",ExpressionUUID->"1f44095c-6782-4dd2-8c72-de019e988ff4"],
Cell[200321, 3992, 355, 10, 34, "Text",ExpressionUUID->"05a03002-680a-40a6-aa6f-e5a27cc38612"],
Cell[200679, 4004, 377, 8, 28, "Input",ExpressionUUID->"10acf5fb-f422-451f-a9e7-b723a3443b8d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[201093, 4017, 203, 4, 53, "Subsection",ExpressionUUID->"7d640b95-d60c-4403-bad4-d2b2b0dbaab4"],
Cell[201299, 4023, 173, 3, 34, "Text",ExpressionUUID->"66b99ae1-ffd6-436c-8325-9222ff2bcaa8"],
Cell[CellGroupData[{
Cell[201497, 4030, 213, 3, 28, "Input",ExpressionUUID->"30b38aad-e890-4956-976b-af433eb5ff58"],
Cell[201713, 4035, 10165, 300, 228, "Output",ExpressionUUID->"97f807e3-66a1-4a1f-ad44-cb72518a80cd"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[211927, 4341, 208, 4, 53, "Subsection",ExpressionUUID->"6f0229dd-b922-4ad8-9d31-35d47c7c3129"],
Cell[212138, 4347, 222, 5, 34, "Text",ExpressionUUID->"b4c3ce5c-b862-4a7f-86ac-18904748cc3e"],
Cell[212363, 4354, 309, 7, 28, "Input",ExpressionUUID->"c7164fe4-91a3-41ef-9989-2532af799c2f"],
Cell[212675, 4363, 542, 13, 28, "Input",ExpressionUUID->"e32a7e56-113d-4950-bb9c-1739e4fafa29"],
Cell[213220, 4378, 321, 8, 28, "Input",ExpressionUUID->"3e441aa6-84d7-44f7-a720-d570ded49076"],
Cell[213544, 4388, 348, 8, 28, "Input",ExpressionUUID->"cdd0d145-bf1e-42d2-ae77-d3d3d2583d61"],
Cell[213895, 4398, 229, 4, 28, "Input",ExpressionUUID->"13ef776d-facb-45db-8566-9d1216782189"],
Cell[214127, 4404, 379, 8, 28, "Input",ExpressionUUID->"1f3f3da1-5afb-4288-9053-5dc42bfe15fe"],
Cell[CellGroupData[{
Cell[214531, 4416, 210, 3, 28, "Input",ExpressionUUID->"c815b8a9-0bae-42b1-bae3-ec7535b7ca38"],
Cell[214744, 4421, 24283, 431, 101, "Output",ExpressionUUID->"0f03776c-6aae-4cda-8a7b-423a889484b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[239064, 4857, 527, 10, 28, "Input",ExpressionUUID->"02e19c3c-30e8-4cea-ba9e-617ff9bbc301"],
Cell[239594, 4869, 14403, 315, 234, "Output",ExpressionUUID->"6c275124-024f-4b03-8612-3a640d15133a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[254046, 5190, 211, 4, 53, "Subsection",ExpressionUUID->"96fb7888-e426-4382-9fd8-7859b5815028"],
Cell[254260, 5196, 480, 9, 34, "Text",ExpressionUUID->"cf8fca7d-76e6-4a10-ade8-00a000f2d8cb"],
Cell[254743, 5207, 374, 8, 28, "Input",ExpressionUUID->"f4a639c2-d289-4f79-9b25-37a6a9c0c59a"],
Cell[CellGroupData[{
Cell[255142, 5219, 1096, 24, 28, "Input",ExpressionUUID->"7b95e2c8-2e0c-4e5a-924e-68a7c680a823"],
Cell[256241, 5245, 49886, 837, 237, 17028, 298, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"750d6c85-6c27-4c8d-b128-4996f1fad18f"]
}, Open  ]],
Cell[306142, 6085, 788, 20, 28, "Input",ExpressionUUID->"59c1c5b8-8b42-4572-855c-73c478af6786"],
Cell[CellGroupData[{
Cell[306955, 6109, 469, 9, 28, "Input",ExpressionUUID->"8028eb5a-3a8d-4602-aee3-0530fe6361ed"],
Cell[307427, 6120, 35067, 680, 236, "Output",ExpressionUUID->"f275fa91-65dd-4da9-8ced-78f378ae978f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[342543, 6806, 206, 4, 53, "Subsection",ExpressionUUID->"e7ef346f-7ac1-4080-bfa2-9791fbb1531a"],
Cell[342752, 6812, 242, 4, 34, "Text",ExpressionUUID->"8533efc1-f18d-470d-9311-abf2b337ae00"],
Cell[342997, 6818, 745, 19, 28, "Input",ExpressionUUID->"0879398f-8770-4689-9d76-d9ee454bdc44"],
Cell[CellGroupData[{
Cell[343767, 6841, 420, 8, 28, "Input",ExpressionUUID->"49fe20f8-f207-4a01-945d-0ef965717f32"],
Cell[344190, 6851, 31244, 592, 236, "Output",ExpressionUUID->"84c255f2-0b27-49ff-b741-5b490dc7e5b7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[375483, 7449, 209, 4, 53, "Subsection",ExpressionUUID->"9a47401d-c4d7-466a-bd31-3c4f0209df33"],
Cell[375695, 7455, 245, 4, 34, "Text",ExpressionUUID->"3a216445-a1f1-4b61-9c6e-2720e459a30d"],
Cell[375943, 7461, 746, 19, 28, "Input",ExpressionUUID->"368a5ee3-ce2c-43ae-a65d-426114d7663b"],
Cell[CellGroupData[{
Cell[376714, 7484, 423, 8, 28, "Input",ExpressionUUID->"588e4981-1c9e-45a3-8c23-21325b6731b7"],
Cell[377140, 7494, 25419, 436, 234, 15193, 268, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"e8cbcf66-e0d6-4855-a2d3-3aa5843cec0d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[402608, 7936, 212, 4, 53, "Subsection",ExpressionUUID->"510ac69e-4a12-4f05-bba1-6011218b56cd"],
Cell[402823, 7942, 292, 7, 34, "Text",ExpressionUUID->"6cfd0c99-afb3-4dc2-ac4b-22672e8a2813"],
Cell[403118, 7951, 1565, 34, 48, "Input",ExpressionUUID->"335ff1ba-daa8-46d5-a5a0-848dc45c0745"],
Cell[CellGroupData[{
Cell[404708, 7989, 420, 8, 28, "Input",ExpressionUUID->"a9d307ee-483f-4c1e-87a9-b678f9c55bea"],
Cell[405131, 7999, 45995, 844, 391, "Output",ExpressionUUID->"d457de03-5007-4fab-bb49-41ddb6ee4bae"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[451175, 8849, 208, 4, 53, "Subsection",ExpressionUUID->"6d7208b0-233b-48b4-822d-ed29c87541cb"],
Cell[451386, 8855, 478, 11, 34, "Text",ExpressionUUID->"549aaf24-8f8c-4e63-9c97-20118bd1c066"],
Cell[CellGroupData[{
Cell[451889, 8870, 348, 6, 28, "Input",ExpressionUUID->"78a496f0-c817-4261-8171-c3373e794a95"],
Cell[452240, 8878, 203, 3, 32, "Output",ExpressionUUID->"192573b3-e929-428d-80dc-8438811b070c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[452480, 8886, 276, 5, 28, "Input",ExpressionUUID->"434a9cfd-7e66-4861-bbf8-4de536e1947e"],
Cell[452759, 8893, 225, 3, 32, "Output",ExpressionUUID->"b956678e-7c9c-45db-b834-1df83ebd6368"]
}, Open  ]],
Cell[452999, 8899, 537, 13, 28, "Input",ExpressionUUID->"c85c0782-b6d9-464f-9875-49d44ecad1e1"],
Cell[CellGroupData[{
Cell[453561, 8916, 216, 3, 28, "Input",ExpressionUUID->"311a96ea-866f-43b5-ab74-165abc20bd0d"],
Cell[453780, 8921, 244, 5, 32, "Output",ExpressionUUID->"32600eba-e138-4f8d-ba01-9f050432c180"]
}, Open  ]],
Cell[CellGroupData[{
Cell[454061, 8931, 219, 3, 28, "Input",ExpressionUUID->"128b1a64-410a-4f19-859a-d0f161ea8fe0"],
Cell[454283, 8936, 274, 5, 32, "Output",ExpressionUUID->"d858798c-917b-4ab9-8eec-7de6f007eb97"]
}, Open  ]],
Cell[454572, 8944, 168, 2, 48, "Input",ExpressionUUID->"61b0f7fc-668a-4f2c-90f8-beedfc84a39e"],
Cell[454743, 8948, 351, 8, 28, "Input",ExpressionUUID->"49d37b57-133a-4a53-a7c3-22801497cbda"],
Cell[455097, 8958, 334, 7, 28, "Input",ExpressionUUID->"cb805e05-7dfe-4507-9398-b07bc91c74df"],
Cell[455434, 8967, 352, 8, 28, "Input",ExpressionUUID->"774a5ed7-c108-486c-861d-e0447410edd6"],
Cell[455789, 8977, 327, 7, 28, "Input",ExpressionUUID->"b8c31695-2fe0-4b81-8e6d-f72b1abc1df0"],
Cell[456119, 8986, 586, 15, 28, "Input",ExpressionUUID->"2df53c8d-0efa-43ea-a728-848ae46c62df"],
Cell[456708, 9003, 582, 15, 28, "Input",ExpressionUUID->"bd059ce1-73ba-44a5-817f-3ab30af2dd30"]
}, Open  ]],
Cell[CellGroupData[{
Cell[457327, 9023, 209, 4, 53, "Subsection",ExpressionUUID->"a5f98e15-310d-4f63-b76d-2e9c26d47716"],
Cell[457539, 9029, 313, 5, 34, "Text",ExpressionUUID->"7cf8fb76-7a09-4980-b202-728333338b6d"],
Cell[CellGroupData[{
Cell[457877, 9038, 351, 6, 28, "Input",ExpressionUUID->"d9702bf9-7a27-41ad-a61b-6256299c1b47"],
Cell[458231, 9046, 144195, 2582, 69, "Output",ExpressionUUID->"9c078784-cbad-490c-a132-2142ee92c45a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[602475, 11634, 212, 4, 53, "Subsection",ExpressionUUID->"bb874de3-0a91-43d3-9c19-70935fc7ad7d"],
Cell[602690, 11640, 458, 9, 34, "Text",ExpressionUUID->"fa858e39-8343-4e73-8cc2-dcf032cd3070"],
Cell[CellGroupData[{
Cell[603173, 11653, 378, 6, 28, "Input",ExpressionUUID->"05aa786f-ca30-42e8-b8a5-c0ce8f883203"],
Cell[603554, 11661, 283113, 4880, 69, "Output",ExpressionUUID->"38675cd0-7c98-471b-a94d-b17306cf2a14"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[886716, 16547, 210, 4, 53, "Subsection",ExpressionUUID->"087856fa-a650-44e9-a0c9-1b006a209105"],
Cell[886929, 16553, 282, 8, 34, "Text",ExpressionUUID->"d53b6bf2-d303-4fe8-994d-b8468b351848"],
Cell[CellGroupData[{
Cell[887236, 16565, 480, 10, 28, "Input",ExpressionUUID->"b5722b1f-029f-4631-b90f-9325fb225716"],
Cell[887719, 16577, 306235, 5004, 131, "Output",ExpressionUUID->"90362627-9943-4f2d-a46d-f12ec2a0f362"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1194003, 21587, 210, 4, 53, "Subsection",ExpressionUUID->"b392d5b9-5937-4dcb-9c82-fe04831af5f7"],
Cell[1194216, 21593, 374, 8, 34, "Text",ExpressionUUID->"38e00dec-f68b-4833-9118-fb250259d301"],
Cell[1194593, 21603, 481, 11, 28, "Input",ExpressionUUID->"bfed0e3e-090e-4bb1-b4ce-fbee018fae15"],
Cell[CellGroupData[{
Cell[1195099, 21618, 1253, 28, 67, "Input",ExpressionUUID->"d7977494-362b-461c-87a1-f4bb52a68cee"],
Cell[1196355, 21648, 1113, 21, 23, "Message",ExpressionUUID->"bc333652-d48f-417c-becf-66bcf105fd31"],
Cell[1197471, 21671, 3518, 51, 41, "Message",ExpressionUUID->"d8ab76b1-ebc8-4668-8924-37ff12b4e366"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1201050, 21729, 180, 3, 67, "Section",ExpressionUUID->"13a5c354-ce61-407e-a511-615adc209539"],
Cell[1201233, 21734, 1241, 25, 56, "Text",ExpressionUUID->"b021e6fa-c890-4147-8b1d-563ffee958d4"],
Cell[1202477, 21761, 23732, 417, 38, "Text",ExpressionUUID->"53e3f778-3cd0-4d3d-b419-851af7f139db"],
Cell[1226212, 22180, 105928, 1811, 38, "Input",ExpressionUUID->"231e6adb-d31d-4c97-8677-a630498533d0"],
Cell[CellGroupData[{
Cell[1332165, 23995, 178, 3, 53, "Subsection",ExpressionUUID->"bffffdde-f692-4fc9-ab6a-fa0e45a0c525"],
Cell[1332346, 24000, 230, 4, 34, "Text",ExpressionUUID->"836970b2-c272-4898-a99d-c4beb03c2049"],
Cell[CellGroupData[{
Cell[1332601, 24008, 255, 4, 28, "Input",ExpressionUUID->"4b6fbf70-5af1-46f0-841d-2f540561a6fd"],
Cell[1332859, 24014, 53105, 974, 69, "Output",ExpressionUUID->"860e8965-4c0e-4cc4-a136-b581b61ba283"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1386013, 24994, 210, 4, 53, "Subsection",ExpressionUUID->"1fa4b2e6-e8be-4c5c-a723-440ae060dba1"],
Cell[1386226, 25000, 338, 8, 34, "Text",ExpressionUUID->"2c6f60d7-2d28-4731-a31a-542a01daa2a1"],
Cell[CellGroupData[{
Cell[1386589, 25012, 23132, 397, 38, "Input",ExpressionUUID->"b2519cdd-cc10-4684-9af6-d36070c346a1"],
Cell[1409724, 25411, 21405, 371, 40, "Output",ExpressionUUID->"67c9297b-119a-4f77-a17b-0118044dfd4d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1431178, 25788, 208, 4, 53, "Subsection",ExpressionUUID->"a2dbf676-8052-438e-9acc-65a9ceeec1dd"],
Cell[1431389, 25794, 272, 6, 34, "Text",ExpressionUUID->"38335859-85b8-4c5b-bab3-080a3f73164d"],
Cell[CellGroupData[{
Cell[1431686, 25804, 23308, 400, 38, "Input",ExpressionUUID->"43410fa4-63b8-4532-80c1-b213e49739a6"],
Cell[1454997, 26206, 76927, 1324, 42, "Output",ExpressionUUID->"30acfc9a-da99-45a4-b262-16e76d7f53a7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1531973, 27536, 208, 4, 53, "Subsection",ExpressionUUID->"f9e0d0cb-dd46-4a0e-a6e4-6d8ab57d17f7"],
Cell[1532184, 27542, 14895, 262, 39, "Text",ExpressionUUID->"72a87734-1215-48d1-88e5-196fb82f7b43"],
Cell[CellGroupData[{
Cell[1547104, 27808, 14475, 250, 36, "Input",ExpressionUUID->"ddc8644a-9c95-41c4-b0ba-552313b5a622"],
Cell[1561582, 28060, 7121, 123, 38, "Output",ExpressionUUID->"c5e0a00a-5aee-4866-b77e-9b0792ae4d67"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1568752, 28189, 210, 4, 53, "Subsection",ExpressionUUID->"3b356b68-8bce-4ebb-b468-2fcec3e95a9e"],
Cell[1568965, 28195, 306, 9, 34, "Text",ExpressionUUID->"f34af566-9d4b-42f9-b5b9-33d8303a31b5"],
Cell[CellGroupData[{
Cell[1569296, 28208, 454, 10, 28, "Input",ExpressionUUID->"84ecd4a6-b430-4d16-949f-7e94998b7db6"],
Cell[1569753, 28220, 57800, 1076, 69, "Output",ExpressionUUID->"e65d621e-c1a2-45bb-9b45-a8166194b4f7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1627602, 29302, 207, 4, 53, "Subsection",ExpressionUUID->"0798243a-a487-4a6c-bf96-bbfb566e8d12"],
Cell[1627812, 29308, 14839, 262, 39, "Text",ExpressionUUID->"acaa01d8-de15-4009-b374-7543228fc62d"],
Cell[CellGroupData[{
Cell[1642676, 29574, 14480, 250, 36, "Input",ExpressionUUID->"da7e444f-8630-4e45-ba81-e0eb1c8ea757"],
Cell[1657159, 29826, 8568, 146, 39, "Output",ExpressionUUID->"ec7b44c5-1cde-4a5f-9bfb-a3ed36c6e525"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1665776, 29978, 172, 3, 53, "Subsection",ExpressionUUID->"1f28dc5f-e774-460c-8eaa-465107f1a8cf"],
Cell[1665951, 29983, 753, 17, 78, "Text",ExpressionUUID->"082c5847-16d6-47b3-9e14-cdc524341528"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1666753, 30006, 264, 6, 105, "Section",ExpressionUUID->"8f700e3d-3c1d-48fa-bcda-53ccff4c8c43"],
Cell[1667020, 30014, 304, 6, 34, "Text",ExpressionUUID->"61437994-e02f-43ba-96b8-c68c2518c9ff"],
Cell[1667327, 30022, 1521, 23, 238, "Input",ExpressionUUID->"72a48413-6886-444d-b901-f5126ff674d7"],
Cell[CellGroupData[{
Cell[1668873, 30049, 207, 4, 53, "Subsection",ExpressionUUID->"5a96645f-833e-4659-9347-2e76c0f197f4"],
Cell[1669083, 30055, 282, 7, 34, "Text",ExpressionUUID->"47d63ba9-10eb-42b9-910b-627a53b6833e"],
Cell[CellGroupData[{
Cell[1669390, 30066, 263, 4, 28, "Input",ExpressionUUID->"658fda19-b839-427f-b714-636cddf88b24"],
Cell[1669656, 30072, 17432, 407, 364, "Output",ExpressionUUID->"9d255554-6731-4e6b-bd06-423bb1eb4baa"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1687137, 30485, 210, 4, 53, "Subsection",ExpressionUUID->"de94f632-07e6-483f-8d0a-6015451022e2"],
Cell[1687350, 30491, 483, 10, 35, "Text",ExpressionUUID->"46e68ae7-fed2-4f6b-96fa-64fb122691b4"],
Cell[CellGroupData[{
Cell[1687858, 30505, 409, 9, 28, "Input",ExpressionUUID->"3a5cf39a-79af-4a27-ac52-b20856dfcd47"],
Cell[1688270, 30516, 5476, 148, 166, "Output",ExpressionUUID->"f748788f-2ca6-47c0-969d-e2f1986b22b3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1693795, 30670, 210, 4, 54, "Subsection",ExpressionUUID->"547e1390-44c1-4fbc-9e29-c4465d9ec032"],
Cell[1694008, 30676, 286, 7, 35, "Text",ExpressionUUID->"7ce9cd0f-c03f-4ffa-9d95-60d0b70002f0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1694331, 30688, 212, 4, 54, "Subsection",ExpressionUUID->"44de2129-ce06-4680-8c83-b3736e1bd49a"],
Cell[1694546, 30694, 327, 7, 35, "Text",ExpressionUUID->"9eee1cb7-0aa2-4005-aabc-510e4130365f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1694910, 30706, 208, 4, 54, "Subsection",ExpressionUUID->"87ba99b3-307a-47c3-955a-297d1a49a306"],
Cell[1695121, 30712, 285, 6, 35, "Text",ExpressionUUID->"f88c6ba8-046c-4f85-af07-85f326d66de9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1695443, 30723, 208, 4, 54, "Subsection",ExpressionUUID->"59fbd318-bb27-4cc3-8710-98cba47669c4"],
Cell[1695654, 30729, 320, 7, 35, "Text",ExpressionUUID->"66bdddac-f112-4d61-b027-6c5377464e15"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

